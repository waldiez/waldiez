
[build-system]
build-backend = "hatchling.build"
requires = [
  "hatchling==1.27.0",
  "hatch-nodejs-version==0.4.0",
]
[project]
classifiers = [
  "Development Status :: 4 - Beta",
  "License :: OSI Approved :: Apache Software License",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Operating System :: OS Independent",
  "Framework :: Pydantic :: 2",
  "Intended Audience :: Science/Research",
  "Intended Audience :: Developers",
  "Intended Audience :: Education",
  "Topic :: Scientific/Engineering",
  "Topic :: Scientific/Engineering :: Artificial Intelligence",
  "Topic :: Software Development :: Code Generators",
  "Typing :: Typed",
]

dependencies = [
  "ag2[openai]==0.10.0",
  "aiocsv==1.4.0",
  "aiofiles==25.1.0",
  "aiosqlite==0.21.0",
  "numpy",
  "nest_asyncio==1.6.0",
  "graphviz<=0.21",
  "pandas>=2",
  "pillow",
  "pip>=25.1",
  "jupytext",
  "parso==0.8.5",
  "psutil==7.1.1",
  "rpds-py==0.28.0",
  "platformdirs==4.5.0",
  "pydantic>=2.10.2,<3",
  "typer>=0.18.0,<1",
  "click==8.3.0",
  "httpx<1",
]
dynamic = ["version", "description", "authors", "urls", "keywords"]
name = "waldiez"
readme = "README.md"
requires-python = ">=3.10,<3.14"

[project.scripts]
waldiez = "waldiez.cli:app"

[project.optional-dependencies]
# stream-io-extensions: redis, websockets, mqtt
redis = [
    "ag2[redis]==0.10.0",
]
websockets = [
    "websockets>=14.0,<16",
]
mqtt = [
    "paho-mqtt>=2.1.0,<3.0",
]
# jupyterlab extension
jupyter = [
  "waldiez_jupyter==0.6.1",
  "jupyterlab==4.4.10",
  "ipywidgets==8.1.7",
  "jupyter_server==2.17.0",
]
runner = [
  "waldiez_runner==0.6.1; python_version >= '3.11'",
]
studio = [
  "waldiez_studio==0.6.1",
]
reload = [
    "watchdog>=5.0.0",
]
ag2_extras = [
  "ag2[a2a]==0.10.0",
  "ag2[anthropic]==0.10.0",
  "ag2[autobuild]==0.10.0",
  "ag2[bedrock]==0.10.0",
  "ag2[blendsearch]==0.10.0",
  "ag2[cohere]==0.10.0",
  "ag2[commsagent-discord]==0.10.0",
  "ag2[commsagent-slack]==0.10.0",
  "ag2[commsagent-telegram]==0.10.0",
  "ag2[crawl4ai]==0.10.0",
  "ag2[duckduckgo]==0.10.0",
  "ag2[gemini-realtime]==0.10.0;sys_platform != 'win32'",
  "ag2[gemini-realtime]==0.10.0;sys_platform == 'win32' and platform_machine != 'arm64' and platform_machine != 'aarch64' and platform_machine != 'ARM64' and platform_machine != 'AARCH64'",
  "ag2[gemini]==0.10.0;sys_platform != 'win32'",
  "ag2[gemini]==0.10.0;sys_platform == 'win32' and platform_machine != 'arm64' and platform_machine != 'aarch64' and platform_machine != 'ARM64' and platform_machine != 'AARCH64'",
  "ag2[google-api]==0.10.0",
  "ag2[google-client]==0.10.0",
  "ag2[google-search]==0.10.0",
  "ag2[graph]==0.10.0",
  "ag2[groq]==0.10.0",
  "ag2[interop-crewai]==0.10.0",
  "ag2[interop-langchain]==0.10.0",
  "ag2[interop-pydantic-ai]==0.10.0",
  "ag2[lmm]==0.10.0",
  "ag2[long-context]==0.10.0",
  # "ag2[mcp-proxy-gen]==0.10.0",  # incompatible typer pin
  "ag2[mcp]==0.10.0",
  "ag2[mistral]==0.10.0",
  "ag2[neo4j]==0.10.0;sys_platform != 'win32'",
  "ag2[neo4j]==0.10.0;sys_platform == 'win32' and platform_machine != 'arm64' and platform_machine != 'aarch64' and platform_machine != 'ARM64' and platform_machine != 'AARCH64'",
  "ag2[ollama]==0.10.0",
  "ag2[openai-realtime]==0.10.0",
  "ag2[redis]==0.10.0",
  "ag2[retrievechat]==0.10.0",
  "ag2[retrievechat-pgvector]==0.10.0",
  "ag2[retrievechat-mongodb]==0.10.0",
  "ag2[retrievechat-qdrant]==0.10.0",
  "ag2[retrievechat-couchbase]==0.10.0",
  "ag2[tavily]==0.10.0",
  "ag2[rag]==0.10.0",
  "ag2[together]==0.10.0;sys_platform != 'win32'",
  "ag2[together]==0.10.0;sys_platform == 'win32' and platform_machine != 'arm64' and platform_machine != 'aarch64' and platform_machine != 'ARM64' and platform_machine != 'AARCH64'",
  "ag2[twilio]==0.10.0",
  "ag2[websockets]==0.10.0",
  "ag2[websurfer]==0.10.0",
  "ag2[wikipedia]==0.10.0",
]
dev = [
  "ag2[redis]==0.10.0",
  "autoflake==2.3.1",
  "bandit==1.8.6",
  "basedpyright==1.32.1",
  "black[jupyter]==25.9.0",
  "build==1.3.0",
  "fakeredis==2.32.0",
  "flake8==7.3.0",
  "jsonschema==4.25.1",
  "jupyterlab==4.4.10",
  "notebook-shim>=0.2.4",
  "fastjsonschema>=2.21.2",
  "jupyter_server==2.17.0",
  "nbclient>=0.10.2",
  "nbformat>=5.10.4",
  "nbconvert>=7.16.6",
  "hatchling==1.27.0",
  "mypy==1.18.2",
  "mypy-extensions>=1.1.0",
  "paho-mqtt>=2.1.0,<3.0",
  "pandas-stubs==2.3.2.250926",
  "nodeenv>=1.9.1",
  "prek==0.2.11",
  "pydocstyle==6.3.0",
  "pylint==4.0.2",
  "python-dotenv>=1.1.1",
  "ruff==0.14.2",
  "types-aiofiles==25.1.0.20251011",
  "types-jsonschema==4.25.1.20251009",
  "types-pyyaml==6.0.12.20250915",
  "types-psutil==7.0.0.20251001",
  "types-redis==4.6.0.20241004",
  "types-toml==0.10.8.20240310",
  "types-requests==2.32.4.20250913",
  "toml==0.10.2; python_version <= '3.10'",
  "tox==4.32.0",
  "watchdog>=5.0.0",
  "websockets>=14.0,<16",
  "yamllint==1.37.1",
]
docs = [
  "markdown-callouts==0.4.0",
  "mdx-include==1.4.2",
  "mdx_truly_sane_lists==1.3",
  "mkdocs==1.6.1",
  "mkdocs-autorefs==1.4.3",
  "mkdocs-jupyter==0.25.1",
  "mkdocs-macros-plugin==1.4.0",
  "mkdocs-material==9.6.22",
  "mkdocs-minify-html-plugin==0.3.8;python_version >='3.11'",
  "mkdocs-minify-html-plugin==0.3.8;python_version <= '3.13' and sys_platform != 'win32'",
  "mkdocs-minify-html-plugin;python_version =='3.10' and sys_platform == 'win32' and platform_machine == 'arm64'",
  "mkdocs-minify-html-plugin;python_version =='3.10' and sys_platform == 'win32' and platform_machine == 'aarch64'",
  "mkdocs-minify-html-plugin;python_version == '3.10' and sys_platform == 'win32' and platform_machine == 'ARM64'",
  "mkdocs-minify-html-plugin;python_version == '3.10' and sys_platform == 'win32' and platform_machine == 'AARCH64'",
  "mkdocs-minify-html-plugin==0.3.8;python_version == '3.10' and sys_platform == 'win32' and platform_machine != 'arm64' and platform_machine != 'aarch64' and platform_machine != 'ARM64' and platform_machine != 'AARCH64'",
  "mkdocstrings[crystal,python]==0.30.1",
  "mkdocstrings-crystal==0.3.7",
  "mkdocstrings-python==1.18.2",
  "mkdocs-awesome-nav==3.2.0",
  "mkdocs-open-in-new-tab==1.0.8",
  "natsort==8.4.0",
]
test = [
  "ag2[redis]==0.10.0",
  "ag2[websockets]==0.10.0",
  "fakeredis==2.32.0",
  "paho-mqtt>=2.1.0,<3.0",
  "pytest==8.4.2",
  "pytest-asyncio==1.2.0",
  "pytest-cov==7.0.0",
  "pytest-env==1.2.0",
  "pytest-html==4.1.1",
  "pytest-sugar==1.1.1",
  "pytest-timeout==2.4.0",
  "pytest-xdist==3.8.0",
  "tox==4.32.0",
  "watchdog>=5.0.0",
  "websockets>=14.0,<16",
]

[tool.hatch.version]
source = "nodejs"

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.build.targets.sdist]
exclude = ["**/example.py", ".gitignore"]
packages = ["waldiez", "waldiez.*"]
directory = "out/dist"

[tool.hatch.build.targets.wheel]
exclude = ["**/example.py"]
packages = ["waldiez", "waldiez.*"]
directory = "out/dist"

[tool.hatch.build.hooks.version]
path = "waldiez/_version.py"
template = '''
# SPDX-License-Identifier: Apache-2.0.
# Copyright (c) 2024 - 2025 Waldiez and contributors.
"""Version information for waldiez.

This file is automatically generated by Hatchling.
Do not edit this file directly.
"""
__version__ = VERSION = "{version}"
'''

[tool.hatch.metadata.hooks.nodejs]
contributors-as-maintainers = false
fields = ["description", "authors", "urls"]

[tool.hatch.envs.default]
python = "3.13"
installer = "uv"
post-install-commands = [
  "pip install .[dev,test,docs,ag2_extras,redis,websockets,mqtt]"
]

[tool.hatch.envs.default.scripts]
pre-dev = [
  "python -m pip install -qq --upgrade pip",
  "pip install -qq -r requirements/dev.txt"
]
pre-test = [
  "python -m pip install -qq --upgrade pip",
  "pip install -qq -r requirements/test.txt"
]
test = [
  "hatch run pre-test",
  "pytest -c pyproject.toml --cov=waldiez --cov-branch --cov-report=term-missing:skip-covered --cov-report=lcov:coverage/py/lcov.info --cov-report=html:coverage/py/html --cov-report=xml:coverage/py/coverage.xml --junitxml=coverage/py/xunit.xml tests",
]
test-models = [
  "hatch run pre-test",
  "pytest -c pyproject.toml --cov=waldiez/models --cov-branch --cov-report=term-missing:skip-covered -vv tests/models"
]
test-exporting = [
  "hatch run pre-test",
  "pytest -c pyproject.toml --cov=waldiez/exporting --cov-branch --cov-report=term-missing:skip-covered -vv tests/exporting"
]
test-io = [
  "hatch run pre-test",
  "pytest -c pyproject.toml --cov=waldiez/io --cov-branch --cov-report=term-missing:skip-covered -vv tests/io"
]
test-running = [
  "hatch run pre-test",
  "pytest -c pyproject.toml --cov=waldiez/running --cov-branch --cov-report=term-missing:skip-covered -vv tests/running"
]
test-ws = [
  "hatch run pre-test",
  "pytest -c pyproject.toml --cov=waldiez/ws --cov-branch --cov-report=term-missing:skip-covered -vv tests/ws"
]
test-storage = [
  "hatch run pre-test",
  "pytest -c pyproject.toml --cov=waldiez/storage --cov-branch --cov-report=term-missing:skip-covered -vv tests/storage"
]

format-black = "black --config pyproject.toml waldiez tests scripts"
format-autoflake = "autoflake --in-place --remove-all-unused-imports --remove-unused-variables --recursive waldiez tests scripts"
format-ruff = "ruff format --config pyproject.toml waldiez tests scripts"
format = [
  "hatch run format-black",
  "hatch run format-autoflake",
  "hatch run format-ruff"
]

lint-black = "black --config pyproject.toml --check --diff waldiez tests scripts"
lint-mypy = "mypy --config pyproject.toml waldiez tests scripts"
lint-pyright = "python scripts/lint.py --pyright"
lint-flake8 = "flake8 --config .flake8 waldiez tests scripts"
lint-bandit = "bandit -r -c pyproject.toml waldiez scripts"
lint-yamllint = "yamllint ."
lint-ruff = "ruff check --config pyproject.toml waldiez tests scripts"
lint-pylint = "pylint --rcfile=pyproject.toml waldiez tests scripts"
lint = [
  "hatch run pre-dev",
  "hatch run lint-black",
  "hatch run lint-mypy",
  "hatch run lint-pyright",
  "hatch run lint-flake8",
  "hatch run lint-bandit",
  "hatch run lint-yamllint",
  "hatch run lint-ruff",
  "hatch run lint-pylint",
]

forlint = [
  "hatch run format",
  "hatch run lint"
]

clean = "python scripts/clean.py"
smoke = "python scripts/smoke.py"
smoke-local = "python scripts/smoke.py --local"
smoke-remote = "python scripts/smoke.py --remote"

docs = "python -m mkdocs build -d site"
docs-live = "python -m mkdocs serve --watch mkdocs.yml --watch docs --watch waldiez --dev-addr localhost:8400"
build = [
  "python -m pip install hatchling hatch-nodejs-version twine wheel",
  "python -m hatchling build -t wheel -t sdist -d out/dist",
  "python -m twine check out/dist/*.whl out/dist/*.tar.gz"
]
image = "python scripts/image.py"
dev = "python scripts/dev.py"

check = [
  "hatch run clean",
  "hatch run format",
  "hatch run lint",
  "hatch run test",
  "hatch run smoke"
]

matrix-test = "hatch run dev:test"
matrix-lint = "hatch run dev:lint"
# alias
test-matrix = "hatch run dev:test"
lint-matrix = "hatch run dev:lint"

tox-test = "tox -e py310,py311,py312,py313"
tox-lint = "tox -e lint-py310,lint-py311,lint-py312,lint-py313"
tox-all = "tox"
tox-p = "tox -p"

release = [
  "hatch run check",
  "hatch run matrix-lint",
  "hatch run matrix-test",
  "hatch run docs",
  "hatch run build"
]

all = [
  "hatch run release",
  "hatch run image"
]

[tool.hatch.envs.dev]
inherit = true

[[tool.hatch.envs.dev.matrix]]
python = ["3.10", "3.11", "3.12", "3.13"]

[tool.uv]
managed = true
# handle conflicts with
# published extras not yet bumped
override-dependencies = [
  "psutil==7.1.1",
  "click==8.3.0",
  "jupyterlab==4.4.10",
]

# pip-tools
[tool.pip-tools]
generate-hashes = false
header = false
annotate = false
strip-extras = false
newline = "LF"

# black
[tool.black]
exclude = '''
/(
    \.git
  | \.hg
  | \.cache
  | \.mypy_cache
  | \.pytest_cache
  | \.ruff_cache
  | \.tox
  | \.hatch
  | \.venv
  | .local
  | _build
  | __init__.py
  | .local
  | examples
  | node_modules
  | waldiez_out
  | workspace
)/
'''
include = '''
    \.pyi?$
'''
line-length = 80
skip-string-normalization = true

# mypy
[tool.mypy]
files = "waldiez,tests,scripts"
show_error_codes = true
# xcode/dmypy: follow-imports=silent not supported
# follow_imports = "skip"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_subclassing_any = false
disallow_untyped_calls = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
exclude = [
  ".venv",
  ".local",
  ".tox",
  ".hatch",
  "node_modules",
  "examples",
  "waldiez_out",
  "workspace",
]
ignore_missing_imports = false
no_implicit_reexport = true
platform = "linux"
plugins = [
  "pydantic.mypy",
]
strict_optional = true
warn_redundant_casts = true
warn_unused_configs = true
warn_unused_ignores = true

[[tool.mypy.overrides]]
module = "waldiez.tests.*"
# with python < 3.13 we get seem to get "call-arg" errors :(
# and with python>=3.13 "unused-ignore" : (
disable_error_code = ["call-arg"]

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true

[tool.basedpyright]
include = ["waldiez", "tests", "scripts"]
exclude = [
    "**/node_modules",
    "**/__pycache__",
    "src",
    ".tox",
    ".hatch",
    ".venv",
    ".local",
    "examples",
    "docs",
    "waldiez_out",
    "workspace",
]
extraPaths = ["."]
reportCallIssue = false
reportUnusedCallResult = false
reportExplicitAny = false
reportUnannotatedClassAttribute = false
reportAny = false
reportImplicitOverride = false

executionEnvironments = [
    {root = "tests",  reportPrivateUsage=false, reportUninitializedInstanceVariable=false, reportArgumentType=false, reportUnusedParameter=false, reportAssignmentType=false }
]
# pylint
[tool.pylint.master]
extension-pkg-whitelist = []
load-plugins = [
  "pylint.extensions.mccabe",
  "pylint.extensions.redefined_variable_type",
  "pylint.extensions.broad_try_clause",
  "pylint.extensions.no_self_use",
  "pylint.extensions.docparams",
]
# reports=true
fail-under = 8.0
# jobs = 0
ignore = ["CVS"]
ignore-paths = [
  ".venv",
  ".tox",
  ".hatch",
  ".local",
  "src",
  "node_modules",
  "examples",
  "waldiez_out",
  "workspace",
]
recursive = false

unsafe-load-any-extension = "no"

[tool.pylint.messages_control]
enable = ["c-extension-no-member"]
[tool.pylint.format]
max-line-length = 80
[tool.pylint.similarities]
ignore-imports = "yes"
ignore-signatures = "yes"
min-similarity-lines = 10
[tool.pylint.broad_try_clause]
max-try-statements = 3
[tool.pylint.design]
max-args = 11
max-attributes = 11
max-positional-arguments = 11
max-statements = 50
[tool.pylint.string]
check-quote-consistency = true
check-str-concat-over-line-jumps = true
[tool.pylint.parameter_documentation]
accept-no-param-doc = false
accept-no-raise-doc = false
accept-no-return-doc = false
accept-no-yields-doc = false
# Possible choices: ["sphinx", "epytext", "google", "numpy", "default"]
default-docstring-type = "numpy"

# bandit
[tool.bandit]
exclude_dirs = [
  ".venv",
  ".tox",
  ".hatch",
  ".local",
  "node_modules",
  "examples",
  "waldiez_out",
  "workspace",
]
# B104: bind to all interfaces (0.0.0.0)
# B110: allow pass on try/except
# B404: allow import subprocess
# B602, B603: allow shell=True (subprocess, popen)
skips = ["B104", "B110", "B404", "B602", "B603"]
[tool.bandit.assert_used]
skips = ["*_test.py", "*/test_*.py", "./tests/**/*.py"]

# ruff
[tool.ruff]
extend-exclude = [
  ".venv",
  ".local",
  ".tox",
  ".hatch",
  "node_modules",
  "examples",
  "workspace",
  "waldiez_out",
  "docs",
]
line-length = 80

[tool.ruff.lint]
select = ["F", "Q", "D", "I", "G", "C4", "C90", "E", "W", "B"]
# # Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# # Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# exclude = ["*.pyi", "*.j2"]
# Like Black, use double quotes for strings.
quote-style = "double"
# Like Black, indent with spaces, rather than tabs.
indent-style = "space"
# Like Black, respect magic trailing commas.
docstring-code-format = true
line-ending = "lf"
skip-magic-trailing-comma = false

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.isort]
force-wrap-aliases = true
combine-as-imports = true
split-on-trailing-comma = true

# pytest
[tool.pytest.ini_options]
addopts = "-d -s -n auto --exitfirst --durations=10  --color=yes --timeout=120"
asyncio_default_fixture_loop_scope = "session"
asyncio_mode = "auto"
filterwarnings = [
  # DeprecationWarning:
  #   Type google._upb._message.MessageMapContainer uses PyType_Spec with a metaclass that has custom tp_new.
  #   This is deprecated and will no longer be allowed in Python 3.14.
  "ignore::DeprecationWarning",
]
python_files = [
  "tests.py",
  "test_*.py",
  "*_tests.py",
]
pythonpath = ["."]
#
env = [
  "WALDIEZ_TESTING=1",
  "PYTHONUNBUFFERED=1"
]
#
# coverage
[tool.coverage.run]
omit = [
  "example.py",
  "_version.py",
  "**/cli_extras/*.py",
]
[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "if TYPE_CHECKING:",
  "if __name__ == .__main__.:",
]
fail_under = 80
precision = 2
