var __index = {"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Home","text":"Make AI Agents Collaborate:  Drag, Drop, and Orchestrate with Waldiez Get Started"},{"location":"CODE_OF_CONDUCT.html","title":"CODE OF CONDUCT","text":""},{"location":"CODE_OF_CONDUCT.html#contributor-covenant-code-of-conduct","title":"Contributor Covenant Code of Conduct","text":""},{"location":"CODE_OF_CONDUCT.html#our-pledge","title":"Our Pledge","text":"<p>We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.</p> <p>We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.</p>"},{"location":"CODE_OF_CONDUCT.html#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to a positive environment for our community include:</p> <ul> <li>Demonstrating empathy and kindness toward other people</li> <li>Being respectful of differing opinions, viewpoints, and experiences</li> <li>Giving and gracefully accepting constructive feedback</li> <li>Accepting responsibility and apologizing to those affected by our mistakes,   and learning from the experience</li> <li>Focusing on what is best not just for us as individuals, but for the   overall community</li> </ul> <p>Examples of unacceptable behavior include:</p> <ul> <li>The use of sexualized language or imagery, and sexual attention or   advances of any kind</li> <li>Trolling, insulting or derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or email   address, without their explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a   professional setting</li> </ul>"},{"location":"CODE_OF_CONDUCT.html#enforcement-responsibilities","title":"Enforcement Responsibilities","text":"<p>Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.</p> <p>Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.</p>"},{"location":"CODE_OF_CONDUCT.html#scope","title":"Scope","text":"<p>This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.</p>"},{"location":"CODE_OF_CONDUCT.html#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at <code>development @ waldiez.io</code>. All complaints will be reviewed and investigated promptly and fairly.</p> <p>All community leaders are obligated to respect the privacy and security of the reporter of any incident.</p>"},{"location":"CODE_OF_CONDUCT.html#enforcement-guidelines","title":"Enforcement Guidelines","text":"<p>Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:</p>"},{"location":"CODE_OF_CONDUCT.html#1-correction","title":"1. Correction","text":"<p>Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.</p> <p>Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.</p>"},{"location":"CODE_OF_CONDUCT.html#2-warning","title":"2. Warning","text":"<p>Community Impact: A violation through a single incident or series of actions.</p> <p>Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.</p>"},{"location":"CODE_OF_CONDUCT.html#3-temporary-ban","title":"3. Temporary Ban","text":"<p>Community Impact: A serious violation of community standards, including sustained inappropriate behavior.</p> <p>Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.</p>"},{"location":"CODE_OF_CONDUCT.html#4-permanent-ban","title":"4. Permanent Ban","text":"<p>Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior,  harassment of an individual, or aggression toward or disparagement of classes of individuals.</p> <p>Consequence: A permanent ban from any sort of public interaction within the community.</p>"},{"location":"CODE_OF_CONDUCT.html#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 2.0, available at https://www.contributor-covenant.org/version/2/0/code_of_conduct.html.</p> <p>Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder.</p> <p>For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.</p>"},{"location":"NOTICE.html","title":"NOTICE","text":""},{"location":"NOTICE.html#notice","title":"NOTICE","text":"<p>Copyright 2024 - 2025 Waldiez and contributors.</p> <p>This Work includes Software developed by Waldiez (https://waldiez.io/).</p>"},{"location":"NOTICE.html#trademarks","title":"Trademarks","text":"<p>You may use our Mark, but not the Project's logos, to truthfully describe the relationship between your software and ours. Our Mark should be used after a verb or preposition that describes the relationship between your software and ours. So you may say, for example, \"Bob's software for the Waldiez platform\" but may not say \"Bob's Waldiez software.\" Some other examples that may work for you are:</p> <ul> <li>[Your software] uses software developed by Waldiez  </li> <li>[Your software] is powered by Waldiez software  </li> <li>[Your software] runs using software developed by Waldiez  </li> <li>[Your software] for use with software developed by Waldiez</li> </ul>"},{"location":"blog/index.html","title":"Index","text":""},{"location":"blog/index.html#blog","title":"Blog","text":""},{"location":"blog/2024/11/02/multi-agent-conversation-and-stand-up-comedy.html","title":"Multi Agent Conversation and Stand up Comedy","text":"<p>This guide walks you through creating a conversational flow in JupyterLab using the Waldiez extension, where two agents, \"Joe\" and \"Cathy,\" simulate a standup comedy exchange. We will configure an OpenAI model (GPT-3.5-turbo) for this flow and observe the interaction between the agents.</p>"},{"location":"blog/2024/11/02/multi-agent-conversation-and-stand-up-comedy.html#using-user-input-to-start-the-conversation","title":"Using user input to start the conversation","text":"<p>In this example, we will set up a flow where the user initiates the conversation by providing an initial message. The agents, Joe and Cathy, will then respond to each other based on the user input and the previous agent's message.</p>"},{"location":"blog/2024/11/02/multi-agent-conversation-and-stand-up-comedy.html#open-jupyterlab-and-launch-waldiez","title":"Open JupyterLab and Launch Waldiez","text":"<ol> <li>Start JupyterLab.</li> <li>In the launcher, under the Waldiez section, select the Waldiez icon to create a new <code>.waldiez</code> file. This opens a new interface for setting up agents and configuring the flow.</li> </ol>"},{"location":"blog/2024/11/02/multi-agent-conversation-and-stand-up-comedy.html#add-a-model","title":"Add a Model","text":"<ol> <li>In the Waldiez interface, click on <code>Add model</code> to add a new model configuration.</li> <li>Fill out the configuration fields:<ul> <li>Name: <code>gpt-3.5-turbo</code></li> <li>Model Type: Select <code>OpenAI</code>.</li> <li>API Key: Enter your OpenAI API key (make sure you have GPT-3.5-turbo access).</li> </ul> </li> <li>Optionally adjust Advanced Settings like Temperature and Max Tokens as per your needs.</li> <li>Click Save to add the model to your flow.</li> </ol>"},{"location":"blog/2024/11/02/multi-agent-conversation-and-stand-up-comedy.html#create-agents","title":"Create Agents","text":""},{"location":"blog/2024/11/02/multi-agent-conversation-and-stand-up-comedy.html#agent-1-cathy","title":"Agent 1: Cathy","text":"<ol> <li>Under the <code>Agents</code> section, drag a new agent onto the canvas.</li> <li>Name the agent Cathy.</li> <li>Set the description to \"Cathy is a standup comedian.\"</li> <li>In the System Message field, enter: <code>Your name is Cathy and you are a standup comedian.</code></li> <li>Link the <code>gpt-3.5-turbo</code> model to Cathy by selecting it in the Models tab.</li> <li>Save the configuration.</li> </ol>"},{"location":"blog/2024/11/02/multi-agent-conversation-and-stand-up-comedy.html#agent-2-joe","title":"Agent 2: Joe","text":"<ol> <li>Add another agent to the canvas and name it Joe.</li> <li>Set the description to \"Joe is a standup comedian.\"</li> <li>In the System Message field, enter: <code>Your name is Joe and you are a standup comedian. Start the next joke from the previous punchline.</code></li> <li>Link the <code>gpt-3.5-turbo</code> model to Joe.</li> <li>Save the configuration.</li> </ol>"},{"location":"blog/2024/11/02/multi-agent-conversation-and-stand-up-comedy.html#link-agents","title":"Link Agents","text":"<ol> <li>In the Waldiez canvas, create a chat link between Joe and Cathy.</li> <li>Click on the link and configure the following settings:<ul> <li>Chat Type: Leave this as is: \"Chat.\"</li> <li>Name: <code>Joe =&gt; Cathy</code>.</li> <li>Max Turns: Specify the number of turns for their exchange (e.g., 3).</li> </ul> </li> <li>Click Save to apply the settings.</li> </ol>"},{"location":"blog/2024/11/02/multi-agent-conversation-and-stand-up-comedy.html#update-the-flows-settings","title":"Update the Flow's settings","text":"<ol> <li>Open the Edit Flow settings.</li> <li>Name the flow, e.g., Standup comedians 1, and add a description like \"Standup comedians with user input.\"</li> <li>Add the chat link <code>Joe =&gt; Cathy</code> to the flow sequence to specify the conversation order.</li> <li>Save the flow configuration.</li> </ol>"},{"location":"blog/2024/11/02/multi-agent-conversation-and-stand-up-comedy.html#initiate-the-chat","title":"Initiate the Chat","text":"<ol> <li>Click on the Run button to start the flow.</li> <li> <p>Start the flow by providing an initial message in the User Input window, such as:</p> <p><code>Hi Cathy, I'm Joe. Let's keep the jokes rolling!</code></p> </li> <li> <p>Click Submit to begin the conversation.</p> </li> </ol>"},{"location":"blog/2024/11/02/multi-agent-conversation-and-stand-up-comedy.html#observe-the-conversation-in-logs","title":"Observe the Conversation in Logs","text":"<ul> <li>The Logs window will display the real-time exchange between Joe and Cathy, where each agent responds based on the previous joke or statement, simulating a standup comedy routine.</li> </ul>"},{"location":"blog/2024/11/02/multi-agent-conversation-and-stand-up-comedy.html#review-and-export-results","title":"Review and Export Results","text":"<ul> <li>After the conversation, various CSV logs (e.g., <code>agents.csv</code>, <code>chat_completions.csv</code>) are saved in the file explorer. You can analyze these logs to evaluate the flow and refine the agent interactions.</li> </ul>"},{"location":"blog/2024/11/02/multi-agent-conversation-and-stand-up-comedy.html#skipping-user-input","title":"Skipping user input","text":"<p>To skip user input and directly start the conversation, you can modify the chat link settings to start with a specific message. Set the message type as \"Text\" and set the desired starting message to the content field.  This way, the agents will begin the conversation without waiting for user input.</p> <p> </p>"},{"location":"blog/2024/11/02/multi-agent-conversation-and-stand-up-comedy.html#using-a-termination-condition","title":"Using a termination condition","text":"<p>You can also disable the \"max turns\" setting in the chat link and use a termination condition to end the conversation based on specific criteria. Specify the termination settings in each agent's configuration to control the flow's duration and completion.</p> <p> </p> <p>Also, make sure you update the agents' system messages to reflect the termination condition.</p> <p> </p> <p>Files used in this example:</p> <ul> <li>Using User input: Standup Comedians 1.waldiez</li> <li>Without user input: Standup Comedians 2.waldiez</li> <li>Without user input and max turns (termination): Standup Comedians 3.waldiez</li> </ul>"},{"location":"blog/2024/11/02/sequential-chats-and-customer-onboarding.html","title":"Sequential Chats and Customer Onboarding","text":"<p>This guide explains how to configure and execute a customer onboarding flow using various agents. Each agent has a specific role, working together to gather user information, understand preferences, and provide engaging content.</p>"},{"location":"blog/2024/11/02/sequential-chats-and-customer-onboarding.html#agent-roles","title":"Agent Roles","text":"<ol> <li>personal_information_agent: Collects the user's name and location.</li> <li>topic_preference_agent: Asks the user about their topics of interest.</li> <li>customer_engagement_agent: Uses the collected information and preferences to share engaging content.</li> <li>customer_proxy: Acts as an intermediary to pass information between agents.</li> </ol>"},{"location":"blog/2024/11/02/sequential-chats-and-customer-onboarding.html#models-used","title":"Models used","text":"<p>Feel free to use any models that suit your requirements. Here are the models used in this example:</p> <ul> <li>personal_information_agent: <code>claude-3.5-sonnet-20240620</code></li> <li>topic_preference_agent: <code>claude-3.5-sonnet-20240620</code></li> <li>customer_engagement_agent: <code>gpt-3.5-turbo</code></li> </ul>"},{"location":"blog/2024/11/02/sequential-chats-and-customer-onboarding.html#agents-setup","title":"Agents Setup","text":""},{"location":"blog/2024/11/02/sequential-chats-and-customer-onboarding.html#1-configure-personal_information_agent","title":"1. Configure <code>personal_information_agent</code>","text":"<ul> <li>Purpose: Gather basic information (name, location).</li> <li>Settings:<ul> <li>Model: <code>claude-3.5-sonnet-20240620</code></li> <li>System Message: \"You are a helpful customer on-boarding agent, you are here to help new customers get started with our product. Your job is to gather customer's name and location. Do not ask for other information. Return 'TERMINATE' when you have gathered all the information.\"</li> <li>Termination Keyword: <code>TERMINATE</code></li> </ul> </li> </ul>"},{"location":"blog/2024/11/02/sequential-chats-and-customer-onboarding.html#2-configure-topic_preference_agent","title":"2. Configure <code>topic_preference_agent</code>","text":"<ul> <li>Purpose: Gather the customer\u2019s topics of interest.</li> <li>Settings:<ul> <li>Model: <code>claude-3.5-sonnet-20240620</code></li> <li>System Message: \"You are a helpful customer topic preference agent, you are here to help new customers get started with our product. Your job is to gather customer's topic of interest. Do not ask for other information. Return 'TERMINATE' when you have gathered all the information.\"</li> <li>Termination Keyword: <code>TERMINATE</code></li> </ul> </li> </ul>"},{"location":"blog/2024/11/02/sequential-chats-and-customer-onboarding.html#3-configure-customer_engagement_agent","title":"3. Configure <code>customer_engagement_agent</code>","text":"<ul> <li>Purpose: Provide engaging content based on user preferences and location.</li> <li>Settings:<ul> <li>Model: <code>gpt-3.5-turbo</code></li> <li>System Message: \"You are a helpful customer service agent here to provide fun for the customer based on the user's personal information and topic preferences. This could include fun facts, jokes, or interesting stories. Make sure to make it engaging and fun! Return 'TERMINATE' when you are done.\"</li> <li>Termination Keyword: <code>TERMINATE</code></li> </ul> </li> </ul>"},{"location":"blog/2024/11/02/sequential-chats-and-customer-onboarding.html#4-configure-customer_proxy","title":"4. Configure <code>customer_proxy</code>","text":"<ul> <li>Purpose: Intermediate agent to handle information passing between other agents.</li> <li>Settings:<ul> <li>Human Input Mode: <code>Always</code></li> </ul> </li> </ul>"},{"location":"blog/2024/11/02/sequential-chats-and-customer-onboarding.html#agent-connections","title":"Agent Connections","text":"<ol> <li> <p>personal_information_agent =&gt; customer_proxy</p> <ul> <li>Message Configuration:<ul> <li>Message Type: Text</li> <li>Message Content: \"Hello, I'm here to help you get started with our product. Could you tell me your name and location?\" --&gt;</li> </ul> </li> <li>Summary Method: Reflection with LLM</li> <li> <p>Summary Prompt: \"Return the customer information as JSON object only: <code>{\"name\": \"\", \"location\": \"\"}</code>.\"</p> <p> </p> </li> </ul> </li> <li> <p>topic_preference_agent =&gt; customer_proxy</p> <ul> <li>Message Configuration:<ul> <li>Message Type: Text</li> <li>Message Content: \"Great! Could you tell me what topics you are interested in reading about?\"</li> </ul> </li> <li>Summary Method: Reflection with LLM</li> <li> <p>Summary Prompt: \"Return the topic of interest as JSON: <code>{\"topic_of_interest\": \"\"}</code>.\"</p> <p> </p> </li> </ul> </li> <li> <p>customer_proxy =&gt; customer_engagement_agent</p> <ul> <li>Message Configuration:     - Message Type: Text     - Message Content: \"Let's find something fun to read.\"</li> </ul> </li> </ol>"},{"location":"blog/2024/11/02/sequential-chats-and-customer-onboarding.html#define-the-flow-order","title":"Define the Flow Order","text":"<p>Before running the flow, make sure the execution order is configured:</p> <ol> <li>Open the Edit Flow modal.</li> <li>Set the Order as follows:<ul> <li><code>personal_inform =&gt; customer_proxy</code></li> <li><code>topic_preference =&gt; customer_proxy</code></li> <li><code>customer_proxy =&gt; customer_engage</code></li> </ul> </li> <li>Save the flow.</li> </ol> <p> </p>"},{"location":"blog/2024/11/02/sequential-chats-and-customer-onboarding.html#running-the-flow","title":"Running the Flow","text":"<ol> <li> <p>Initialize the Conversation:</p> <ul> <li>The <code>personal_information_agent</code> asks for the user's name and location.</li> <li>Example Response: \"Hi, I'm Stella from Athens.\"</li> </ul> </li> <li> <p>Capture User Preferences:</p> <ul> <li>The <code>topic_preference_agent</code> asks for topics of interest.</li> <li>Example Response: \"Software Agents.\"</li> </ul> </li> <li> <p>Engage the Customer:</p> <ul> <li>The <code>customer_engagement_agent</code> uses the data to provide a fun fact or engaging information.</li> <li>Example Response to User: \"Hey Stella from Athens! Did you know that the word 'robot' comes from the Czech word 'robota', which means forced labor? It's interesting when thinking about software agents!\"</li> </ul> </li> </ol> <p>Files used in this example:</p> <ul> <li>On-boarding Flow: On-boarding.waldiez</li> </ul>"},{"location":"contribute/index.html","title":"Contribute","text":""},{"location":"contribute/index.html#contributing-to-waldiez-projects","title":"Contributing to Waldiez Projects","text":"<p>Thank you for your interest in contributing to the Waldiez repositories! Below, you\u2019ll find the guidelines for contributing code, documentation, and ideas to our various projects. We welcome contributions of all types, including new features, bug fixes, and documentation improvements.</p>"},{"location":"contribute/index.html#1-getting-started","title":"1. Getting Started","text":"<ul> <li>Fork the Repository: Fork the repository you want to contribute to by clicking the \"Fork\" button on GitHub.</li> <li> <p>Clone Your Fork: Clone the forked repository to your local machine.     </p> <p><code>git clone https://github.com/YOU/REPOSITORY-NAME.git</code></p> </li> </ul> <ul> <li> <p>Set Upstream: Add the original repository as a remote upstream.</p> <p><code>git remote add upstream https://github.com/waldiez/REPOSITORY-NAME.git</code></p> </li> </ul> <ul> <li>Check for Requirements: Some projects may have specific dependencies or setup instructions listed in a <code>README</code> or <code>CONTRIBUTING.md</code> file within the repository.</li> </ul>"},{"location":"contribute/index.html#2-contribution-guidelines","title":"2. Contribution Guidelines","text":"<p>Before making any changes, please read through our organization-wide contribution guidelines:</p> <ul> <li>Open an Issue First: For larger changes, open an issue to discuss your proposed changes with the maintainers. This helps avoid duplicate work and ensures alignment with project goals.</li> <li>Follow the Code of Conduct: Review and adhere to our Code of Conduct.</li> <li>Respect Repository Owners: Each repository may have its own set of maintainers or reviewers. Follow their guidelines for submitting work and await feedback before merging.</li> </ul>"},{"location":"contribute/index.html#3-submitting-issues","title":"3. Submitting Issues","text":"<p>If you notice a bug or have a feature request:</p> <ul> <li>Check Existing Issues: Before creating a new issue, search the issues in the repository to avoid duplicates.</li> <li>Open a New Issue: Use a descriptive title and include any necessary details (e.g., steps to reproduce for bugs).</li> <li>Add Labels: If possible, label your issue as a <code>bug</code>, <code>enhancement</code>, <code>documentation</code>, or <code>question</code>.</li> <li>Follow the Issue Template (if available): Some repositories may have specific templates for bug reports, feature requests, etc.</li> </ul>"},{"location":"contribute/index.html#4-working-on-issues","title":"4. Working on Issues","text":"<p>If you want to work on an existing issue:</p> <ul> <li>Check for an Assignee: If no one is assigned, comment on the issue and ask to be assigned.</li> <li>Claim the Issue: Wait for a maintainer to assign the issue to you to avoid duplicate work.</li> <li>Create a New Branch: Use a descriptive name for your branch.<p>git checkout -b feature/your-feature-name</p> </li> </ul>"},{"location":"contribute/index.html#5-submitting-pull-requests","title":"5. Submitting Pull Requests","text":"<p>When you\u2019re ready to submit your changes:</p> <ul> <li>Sync with Upstream: Pull the latest changes from the upstream repository and resolve any conflicts.<p>git fetch upstream   git merge upstream/main</p> </li> </ul> <ul> <li>Create a Pull Request: Push your branch to your fork and open a pull request (PR) to the original repository.</li> </ul> <ul> <li>Write a Descriptive Title and Message: Briefly describe your changes and the issue it addresses.</li> </ul> <ul> <li>Link the Related Issue: Use keywords like <code>Closes #ISSUE_NUMBER</code> to link to the relevant issue.</li> </ul> <ul> <li>Await Review: A maintainer will review your PR. Be ready to make changes based on feedback.</li> </ul>"},{"location":"contribute/index.html#6-code-style-best-practices","title":"6. Code Style &amp; Best Practices","text":"<p>To maintain code consistency:</p> <ul> <li>Follow Project Coding Standards: Refer to any coding guidelines or <code>.editorconfig</code> /<code>eslint</code> / <code>flake8</code> / <code>pyproject.toml</code> files in the repository.</li> <li>Write Tests: Ensure new features or fixes are covered by tests, where applicable.</li> <li>Add Documentation: If your changes require updates to the documentation, make those in the appropriate files.</li> </ul>"},{"location":"contribute/index.html#7-project-specific-instructions","title":"7. Project-Specific Instructions","text":"<p>Some repositories may have additional instructions:</p> <ul> <li>waldiez/waldiez: The core python and react parts of the project. Responsible for generating waldiez flows, converting them to python scripts and jupyter notebooks, as well as running them.</li> <li>waldiez/jupyter: It combines the python and react parts above. It is responsible for running the python scripts and jupyter notebooks created by the user.</li> <li>waldiez/studio: A standalone (without jupyter) web app that also combines the python and react parts above. Once ready, it will be included as an extra requirement in the waldiez pypi package.</li> <li>waldiez/vscode: A waldiez vscode extension: Open .waldiez files in vscode convert them to python scripts and jupyter notebooks, and run them.</li> <li>waldiez/runner: Responsible for queuing and running waldiez flows in isolated environments and stream logs/input/output via Redis.</li> </ul> <p>Refer to the <code>README.md</code> or <code>CONTRIBUTING.md</code> of each repository for detailed information.</p>"},{"location":"contribute/index.html#8-resources","title":"8. Resources","text":"<ul> <li>Git and GitHub Guide</li> <li>GitHub Flow</li> </ul> <p>We appreciate your contributions! \ud83c\udf89</p>"},{"location":"examples/index.html","title":"Examples","text":""},{"location":"examples/index.html#table-of-contents","title":"Table of Contents","text":"<ul> <li>Multi-Agent Conversation and Stand up Comedy</li> <li>Sequential Chats and Customer Onboarding</li> <li>Reflection and Blog post Writing</li> <li>Tool Use and Conversational Chess</li> <li>Coding and Financial Analysis</li> <li>Planning and Stock Report Generation</li> <li>Group Chat with Retrieval Augmented Generation</li> <li>ReAct using Tavily</li> </ul> <p>Note</p> <p>The provided examples are inspired by the following sources:</p> <ul> <li>AI Agentic Design Patterns with AutoGen</li> <li>AG2 Examples</li> </ul>"},{"location":"examples/1.html","title":"Standup Comedians","text":""},{"location":"examples/1.html#multi-agent-conversation-and-stand-up-comedy","title":"Multi-Agent Conversation and Stand up Comedy","text":"<p>This guide walks you through creating a conversational flow in JupyterLab using the Waldiez extension, where two agents, \"Joe\" and \"Cathy,\" simulate a standup comedy exchange. We will configure an OpenAI model (GPT-3.5-turbo) for this flow and observe the interaction between the agents.</p>"},{"location":"examples/1.html#using-user-input-to-start-the-conversation","title":"Using user input to start the conversation","text":"<p>In this example, we will set up a flow where the user initiates the conversation by providing an initial message. The agents, Joe and Cathy, will then respond to each other based on the user input and the previous agent's message.</p>"},{"location":"examples/1.html#open-jupyterlab-and-launch-waldiez","title":"Open JupyterLab and Launch Waldiez","text":"<ol> <li>Start JupyterLab.</li> <li>In the launcher, under the Waldiez section, select the Waldiez icon to create a new <code>.waldiez</code> file. This opens a new interface for setting up agents and configuring the flow.</li> </ol>"},{"location":"examples/1.html#add-a-model","title":"Add a Model","text":"<ol> <li>In the Waldiez interface, click on <code>Add model</code> to add a new model configuration.</li> <li>Fill out the configuration fields:<ul> <li>Name: <code>gpt-3.5-turbo</code></li> <li>Model Type: Select <code>OpenAI</code>.</li> <li>API Key: Enter your OpenAI API key (make sure you have GPT-3.5-turbo access).</li> </ul> </li> <li>Optionally adjust Advanced Settings like Temperature and Max Tokens as per your needs.</li> <li>Click Save to add the model to your flow.</li> </ol>"},{"location":"examples/1.html#create-agents","title":"Create Agents","text":""},{"location":"examples/1.html#agent-1-cathy","title":"Agent 1: Cathy","text":"<ol> <li>Under the <code>Agents</code> section, drag a new agent onto the canvas.</li> <li>Name the agent Cathy.</li> <li>Set the description to \"Cathy is a standup comedian.\"</li> <li>In the System Message field, enter: <code>Your name is Cathy and you are a standup comedian.</code></li> <li>Link the <code>gpt-3.5-turbo</code> model to Cathy by selecting it in the Models tab.</li> <li>Save the configuration.</li> </ol>"},{"location":"examples/1.html#agent-2-joe","title":"Agent 2: Joe","text":"<ol> <li>Add another agent to the canvas and name it Joe.</li> <li>Set the description to \"Joe is a standup comedian.\"</li> <li>In the System Message field, enter: <code>Your name is Joe and you are a standup comedian. Start the next joke from the previous punchline.</code></li> <li>Link the <code>gpt-3.5-turbo</code> model to Joe.</li> <li>Save the configuration.</li> </ol>"},{"location":"examples/1.html#link-agents","title":"Link Agents","text":"<ol> <li>In the Waldiez canvas, create a chat link between Joe and Cathy.</li> <li>Click on the link and configure the following settings:<ul> <li>Chat Type: Leave this as is: \"Chat.\"</li> <li>Name: <code>Joe =&gt; Cathy</code>.</li> <li>Max Turns: Specify the number of turns for their exchange (e.g., 3).</li> </ul> </li> <li>Click Save to apply the settings.</li> </ol>"},{"location":"examples/1.html#update-the-flows-settings","title":"Update the Flow's settings","text":"<ol> <li>Open the Edit Flow settings.</li> <li>Name the flow, e.g., Standup comedians 1, and add a description like \"Standup comedians with user input.\"</li> <li>Add the chat link <code>Joe =&gt; Cathy</code> to the flow sequence to specify the conversation order.</li> <li>Save the flow configuration.</li> </ol>"},{"location":"examples/1.html#initiate-the-chat","title":"Initiate the Chat","text":"<ol> <li>Click on the Run button to start the flow.</li> <li> <p>Start the flow by providing an initial message in the User Input window, such as:</p> <p><code>Hi Cathy, I'm Joe. Let's keep the jokes rolling!</code></p> </li> <li> <p>Click Submit to begin the conversation.</p> </li> </ol>"},{"location":"examples/1.html#observe-the-conversation-in-logs","title":"Observe the Conversation in Logs","text":"<ul> <li>The Logs window will display the real-time exchange between Joe and Cathy, where each agent responds based on the previous joke or statement, simulating a standup comedy routine.</li> </ul>"},{"location":"examples/1.html#review-and-export-results","title":"Review and Export Results","text":"<ul> <li>After the conversation, various CSV logs (e.g., <code>agents.csv</code>, <code>chat_completions.csv</code>) are saved in the file explorer. You can analyze these logs to evaluate the flow and refine the agent interactions.</li> </ul>"},{"location":"examples/1.html#skipping-user-input","title":"Skipping user input","text":"<p>To skip user input and directly start the conversation, you can modify the chat link settings to start with a specific message. Set the message type as \"Text\" and set the desired starting message to the content field.  This way, the agents will begin the conversation without waiting for user input.</p> <p> </p>"},{"location":"examples/1.html#using-a-termination-condition","title":"Using a termination condition","text":"<p>You can also disable the \"max turns\" setting in the chat link and use a termination condition to end the conversation based on specific criteria. Specify the termination settings in each agent's configuration to control the flow's duration and completion.</p> <p> </p> <p>Also, make sure you update the agents' system messages to reflect the termination condition.</p> <p> </p> <p>Files used in this example:</p> <ul> <li>Using User input: Standup Comedians 1.waldiez</li> <li>Without user input: Standup Comedians 2.waldiez</li> <li>Without user input and max turns (termination): Standup Comedians 3.waldiez</li> </ul>"},{"location":"examples/2.html","title":"Onboarding","text":""},{"location":"examples/2.html#sequential-chats-and-customer-onboarding","title":"Sequential Chats and Customer Onboarding","text":"<p>This guide explains how to configure and execute a customer onboarding flow using various agents. Each agent has a specific role, working together to gather user information, understand preferences, and provide engaging content.</p>"},{"location":"examples/2.html#agent-roles","title":"Agent Roles","text":"<ol> <li>personal_information_agent: Collects the user's name and location.</li> <li>topic_preference_agent: Asks the user about their topics of interest.</li> <li>customer_engagement_agent: Uses the collected information and preferences to share engaging content.</li> <li>customer_proxy: Acts as an intermediary to pass information between agents.</li> </ol>"},{"location":"examples/2.html#models-used","title":"Models used","text":"<p>Feel free to use any models that suit your requirements. Here are the models used in this example:</p> <ul> <li>personal_information_agent: <code>claude-3.5-sonnet-20240620</code></li> <li>topic_preference_agent: <code>claude-3.5-sonnet-20240620</code></li> <li>customer_engagement_agent: <code>gpt-3.5-turbo</code></li> </ul>"},{"location":"examples/2.html#agents-setup","title":"Agents Setup","text":""},{"location":"examples/2.html#1-configure-personal_information_agent","title":"1. Configure <code>personal_information_agent</code>","text":"<ul> <li>Purpose: Gather basic information (name, location).</li> <li>Settings:<ul> <li>Model: <code>claude-3.5-sonnet-20240620</code></li> <li>System Message: \"You are a helpful customer on-boarding agent, you are here to help new customers get started with our product. Your job is to gather customer's name and location. Do not ask for other information. Return 'TERMINATE' when you have gathered all the information.\"</li> <li>Termination Keyword: <code>TERMINATE</code></li> </ul> </li> </ul>"},{"location":"examples/2.html#2-configure-topic_preference_agent","title":"2. Configure <code>topic_preference_agent</code>","text":"<ul> <li>Purpose: Gather the customer\u2019s topics of interest.</li> <li>Settings:<ul> <li>Model: <code>claude-3.5-sonnet-20240620</code></li> <li>System Message: \"You are a helpful customer topic preference agent, you are here to help new customers get started with our product. Your job is to gather customer's topic of interest. Do not ask for other information. Return 'TERMINATE' when you have gathered all the information.\"</li> <li>Termination Keyword: <code>TERMINATE</code></li> </ul> </li> </ul>"},{"location":"examples/2.html#3-configure-customer_engagement_agent","title":"3. Configure <code>customer_engagement_agent</code>","text":"<ul> <li>Purpose: Provide engaging content based on user preferences and location.</li> <li>Settings:<ul> <li>Model: <code>gpt-3.5-turbo</code></li> <li>System Message: \"You are a helpful customer service agent here to provide fun for the customer based on the user's personal information and topic preferences. This could include fun facts, jokes, or interesting stories. Make sure to make it engaging and fun! Return 'TERMINATE' when you are done.\"</li> <li>Termination Keyword: <code>TERMINATE</code></li> </ul> </li> </ul>"},{"location":"examples/2.html#4-configure-customer_proxy","title":"4. Configure <code>customer_proxy</code>","text":"<ul> <li>Purpose: Intermediate agent to handle information passing between other agents.</li> <li>Settings:<ul> <li>Human Input Mode: <code>Always</code></li> </ul> </li> </ul>"},{"location":"examples/2.html#agent-connections","title":"Agent Connections","text":"<ol> <li> <p>personal_information_agent =&gt; customer_proxy</p> <ul> <li>Message Configuration:<ul> <li>Message Type: Text</li> <li>Message Content: \"Hello, I'm here to help you get started with our product. Could you tell me your name and location?\" --&gt;</li> </ul> </li> <li>Summary Method: Reflection with LLM</li> <li> <p>Summary Prompt: \"Return the customer information as JSON object only: <code>{\"name\": \"\", \"location\": \"\"}</code>.\"</p> <p> </p> </li> </ul> </li> <li> <p>topic_preference_agent =&gt; customer_proxy</p> <ul> <li>Message Configuration:<ul> <li>Message Type: Text</li> <li>Message Content: \"Great! Could you tell me what topics you are interested in reading about?\"</li> </ul> </li> <li>Summary Method: Reflection with LLM</li> <li> <p>Summary Prompt: \"Return the topic of interest as JSON: <code>{\"topic_of_interest\": \"\"}</code>.\"</p> <p> </p> </li> </ul> </li> <li> <p>customer_proxy =&gt; customer_engagement_agent</p> <ul> <li>Message Configuration:     - Message Type: Text     - Message Content: \"Let's find something fun to read.\"</li> </ul> </li> </ol>"},{"location":"examples/2.html#define-the-flow-order","title":"Define the Flow Order","text":"<p>Before running the flow, make sure the execution order is configured:</p> <ol> <li>Open the Edit Flow modal.</li> <li>Set the Order as follows:<ul> <li><code>personal_inform =&gt; customer_proxy</code></li> <li><code>topic_preference =&gt; customer_proxy</code></li> <li><code>customer_proxy =&gt; customer_engage</code></li> </ul> </li> <li>Save the flow.</li> </ol> <p> </p>"},{"location":"examples/2.html#running-the-flow","title":"Running the Flow","text":"<ol> <li> <p>Initialize the Conversation:</p> <ul> <li>The <code>personal_information_agent</code> asks for the user's name and location.</li> <li>Example Response: \"Hi, I'm Stella from Athens.\"</li> </ul> </li> <li> <p>Capture User Preferences:</p> <ul> <li>The <code>topic_preference_agent</code> asks for topics of interest.</li> <li>Example Response: \"Software Agents.\"</li> </ul> </li> <li> <p>Engage the Customer:</p> <ul> <li>The <code>customer_engagement_agent</code> uses the data to provide a fun fact or engaging information.</li> <li>Example Response to User: \"Hey Stella from Athens! Did you know that the word 'robot' comes from the Czech word 'robota', which means forced labor? It's interesting when thinking about software agents!\"</li> </ul> </li> </ol> <p>Files used in this example:</p> <ul> <li>On-boarding Flow: On-boarding.waldiez</li> </ul>"},{"location":"examples/3.html","title":"Reflection","text":""},{"location":"examples/3.html#reflection-and-blog-post-writing","title":"Reflection and Blog post Writing","text":"<p>In this example, we will setup up a workflow for reviewing and improving blog posts using nested chats. The workflow includes roles for a writer, critic, and various reviewers (SEO, Legal, Ethics, and Meta).</p>"},{"location":"examples/3.html#agent-roles","title":"Agent Roles","text":"<ul> <li>Writer: Writes blog posts based on given topics.</li> <li>Critic: Asks for reviews and provides feedback on the writer's work.</li> <li>SEO Reviewer: Optimizes content for search engines.</li> <li>Legal Reviewer: Ensures content is legally compliant.</li> <li>Ethics Reviewer: Ensures content is ethically sound.</li> <li>Meta Reviewer: Aggregates feedback from other reviewers.</li> </ul>"},{"location":"examples/3.html#models-used","title":"Models Used","text":"<p>Feel free to use any models that suit your requirements. Here are the models used in this example:</p> <ul> <li>SEO Reviewer: <code>gpt-3.5-turbo</code></li> <li>Legal Reviewer: <code>gpt-3.5-turbo</code></li> <li>Ethics Reviewer: <code>gpt-3.5-turbo</code></li> <li>Meta Reviewer: <code>gpt-3.5-turbo</code></li> <li>Writer: <code>gpt-3.5-turbo</code></li> <li>Critic: <code>gpt-3.5-turbo</code></li> </ul>"},{"location":"examples/3.html#setup-the-agents","title":"Setup the Agents","text":""},{"location":"examples/3.html#seo-reviewer","title":"SEO Reviewer","text":"<ol> <li>Add an agent named SEO reviewer.</li> <li> <p>In the System Message, set:</p> <pre><code>You are an SEO reviewer, known for your ability to optimize content for search engines, ensuring that it ranks well and attracts organic traffic. Make sure your suggestion is concise (within 3 bullet points), concrete and to the point. Begin the review by stating your role.\n</code></pre> </li> <li> <p>Link the agent to a model.</p> </li> </ol>"},{"location":"examples/3.html#legal-reviewer","title":"Legal Reviewer","text":"<ol> <li>Add an agent named Legal reviewer.</li> <li> <p>In the System Message, set:</p> <pre><code>You are a legal reviewer, known for your ability to ensure that content is legally compliant and free from any potential legal issues. Make sure your suggestion is concise (within 3 bullet points), concrete and to the point. Begin the review by stating your role.\n</code></pre> </li> <li> <p>Link the agent to a model.</p> </li> </ol>"},{"location":"examples/3.html#ethics-reviewer","title":"Ethics Reviewer","text":"<ol> <li>Add an agent named Ethics reviewer.</li> <li> <p>In the System Message, set:</p> <pre><code>You are an ethics reviewer, known for your ability to ensure that content is ethically sound and free from any potential ethical issues. Make sure your suggestion is concise (within 3 bullet points), concrete and to the point. Begin the review by stating your role.\n</code></pre> </li> <li> <p>Link the agent to a model.</p> </li> </ol>"},{"location":"examples/3.html#meta-reviewer","title":"Meta Reviewer","text":"<ol> <li>Add an agent named Meta reviewer.</li> <li> <p>In the System Message, set:</p> <pre><code>You are a meta reviewer, you aggregate and review the work of other reviewers and give a final suggestion on the content.\n</code></pre> </li> <li> <p>Link the agent to a model.</p> </li> </ol>"},{"location":"examples/3.html#writer-agent","title":"Writer Agent","text":"<ol> <li>Add a new agent named Writer.</li> <li> <p>In the System Message, set:</p> <pre><code>You are a writer. You write engaging and concise blog posts (with title) on given topics. You must polish your writing based on the feedback you receive and give a refined version. Only return your final work without additional comments.\n</code></pre> </li> <li> <p>Link the agent to a model.</p> </li> </ol>"},{"location":"examples/3.html#critic-agent","title":"Critic Agent","text":"<ol> <li>Add a new agent named Critic.</li> <li> <p>In the System Message, set:</p> <pre><code>You are a critic. You review the work of the writer and provide constructive feedback to help improve the quality of the content.\n</code></pre> </li> <li> <p>Link the agent to a model.</p> </li> </ol> <p>Note</p> <p>We will come back to the Critic agent to configure nested chats after setting up the agent connections.</p>"},{"location":"examples/3.html#agent-connections","title":"Agent Connections","text":""},{"location":"examples/3.html#writer-critic","title":"Writer =&gt; Critic","text":"<ol> <li>Connect the Critic agent to the Writer agent.</li> <li>On the message tab, set the type to \"Text\" and the content to:<pre><code>Write a concise but engaging blog post about DeepLearning.AI. Make sure the blog post is within 100 words.\n</code></pre> </li> </ol>"},{"location":"examples/3.html#nested-chats","title":"Nested chats","text":"<p>For the rest of the connections, we will set up nested chats to gather feedback from the SEO, Legal, Ethics, and Meta reviewers. Add a link from the Critic agent to each of the reviewers, and set the chat type to \"Nested Chat\". Set Max turns to 1 and Summary method to \"Last Message\". For the nested chat content, we will use a custom method to send the content to the SEO, Legal, and Ethics reviewers:</p> <pre><code>def nested_chat_message(recipient, messages, sender, config):\n\"\"\"Ask for a review.\"\"\"\nreturn f\"\"\"Review the following content.\n        \\n\\n {recipient.chat_messages_for_summary(sender)[-1]['content']}\"\"\"\n</code></pre> <p> </p> <p>For the Meta reviewer, we use the \"Text\" type:</p> <pre><code>Aggregate feedback from all reviewers and give final suggestions on the writing.\n</code></pre>"},{"location":"examples/3.html#nested-chat-registration","title":"Nested chat registration","text":"<ol> <li>Go to the Critic agent\u2019s settings and navigate to the Nested Chats tab.</li> <li>The nested chat is triggered when the writer replies to the critic's message with the content to be reviewed, so on the \"Triggered by\" select the Writer agent and check the \"Agent's reply\" box.</li> <li>Set up the messages to be sent when the chat is triggered:<ul> <li>Critic =&gt; SEO reviewer</li> <li>Critic =&gt; Legal reviewer</li> <li>Critic =&gt; Ethics reviewer</li> <li>Critic =&gt; Meta reviewer</li> </ul> </li> </ol>"},{"location":"examples/3.html#4-workflow-flow-order","title":"4. Workflow Flow Order","text":"<ol> <li>Open the Edit Flow menu.</li> <li>Name the flow as Reflection or another suitable name.</li> <li>Set the initial flow order to start with Critic =&gt; Writer.</li> </ol>"},{"location":"examples/3.html#5-run-the-flow","title":"5. Run the flow","text":"<p>We are ready to run the flow. Hit the play button to start the flow. The critic will ask the writer to write a blog post about DeepLearning.AI. The writer will then write the blog post and send it to the critic for review. The critic will then send the content to the SEO, Legal, Ethics, and Meta reviewers for feedback. You can check the logs to see the flow of the conversation.</p> <p> </p> <p>Files used in this example:</p> <ul> <li>Flow: Reflection.waldiez</li> </ul>"},{"location":"examples/4.html","title":"Tool Use","text":""},{"location":"examples/4.html#tool-use-and-conversational-chess","title":"Tool Use and Conversational Chess","text":"<p>In this example, we build a conversational chess game using three agents: Player White, Player Black, and Board Proxy. The agents interact to play a game of chess, with each player taking turns to make moves. The Board Proxy manages the board state and facilitates communication between the players.</p> <p> </p> <p>Note</p> <p>Can you find a better way to handle the board state and move tracking between agents, without using globals? Give it a try! We'd love to hear your feedback on this example, either by contributing to the repository, or by reaching out to us.</p>"},{"location":"examples/4.html#overview","title":"Overview","text":"<p>The flow includes:</p> <ul> <li>Player White and Player Black agents for each chess player.</li> <li>Board Proxy to manage board state and relay information between players.</li> </ul>"},{"location":"examples/4.html#agents-and-skills","title":"Agents and Skills","text":""},{"location":"examples/4.html#agents","title":"Agents","text":"<ol> <li>Player White: The agent playing white pieces. Calls methods to get legal moves and make moves.</li> <li>Player Black: The agent playing black pieces. Operates similarly to Player White.</li> <li>Board Proxy: Manages the board\u2019s state and facilitates move tracking between agents.</li> </ol>"},{"location":"examples/4.html#skills","title":"Skills","text":"<p>Each player has access to the following skills:</p> <ul> <li>get_legal_moves: Fetches the list of legal moves in UCI format.</li> <li>make_move: Executes a move and provides feedback on the action taken.</li> </ul> <p> </p>"},{"location":"examples/4.html#get_legal_moves","title":"get_legal_moves","text":"<p>This function generates a list of possible legal moves from the current board state.</p> <ul> <li> <p>Content:</p> <pre><code>from typing import Annotated\n\n import chess\n\n if \"BOARD\" not in globals():\n     BOARD = chess.Board()\n     globals()[\"BOARD\"] = BOARD\n else:\n     BOARD = globals()[\"BOARD\"]\n\n\n def get_legal_moves() -&gt; Annotated[str, \"A list of legal moves in UCI format\"]:\n     \"\"\"Get a list of legal moves.\"\"\"\n     return \"Possible moves are: \" + \",\".join(\n     [str(move) for move in BOARD.legal_moves]\n )\n</code></pre> </li> </ul>"},{"location":"examples/4.html#make_move","title":"make_move","text":"<p>Executes a chosen move and outputs the result.</p> <ul> <li>Content:<pre><code>from typing import Annotated\nimport chess\n# Global variables to store the board and move status.\nif \"BOARD\" not in globals():\n    BOARD = chess.Board()\n    globals()[\"BOARD\"] = BOARD\nelse:\n    BOARD = globals()[\"BOARD\"]\nif \"MADE_MOVE\" not in globals():\n    MADE_MOVE = False\n    globals()[\"MADE_MOVE\"] = MADE_MOVE\nelse:\n    MADE_MOVE = globals()[\"MADE_MOVE\"]\n\ndef make_move(\n    move: Annotated[str, \"A move in UCI format.\"],\n) -&gt; Annotated[str, \"Result of the move.\"]:\n    \"\"\"Make a move on the board.\"\"\"\n    global MADE_MOVE\n    try:\n        move = chess.Move.from_uci(move)\n    except BaseException:  # pylint: disable=broad-except\n        move = BOARD.parse_san(move)\n    BOARD.push_uci(str(move))\n    # Get the piece name.\n    piece = BOARD.piece_at(move.to_square)\n    piece_symbol = piece.unicode_symbol()\n    piece_name = (\n        chess.piece_name(piece.piece_type).capitalize()\n        if piece_symbol.isupper()\n        else chess.piece_name(piece.piece_type)\n    )\n    MADE_MOVE = True\n    return f\"Moved {piece_name} ({piece_symbol}) from \"\\\n        f\"{chess.SQUARE_NAMES[move.from_square]} to \"\\\n        f\"{chess.SQUARE_NAMES[move.to_square]}.\"\n</code></pre> </li> </ul>"},{"location":"examples/4.html#agent-configuration","title":"Agent Configuration","text":"<ol> <li> <p>Player White and Player Black Agents:</p> <ul> <li>System Message: You are a chess player and you play as black / white. First call get_legal_moves(), to get a list of legal moves. Then call make_move(move) to make a move.</li> <li> <p>Skills: Assign <code>get_legal_moves</code> and <code>make_move</code> to each agent. Set the executor to the board proxy.</p> <p> </p> </li> </ul> </li> <li> <p>Board Proxy:</p> <ul> <li> <p>Termination Method: Set up a termination method to end the conversation after a move is made. This method resets a flag (<code>MADE_MOVE</code>) after each move to monitor the game flow.</p> <p> </p> </li> </ul> </li> </ol>"},{"location":"examples/4.html#chats","title":"Chats","text":"<p>The flow starts with the black player challenging the white player to a game of chess. The white player then makes the first move.</p> <ul> <li>Player Black =&gt; Player White: The black player challenges the white player to a game of chess. For the message we use the \"Text\" type and for content, we use:<pre><code>Let's play chess! Your move.\n</code></pre> </li> </ul> <ul> <li>Player White =&gt; Board Proxy: When the white player receives the challenge, a new nested chat is triggered to get the move to play using the board proxy.</li> </ul> <ul> <li>Player Black =&gt; Board Proxy: When the black player gets a reply from the white player, a new nested chat is triggered to get the move to play using the board proxy. And the beat goes on!<p> </p> </li> </ul>"},{"location":"examples/4.html#register-nested-chats","title":"Register Nested Chats","text":"<p>On each agent, set up the nested chats we defined above, to handle the flow of the game. For the white player, a nested chat is triggered when the black player makes a move. For the black player, a nested chat is triggered when the white player replies. The message to use is the board proxy's reply, after a new move is made.</p> <p> </p>"},{"location":"examples/4.html#flow-chats-and-requirements","title":"Flow chats and requirements","text":"<ol> <li>Edit Flow: Set up the flow order to start with the \"Player Black =&gt; Player White\" connection.</li> <li>Additional requirements: As we have seen, running the flow requires the usage of the \"chess\" library, so make sure to add it in the \"Other\" tab      </li> </ol> <p>Files used in this example:</p> <ul> <li>Flow: Tool Use.waldiez</li> <li>Skills:<ul> <li>get_legal_moves.waldiezSkill</li> <li>make_move.waldiezSkill</li> </ul> </li> </ul>"},{"location":"examples/5.html","title":"Coding","text":""},{"location":"examples/5.html#coding-and-financial-analysis","title":"Coding and Financial Analysis","text":"<p>In this example, we will set up a workflow for retrieving and plotting stock prices over a specified period. The workflow includes agents for data retrieval, data plotting, and message handling.</p> <p> </p>"},{"location":"examples/5.html#overview","title":"Overview","text":"<p>The flow includes:</p> <ul> <li>Code Executor Agent: Executes the code for retrieving and plotting stock prices.</li> <li>Code Writer Agent: Writes the code for retrieving and plotting stock prices.</li> <li>Get Stock Prices Skill: Fetches stock prices using <code>yfinance</code>.</li> <li>Plot Stock Prices Skill: Plots the stock prices using <code>matplotlib</code>.</li> </ul>"},{"location":"examples/5.html#agents-and-skills","title":"Agents and skills","text":""},{"location":"examples/5.html#skills","title":"Skills","text":"<ol> <li> <p>Get Stock Prices</p> <ul> <li>Description: Get the stock prices for the given stock symbols between the start and end dates.</li> <li>Inputs: <code>stock_symbols</code> (str or list), <code>start_date</code> (str in <code>YYYY-MM-DD</code>), <code>end_date</code> (str in <code>YYYY-MM-DD</code>).</li> </ul> <p>Content:</p> <pre><code> # filename: {get_stock_prices}.py\n \"\"\"Get stock prices.\n\n Get the stock prices for the given stock symbols between  \n the start and end dates.\n \"\"\"\n\n\n def get_stock_prices(\n     stock_symbols: str | list,\n     start_date: str,\n     end_date: str,\n ):\n     \"\"\"Get the stock prices for the given stock symbols between\n     the start and end dates.\n\n     Args:\n         stock_symbols (str or list): The stock symbols to get the\n         prices for.\n         start_date (str): The start date in the format \n         'YYYY-MM-DD'.\n         end_date (str): The end date in the format 'YYYY-MM-DD'.\n\n     Returns:\n         dict: (pandas.DataFrame.to_dict): The stock prices for the given stock\n         symbols indexed by date, with one column per stock \n         symbol.\n     \"\"\"\n     # pylint: disable=import-outside-toplevel\n     import yfinance\n\n     stock_data = yfinance.download(\n         stock_symbols, start=start_date, end=end_date\n     )\n     return stock_data.get(\"Close\")\n     #\n     # We might get:\n     # Timestamp is not JSON serializable\n     # we can return a dictionary instead:\n     #\n     # close = stock_data.get(\"Close\")\n     # close.index = close.index.date  # Convert the index to date only\n     # close.index = close.index.astype(str)  # Convert the index to string\n     # return close.to_dict()\n</code></pre> <ul> <li>Save the skill.</li> </ul> </li> <li> <p>Skill: Plot Stock Prices</p> <ul> <li>Description: Plot the stock prices for the given stock symbols.</li> </ul> <p>Example Code:</p> <p>```python   # filename: {plot_stock_prices}.py   \"\"\"Plot the stock prices for the given stock symbols.\"\"\"</p> <p>def plot_stock_prices(       stock_prices: dict,       filename: str,   ):       \"\"\"Plot the stock prices for the given stock symbols.</p> <pre><code>  Args:\n      stock_prices (dict) [dumped pandas.DataFrame]: The stock \n          prices for the given stock symbols.\n      filename (str): The filename to save the plot to.\n\n  Returns:\n      str: \"ok\" if the plot was saved successfully.\n  \"\"\"\n  # pylint: disable=import-outside-toplevel\n  import matplotlib.pyplot as plt\n  import pandas as pd\n\n  if isinstance(stock_prices, dict):\n      df = pd.DataFrame.from_dict(stock_prices)\n  else:\n      df = stock_prices\n  plt.figure(figsize=(10, 5))\n  for column in df.columns:\n      plt.plot(df.index, df[column], label=column)\n  plt.title(\"Stock Prices\")\n  plt.xlabel(\"Date\")\n  plt.ylabel(\"Price\")\n  plt.grid(True)\n  # if the days are a lot in the plot, get the xticks every 5 days\n  # plt.xticks(df.index[::5], rotation=45)\n  # give a little space to the plot\n  # or don't use xticks at all\n  # plt.xticks([])\n  plt.tight_layout()\n  # save the plot\n  plt.savefig(filename)\n  return \"ok\"\n</code></pre> <p>```</p> <ul> <li>Save the skill.</li> </ul> </li> </ol>"},{"location":"examples/5.html#agents","title":"Agents","text":""},{"location":"examples/5.html#code-writer-agent","title":"Code Writer Agent","text":"<ol> <li>Models     Link a model of your choice to the Code Writer Agent. In our example, we use the <code>gpt-4-turbo</code> model.</li> <li>Skills     In the skills tab, add the <code>get_stock_prices</code> and <code>plot_stock_prices</code> skills to the Code Writer Agent. As executor, select the Code Executor Agent.      </li> </ol>"},{"location":"examples/5.html#code-executor-agent","title":"Code Executor Agent","text":"<p>In this step, we'll configure a Code Executor Agent to handle the execution of the functions required for retrieving and plotting stock data.</p> <ol> <li> <p>Basic configuration</p> <ul> <li>Max consecutive auto replies: Let's limit the number of auto-replies to <code>10</code> to avoid unnecessary repetition.</li> <li>Agent Default auto-reply: We can set the default auto-reply to `Please continue. If everything is done, reply 'TERMINATE', to avoid repeating the same message when asked.</li> </ul> </li> <li> <p>Code Execution</p> <ul> <li>At the Code Execution tab, check the box for Use Code Execution.</li> <li>Set the Working Directory to <code>coding</code> (or your designated project folder).</li> <li>Set the Timeout slider to <code>60</code> seconds to allow enough time for the code to fetch and plot data without interruption.</li> <li> <p>Under Functions, add the <code>get_stock_prices</code> and <code>plot_stock_prices</code> functions to allow the Code Executor Agent to access and execute these methods.</p> <p> </p> </li> </ul> </li> </ol>"},{"location":"examples/5.html#flow-chats-and-requirements","title":"Flow chats and requirements","text":"<ol> <li>Edit Flow: Set up the flow order to start with the \"Code Executor Agent =&gt; Code Writer\" connection.</li> <li>Additional requirements: Add the libraries we have used (<code>yfinance</code>, <code>matplotlib</code>, <code>pandas</code>) in our skills to the flow requirements.      </li> </ol>"},{"location":"examples/5.html#run-the-flow","title":"Run the flow","text":"<p>Press the Run button to execute the flow. When asked, you can press Enter to use the Agents auto-reply message. When you get a message about having the plot generated, you can enter  <code>TERMINATE</code> (or <code>exit</code>) to end the flow.</p> <p> </p> <p>You can view the generated code and plot in the specified <code>code execution</code> folder.</p> <p> </p> <p>Files used in this example:</p> <ul> <li>Flow: Coding.waldiez</li> <li>Skills:<ul> <li>get_stock_prices.waldiezSkill</li> <li>plot_stock_prices.waldiezSkill</li> </ul> </li> </ul> <p>Note</p> <p>The outputs may vary based on the model, skills and message you use. Feel free to customize the skills and messages to suit your requirements</p>"},{"location":"examples/6.html","title":"Planning","text":""},{"location":"examples/6.html#planning-and-stock-report-generation","title":"Planning and Stock Report Generation","text":"<p>In this example, we create a workflow to analyze stock price performance using multiple agents with specific roles. The task is to analyze Nvidia\u2019s stock performance over the past month, retrieve relevant data, and generate a report.</p> <p> </p>"},{"location":"examples/6.html#overview","title":"Overview","text":"<p>The workflow includes:</p> <ul> <li>Admin Agent: Manages task delegation and provides instructions.</li> <li>(Group) Manager Agent: Oversees execution by coordinating with specialized agents.</li> <li>Planner Agent: Plans the sequence of steps to complete the analysis.</li> <li>Engineer Agent: Writes code based on the plan provided by the planner.</li> <li>Executor Agent: Executes the code written by the engineer and reports the result.</li> <li>Writer Agent: Compiles the analysis into a blog post.</li> </ul>"},{"location":"examples/6.html#agents-setup","title":"Agents setup","text":""},{"location":"examples/6.html#admin-agent","title":"Admin Agent","text":"<p>Create a new user proxy agent named <code>Admin</code> and system message:</p> <pre><code>Give the task, and send instructions to writer to refine the blog post.\n</code></pre>"},{"location":"examples/6.html#manager-agent","title":"Manager Agent","text":"<ul> <li>Create a new group agent named <code>Manager</code></li> <li>On the \"Group Chat\" tab, specify the Admin Name and the Max Rounds fields. You can leave the speakers configuration as default (allow speakers repetition, and auto speaker selection method). We'll configure the speaker transitions in a next case.      </li> </ul> <p>Note</p> <p>The Max Rounds field specifies the maximum number of rounds the group agent will run. The group agent will stop after reaching this limit. You might want to set this field to a high number to avoid stopping the group agent prematurely.</p>"},{"location":"examples/6.html#group-members","title":"Group members","text":"<ul> <li> <p>Drag and drop assistant agents to the manager agent:</p> <ul> <li> <p>Planner Agent: Create a new assistant agent named <code>Planner</code> and add the following system message:</p> <pre><code>Given a task, please determine what information is needed to complete the task. Please note that the information will all be retrieved using Python code. Please only suggest information that can be retrieved using Python code. After each step is done by others, check the progress and instruct the remaining steps. If a step fails, try to workaround.\n</code></pre> <p>Link a model of your choice to the Planner Agent. In our example, we use the <code>gpt-4-turbo</code> model.</p> </li> </ul> </li> </ul> <ul> <li>Engineer Agent: Create a new assistant agent named <code>Engineer</code>. No need to add any system message, you can add a description if you want, something like:<pre><code>An engineer that writes code based on the plan provided by the planner.\n</code></pre> <p>Link a model of your choice to the Planner Agent. In our example, we use the <code>gpt-4-turbo</code> model.</p> </li> </ul> <ul> <li>Executor Agent: Create a new assistant agent named <code>Executor</code>, with the following system message:<pre><code>Execute the code written by the engineer and report the result.\n</code></pre> <p>On the Code Execution tab, enable the Use Code Execution option, set the Working Directory to <code>coding</code>, and set a default timeout for the code execution to wait. We use <code>30</code>   seconds in this example, but you can increase it if needed.</p> <p>Do not link any model to the Executor Agent, this agent will not generate text, only execute code.</p> <p> </p> </li> </ul> <ul> <li>Writer Agent: Create a new assistant agent named <code>Writer</code>, with the following system message:<pre><code>Writer. Please write blogs in markdown format (with relevant titles) and put the content in pseudo ```md``` code block. You take feedback from the admin and refine your blog.\n</code></pre> <p>Link a model of your choice to the Writer Agent. In our example, we use the <code>gpt-4-turbo</code> model.</p> </li> </ul>"},{"location":"examples/6.html#add-agent-connections-and-run-the-flow","title":"Add agent connections and run the flow","text":"<p>1. Add a connection from the <code>Admin</code> agent to the <code>Manager</code> agent, to start the flow. For hte message we use a custom method:     <pre><code>def callable_message(sender, recipient, context):\n\"\"\"Return the task.\"\"\"\nimport datetime  # pylint: disable=import-outside-toplevel\n\ntoday = datetime.datetime.now().date()\nmessage = (\n    \"Write a blogpost about the stock price performance of \"\n    f\"Nvidia in the past month. Today's date is {today}\"\n)\nreturn message\n</code></pre></p> <p>2. Edit Flow: Set up the flow order to start with the \"Admin =&gt; Manager\" connection.   3. Run the flow and review the logs and the generated blog post.      </p>"},{"location":"examples/6.html#using-custom-transitions","title":"Using custom transitions","text":"<p>Since the agents in the group do not need to interact with all the other agents, we can use custom transitions to manage the flow more effectively. In this example, we will set up custom transitions to limit what agents can speak to each other.</p> <p>On the manger agent, Group Chat tab, Speakers section, we can set up the transitions between the agents. The Admin can speak to all the agents (well it's an admin, right?), the Engineer can speak to the Admin amd the Executor agent, the Executor can speak to the Admin the Engineer and the Planner, the Planner to Admin, Engineer and the Writer and the Writer to the Admin and the Planner.</p> <p> </p> <p>Files used in this example:</p> <ul> <li>Simple group chat without transitions: Planning 1.waldiez</li> <li>Group chat with transitions: Planning 2.waldiez</li> </ul>"},{"location":"examples/7.html","title":"RAG","text":""},{"location":"examples/7.html#group-chat-with-retrieval-augmented-generation","title":"Group Chat with Retrieval Augmented Generation","text":"<p>In this example, we configure a group chat environment with multiple agents, each assigned a specific role. A Boss Assistant agent utilizes Retrieval Augmented Generation (RAG) to help solve complex problems by retrieving relevant information and responding accurately. The task involves using Spark for parallel training in FLAML.</p> <p> </p>"},{"location":"examples/7.html#overview","title":"Overview","text":"<p>The workflow includes:</p> <ul> <li>Boss Assistant Agent: Assists with extra content retrieval power for solving difficult problems.</li> <li>(Group) Manager Agent: Manages the group chat environment.</li> <li>Code Reviewer Agent: Reviews the code.</li> <li>Product Manager Agent: Designs and plans the project.</li> <li>Senior Python Engineer Agent: Writes code to solve problems and answer questions.</li> </ul>"},{"location":"examples/7.html#agents-setup","title":"Agents setup","text":""},{"location":"examples/7.html#boss-assistant-agent","title":"Boss Assistant Agent","text":"<p>Drag and drop a new User Proxy agent to the canvas and configure it as follows:</p> <ul> <li>Name: Boss Assistant</li> <li>Description: Assistant with extra content retrieval power for solving difficult problems.</li> <li>Max consecutive auto reply: Set to 3.</li> <li>Agent Default Auto Reply: Reply <code>TERMINATE</code> if the task is done.</li> </ul> <p>Also check Use RAG box and configure the RAG settings as follows:</p> <p> </p>"},{"location":"examples/7.html#retrieve-config-tab","title":"Retrieve Config Tab","text":"<ul> <li>Task: Set the task type to Code.</li> <li>Docs Paths: Since the task is about using Spark for parallel training in FLAML, we use the following document path: <code>https://raw.githubusercontent.com/microsoft/FLAML/main/website/docs/Examples/Integrate%20-%20Spark.md</code></li> <li>Collection Name: <code>groupchat</code></li> <li>Number of Results: Set to 3.</li> </ul>"},{"location":"examples/7.html#vector-db-config","title":"Vector DB Config","text":"<ul> <li>Vector DB: Chroma</li> <li>Embedding Model: all-MiniLM-L6-v2, the default for Chroma.</li> <li>Use Persistent Storage: Checked</li> <li>Storage Path: <code>documents</code></li> </ul> <p>Note</p> <p>Feel free to experiment with different settings to optimize the retrieval process.</p>"},{"location":"examples/7.html#termination","title":"Termination","text":"<p>On the Termination tab, setup a simple keyword-based termination rule with the keyword <code>TERMINATE</code> and Keyword is the last word as the termination criterion.</p>"},{"location":"examples/7.html#model","title":"Model","text":"<p>Link a model of your choice to the Boss Assistant. In our example, we use the <code>gpt-3.5-turbo</code> model.</p>"},{"location":"examples/7.html#group-manager-agent","title":"Group Manager Agent","text":"<p>Drag and drop a new Group agent to the canvas and configure the Group chat settings as follows:</p> <ul> <li>Admin Name: <code>boss_assistant</code></li> <li>Max Rounds to <code>12</code>.</li> <li>Speakers Configuration: Set the speaker selection method to Round robin and allow speaker repetition.</li> <li>Model: Link a model of your choice to the Group Manager. In our example, we use the <code>gpt-3.5-turbo</code> model.</li> </ul>"},{"location":"examples/7.html#group-members","title":"Group Members","text":"<p>Drag and drop the following agents to the Group Manager agent:</p>"},{"location":"examples/7.html#code-reviewer-agent","title":"Code Reviewer Agent","text":"<ul> <li>System Message: You are a code reviewer. Reply <code>TERMINATE</code> at the end when everything is done.</li> <li>Add the Termination rule with the keyword <code>TERMINATE</code>.</li> <li>Link a model of your choice to the Code Reviewer agent.</li> </ul>"},{"location":"examples/7.html#product-manager-agent","title":"Product Manager Agent","text":"<ul> <li>System Message: You are a product manager. Reply <code>TERMINATE</code> at the end when everything is done.</li> <li>Add the Termination rule with the keyword <code>TERMINATE</code>.</li> <li>Link a model of your choice to the Product Manager agent.</li> </ul>"},{"location":"examples/7.html#senior-python-engineer-agent","title":"Senior Python Engineer Agent","text":"<ul> <li>System Message: You are a senior python engineer, you provide python code to answer questions. Reply <code>TERMINATE</code> in the end when everything is done.</li> <li>Add the Termination rule with the keyword <code>TERMINATE</code>.</li> <li>Link a model of your choice to the Senior Python Engineer agent.</li> </ul>"},{"location":"examples/7.html#connections","title":"Connections","text":"<p>Add a link between the Boss Assistant and the Group Manager to start the conversation. For the message, this type we use the RAG Message Generator. It uses autogen's <code>sender.message_generator</code> method to generate the message to pass to the Group Manager.</p> <p> </p>"},{"location":"examples/7.html#workflow","title":"Workflow","text":"<p>Before running the flow, open the Edit flow modal as usual, and add the one connection we have to the flow. Run the flow using the play button and inspect the logs to monitor the conversation between the agents.</p> <p>Files used in this example:</p> <ul> <li>Flow: RAG.waldiez</li> </ul>"},{"location":"examples/8.html","title":"ReAct","text":""},{"location":"examples/8.html#react-using-tavily","title":"ReAct using Tavily","text":"<p>In this example, we configure an Assistant agent with a search tool skill to answer a question using information retrieval. The agent will utilize the search tool to gather information before responding to the user. The workflow involves setting up the agent with specific skills and linking it to the user for interaction.</p> <p> </p>"},{"location":"examples/8.html#overview","title":"Overview","text":"<p>The workflow includes:</p> <ul> <li>Assistant Agent: Uses a search tool to gather real-time information for answering user queries.</li> <li>User Proxy Agent: Acts as a bridge to initiate the interaction.</li> <li>Agent Flow: The User Proxy sends a query to the Assistant, which uses the search tool to retrieve information.</li> </ul> <p>To set up the search_tool skill in Tavily, follow these steps before configuring the agents.</p>"},{"location":"examples/8.html#create-the-search-tool-skill","title":"Create the Search Tool Skill","text":"<ol> <li> <p>Go to the Skills tab and click on Add Skill to create a new skill:</p> <ul> <li>Name: <code>search_tool</code></li> <li>Description: \"Search tool using Tavily AI\"</li> <li>Skill Content:<pre><code>```python\nimport os\nfrom typing import Annotated\n\n\ndef search_tool(query: Annotated[str, \"The search query\"]) -&gt; Annotated[str, \"The search results\"]:\n    \"\"\"Search tool using Tavily AI.\"\"\"\n\n    from tavily import TavilyClient\n\n    tavily = TavilyClient(api_key=os.environ[\"TAVILY_API_KEY\"])\n    return tavily.get_search_context(query=query, search_depth=\"advanced\")\n```\n</code></pre> </li> </ul> <ul> <li> <p>Environment Variables: Add the necessary environment variable for the Tavily API key.</p> <ul> <li>Key: <code>TAVILY_API_KEY</code></li> <li>Value: Enter your Tavily API key. You can get one on the Tavily website.</li> </ul> <p> </p> </li> </ul> </li> </ol>"},{"location":"examples/8.html#set-up-the-user-proxy","title":"Set up the User Proxy","text":"<ul> <li>Drag and Drop a new User Proxy agent onto the canvas.</li> <li>Configure the User Proxy agent:<ul> <li>No additional models or skills are required for the User Proxy.</li> </ul> </li> </ul>"},{"location":"examples/8.html#set-up-the-assistant-agent","title":"Set up the Assistant Agent","text":"<ul> <li>Drag and Drop an Assistant agent onto the canvas.</li> <li>Configure the Assistant agent:<ul> <li>System Message: \"Only use the tools you have been provided with. Reply TERMINATE at the end when the task is done.\"</li> </ul> </li> <li>Assign the Model:    Link a model of your choice to the User Proxy agent. In this example, we use the <code>claude-3-5-sonnet-20240620</code> model.</li> <li>Add Skills:<ul> <li>Go to the Skills tab and select <code>search_tool</code>.</li> <li>Set the Executor as User to allow manual control over the search process.</li> </ul> </li> </ul>"},{"location":"examples/8.html#establish-connections","title":"Establish Connections","text":"<ul> <li>Link the User Proxy agent to the Assistant agent by dragging a line between them.</li> <li>For the message, we use this custom method:<pre><code>def callable_message(sender, recipient, context):\n    \"\"\"Complete the message function\"\"\"\n    ReAct_prompt = \"\"\"\nAnswer the following questions as best you can. You have access to tools provided.\n\nUse the following format:\n\nQuestion: the input question you must answer\nThought: you should always think about what to do\nAction: the action to take\nAction Input: the input to the action\nObservation: the result of the action\n... (this process can repeat multiple times)\nThought: I now know the final answer\nFinal Answer: the final answer to the original input question\n\nBegin!\nQuestion: {input}\n\"\"\"\n    return ReAct_prompt.format(input=context[\"question\"])\n</code></pre> </li> </ul> <ul> <li>Add to the message context:<ul> <li>Key: <code>question</code></li> <li>Value: <code>What is the result of super bowl 2024?</code></li> </ul> </li> </ul>"},{"location":"examples/8.html#step-4-execute-and-monitor","title":"Step 4: Execute and Monitor","text":"<ol> <li>Run the flow by pressing the play button.</li> <li>In the logs section, observe how the Assistant uses the search tool to retrieve relevant information and respond to the query.</li> </ol> <p>Warning</p> <p>When running the flow for the first time, you might get an error saying <code>Please install anthropic to use anthropic</code>. Even though the library is installed (<code>ag2[anthropic]</code>), you might need to restart the kernel to resolve the issue.</p> <p>Note</p> <p>Once the flow starts, you might be prompt before running the search tool. You can just press Enter on the prompt to continue the flow.</p> <p> </p> <p>Files used in this example:</p> <ul> <li>Flow: ReAct.waldiez</li> <li>Skill: search_tool.waldiezSkill</li> </ul>"},{"location":"reference/python/index.html","title":"Index","text":""},{"location":"reference/python/index.html#waldiez","title":"Waldiez","text":"<p>Translate a Waldiez flow:</p> <p> </p> <p>To a python script or a jupyter notebook with the corresponding ag2 agents and chats.</p>"},{"location":"reference/python/index.html#features","title":"Features","text":"<ul> <li>Convert .waldiez flows to .py or .ipynb</li> <li>Run a .waldiez flow</li> <li>Store the runtime logs of a flow to csv for further analysis</li> </ul>"},{"location":"reference/python/index.html#installation","title":"Installation","text":"<p>On PyPI:</p> <pre><code>python -m pip install waldiez\n</code></pre> <p>From the repository:</p> <pre><code>python -m pip install git+https://github.com/waldiez/python.git\n</code></pre> <p>Note</p> <p><code>autogen-agentchat</code> package conflicts with <code>ag2</code> / <code>pyautogen</code>. Ensure that <code>autogen-agentchat</code> is uninstalled before installing <code>waldiez</code>. If you have already installed <code>autogen-agentchat</code>, you can uninstall it with the following command:</p> <pre><code>```shell\npip uninstall autogen-agentchat -y\n```\n\nIf already installed waldiez you might need to reinstall it after uninstalling `autogen-agentchat`:\n\n```shell\npip install --force --no-cache waldiez pyautogen\n```\n</code></pre>"},{"location":"reference/python/index.html#usage","title":"Usage","text":""},{"location":"reference/python/index.html#cli","title":"CLI","text":"<pre><code># Convert a Waldiez flow to a python script or a jupyter notebook\nwaldiez convert --file /path/to/a/flow.waldiez --output /path/to/an/output/flow[.py|.ipynb]\n# Convert and run the script, optionally force generation if the output file already exists\nwaldiez run --file /path/to/a/flow.waldiez --output /path/to/an/output/flow[.py] [--force]\n</code></pre>"},{"location":"reference/python/index.html#using-dockerpodman","title":"Using docker/podman","text":"<pre><code>CONTAINER_COMMAND=docker # or podman\n# pull the image\n$CONTAINER_COMMAND pull waldiez/waldiez\n# Convert a Waldiez flow to a python script or a jupyter notebook\n$CONTAINER_COMMAND run \\\n  --rm \\\n  -v /path/to/a/flow.waldiez:/flow.waldiez \\\n  -v /path/to/an/output:/output \\\n  waldiez/waldiez convert --file /flow.waldiez --output /output/flow[.py|.ipynb] [--force]\n\n# with selinux and/or podman, you might get permission (or file not found) errors, so you can try:\n$CONTAINER_COMMAND run \\\n  --rm \\\n  -v /path/to/a/flow.waldiez:/flow.waldiez \\\n  -v /path/to/an/output:/output \\\n  --userns=keep-id \\\n  --security-opt label=disable \\\n  waldiez/waldiez convert --file /flow.waldiez --output /output/flow[.py|.ipynb] [--force]\n</code></pre> <pre><code># Convert and run the script\n$CONTAINER_COMMAND run \\\n  --rm \\\n  -v /path/to/a/flow.waldiez:/flow.waldiez \\\n  -v /path/to/an/output:/output \\\n  waldiez/waldiez run --file /flow.waldiez --output /output/output[.py]\n</code></pre>"},{"location":"reference/python/index.html#ui","title":"UI","text":"<p>For creating-only (no exporting or running) waldiez flows, you can use the playground at https://waldiez.github.io. The repo for the js library is here. We are currently working on waldiez-studio to provide a visual interface for creating and running Waldiez flows (you can find more here). Until then, you can use our Jupyter or the VSCode extension to create and run Waldiez flows.</p>"},{"location":"reference/python/index.html#as-a-library","title":"As a library","text":""},{"location":"reference/python/index.html#export-a-flow","title":"Export a flow","text":"<pre><code># Export a Waldiez flow to a python script or a jupyter notebook\nfrom waldiez import WaldiezExporter\nflow_path = \"/path/to/a/flow.waldiez\"\noutput_path = \"/path/to/an/output.py\"  # or .ipynb\nexporter = WaldiezExporter.load(flow_path)\nexporter.export(output_path)\n</code></pre>"},{"location":"reference/python/index.html#run-a-flow","title":"Run a flow","text":"<pre><code># Run a flow\nfrom waldiez import WaldiezRunner\nflow_path = \"/path/to/a/flow.waldiez\"\noutput_path = \"/path/to/an/output.py\"\nrunner = WaldiezRunner.load(flow_path)\nrunner.run(output_path=output_path)\n</code></pre>"},{"location":"reference/python/index.html#tools","title":"Tools","text":"<ul> <li>ag2 (formerly AutoGen)</li> <li>juptytext</li> <li>pydantic</li> <li>typer</li> <li>asyncer</li> </ul>"},{"location":"reference/python/exporter.html","title":"Exporter","text":"<p>Waldiez exporter class.</p> <p>The role of the exporter is to export the model's data to an autogen's flow with one or more chats.</p> <p>The resulting file(s): a <code>flow.py</code> file with one <code>main()</code> function to trigger the chat(s).</p>"},{"location":"reference/python/exporter.html#waldiez.exporter.WaldiezExporter","title":"<code>WaldiezExporter(waldiez: Waldiez)</code>","text":"<p>Waldiez exporter.</p> <p>Attributes:</p> Name Type Description <code>waldiez (Waldiez)</code> <code>The Waldiez instance.</code> <p>Parameters:</p> Name Type Description Default <code>waldiez</code> <code>Waldiez</code> <p>The Waldiez instance.</p> required Source code in <code>waldiez/exporter.py</code> <pre><code>def __init__(self, waldiez: Waldiez) -&gt; None:\n    \"\"\"Initialize the Waldiez exporter.\n\n    Parameters\n    ----------\n    waldiez: Waldiez\n        The Waldiez instance.\n    \"\"\"\n    self.waldiez = waldiez\n</code></pre>"},{"location":"reference/python/exporter.html#waldiez.exporter.WaldiezExporter.export","title":"<code>export(path: Union[str, Path], force: bool = False) -&gt; None</code>","text":"<p>Export the Waldiez instance.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>Union[str, Path]</code> <p>The path to export to.</p> required <code>force</code> <code>bool</code> <p>Override the output file if it already exists, by default False.</p> <code>False</code> <p>Raises:</p> Type Description <code>FileExistsError</code> <p>If the file already exists and force is False.</p> <code>IsADirectoryError</code> <p>If the output is a directory.</p> <code>ValueError</code> <p>If the file extension is invalid.</p> Source code in <code>waldiez/exporter.py</code> <pre><code>def export(self, path: Union[str, Path], force: bool = False) -&gt; None:\n    \"\"\"Export the Waldiez instance.\n\n    Parameters\n    ----------\n    path : Union[str, Path]\n        The path to export to.\n    force : bool, optional\n        Override the output file if it already exists, by default False.\n\n    Raises\n    ------\n    FileExistsError\n        If the file already exists and force is False.\n    IsADirectoryError\n        If the output is a directory.\n    ValueError\n        If the file extension is invalid.\n    \"\"\"\n    if not isinstance(path, Path):\n        path = Path(path)\n    path = path.resolve()\n    if path.is_dir():\n        raise IsADirectoryError(f\"Output is a directory: {path}\")\n    if path.exists():\n        if force is False:\n            raise FileExistsError(f\"File already exists: {path}\")\n        path.unlink(missing_ok=True)\n    path.parent.mkdir(parents=True, exist_ok=True)\n    extension = path.suffix\n    if extension == \".waldiez\":\n        self.to_waldiez(path)\n    elif extension == \".py\":\n        self.to_py(path)\n    elif extension == \".ipynb\":\n        self.to_ipynb(path)\n    else:\n        raise ValueError(f\"Invalid extension: {extension}\")\n</code></pre>"},{"location":"reference/python/exporter.html#waldiez.exporter.WaldiezExporter.load","title":"<code>load(file_path: Path) -&gt; WaldiezExporter</code>  <code>classmethod</code>","text":"<p>Load the Waldiez instance from a file.</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>Path</code> <p>The file path.</p> required <p>Returns:</p> Type Description <code>WaldiezExporter</code> <p>The Waldiez exporter.</p> Source code in <code>waldiez/exporter.py</code> <pre><code>@classmethod\ndef load(cls, file_path: Path) -&gt; \"WaldiezExporter\":\n    \"\"\"Load the Waldiez instance from a file.\n\n    Parameters\n    ----------\n    file_path : Path\n        The file path.\n\n    Returns\n    -------\n    WaldiezExporter\n        The Waldiez exporter.\n    \"\"\"\n    waldiez = Waldiez.load(file_path)\n    return cls(waldiez)\n</code></pre>"},{"location":"reference/python/exporter.html#waldiez.exporter.WaldiezExporter.to_ipynb","title":"<code>to_ipynb(path: Path) -&gt; None</code>","text":"<p>Export flow to jupyter notebook.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>Path</code> <p>The path to export to.</p> required <p>Raises:</p> Type Description <code>RuntimeError</code> <p>If the notebook could not be generated.</p> Source code in <code>waldiez/exporter.py</code> <pre><code>def to_ipynb(self, path: Path) -&gt; None:\n    \"\"\"Export flow to jupyter notebook.\n\n    Parameters\n    ----------\n    path : Path\n        The path to export to.\n\n    Raises\n    ------\n    RuntimeError\n        If the notebook could not be generated.\n    \"\"\"\n    # we first create a .py file with the content\n    # and then convert it to a notebook using jupytext\n    exporter = FlowExporter(\n        waldiez=self.waldiez,\n        output_dir=path.parent,\n        for_notebook=True,\n    )\n    output = exporter.export()\n    content = output[\"content\"]\n    if not content:\n        raise RuntimeError(\"Could not generate notebook\")\n    py_path = path.with_suffix(\".tmp.py\")\n    with open(py_path, \"w\", encoding=\"utf-8\", newline=\"\\n\") as f:\n        f.write(content)\n    with open(py_path, \"r\", encoding=\"utf-8\") as py_out:\n        content = jupytext.read(py_out, fmt=\"py:light\")\n    ipynb_path = str(py_path).replace(\".tmp.py\", \".tmp.ipynb\")\n    jupytext.write(content, ipynb_path, fmt=\"ipynb\")\n    Path(ipynb_path).rename(ipynb_path.replace(\".tmp.ipynb\", \".ipynb\"))\n    py_path.unlink(missing_ok=True)\n</code></pre>"},{"location":"reference/python/exporter.html#waldiez.exporter.WaldiezExporter.to_py","title":"<code>to_py(path: Path) -&gt; None</code>","text":"<p>Export waldiez flow to python script.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>Path</code> <p>The path to export to.</p> required <p>Raises:</p> Type Description <code>RuntimeError</code> <p>If the python script could not be generated.</p> Source code in <code>waldiez/exporter.py</code> <pre><code>def to_py(self, path: Path) -&gt; None:\n    \"\"\"Export waldiez flow to python script.\n\n    Parameters\n    ----------\n    path : Path\n        The path to export to.\n\n    Raises\n    ------\n    RuntimeError\n        If the python script could not be generated.\n    \"\"\"\n    exporter = FlowExporter(\n        waldiez=self.waldiez,\n        output_dir=path.parent,\n        for_notebook=False,\n    )\n    output = exporter.export()\n    content = output[\"content\"]\n    if not content:\n        raise RuntimeError(\"Could not generate python script\")\n    with open(path, \"w\", encoding=\"utf-8\", newline=\"\\n\") as file:\n        file.write(content)\n</code></pre>"},{"location":"reference/python/exporter.html#waldiez.exporter.WaldiezExporter.to_waldiez","title":"<code>to_waldiez(file_path: Path) -&gt; None</code>","text":"<p>Export the Waldiez instance.</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>Path</code> <p>The file path.</p> required Source code in <code>waldiez/exporter.py</code> <pre><code>def to_waldiez(self, file_path: Path) -&gt; None:\n    \"\"\"Export the Waldiez instance.\n\n    Parameters\n    ----------\n    file_path : Path\n        The file path.\n    \"\"\"\n    with open(file_path, \"w\", encoding=\"utf-8\", newline=\"\\n\") as file:\n        file.write(self.waldiez.model_dump_json())\n</code></pre>"},{"location":"reference/python/runner.html","title":"Runner","text":"<p>Run a waldiez flow.</p> <p>The flow is first converted to an autogen flow with agents, chats and skills. We then chown to temporary directory, call the flow's <code>main()</code> and return the results. Before running the flow, any additional environment variables specified in the waldiez file are set.</p>"},{"location":"reference/python/runner.html#waldiez.runner.WaldiezRunner","title":"<code>WaldiezRunner(waldiez: Waldiez, file_path: Optional[Union[str, Path]] = None)</code>","text":"<p>Waldiez runner class.</p> Source code in <code>waldiez/runner.py</code> <pre><code>def __init__(\n    self, waldiez: Waldiez, file_path: Optional[Union[str, Path]] = None\n) -&gt; None:\n    \"\"\"Initialize the Waldiez manager.\"\"\"\n    self._waldiez = waldiez\n    self._running = False\n    self._file_path = file_path\n    self._exporter = WaldiezExporter(waldiez)\n    self._called_install_requirements = False\n</code></pre>"},{"location":"reference/python/runner.html#waldiez.runner.WaldiezRunner.a_install_requirements","title":"<code>a_install_requirements() -&gt; None</code>  <code>async</code>","text":"<p>Install the requirements for the flow asynchronously.</p> Source code in <code>waldiez/runner.py</code> <pre><code>async def a_install_requirements(self) -&gt; None:\n    \"\"\"Install the requirements for the flow asynchronously.\"\"\"\n    self._called_install_requirements = True\n    printer = get_printer()\n    extra_requirements = self.gather_requirements()\n    if extra_requirements:\n        await a_install_requirements(extra_requirements, printer)\n        refresh_environment()\n</code></pre>"},{"location":"reference/python/runner.html#waldiez.runner.WaldiezRunner.a_run","title":"<code>a_run(output_path: Optional[Union[str, Path]] = None, uploads_root: Optional[Union[str, Path]] = None) -&gt; Union[ChatResult, List[ChatResult]]</code>  <code>async</code>","text":"<p>Run the Waldiez workflow asynchronously.</p> <p>Parameters:</p> Name Type Description Default <code>output_path</code> <code>Optional[Union[str, Path]]</code> <p>The output path, by default None.</p> <code>None</code> <code>uploads_root</code> <code>Optional[Union[str, Path]]</code> <p>The uploads root, to get user-uploaded files, by default None.</p> <code>None</code> <p>Returns:</p> Type Description <code>Union[ChatResult, List[ChatResult]]</code> <p>The result(s) of the chat(s).</p> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>If the workflow is already running.</p> Source code in <code>waldiez/runner.py</code> <pre><code>async def a_run(\n    self,\n    output_path: Optional[Union[str, Path]] = None,\n    uploads_root: Optional[Union[str, Path]] = None,\n) -&gt; Union[\"ChatResult\", List[\"ChatResult\"]]:\n    \"\"\"Run the Waldiez workflow asynchronously.\n\n    Parameters\n    ----------\n    output_path : Optional[Union[str, Path]], optional\n        The output path, by default None.\n    uploads_root : Optional[Union[str, Path]], optional\n        The uploads root, to get user-uploaded files, by default None.\n\n    Returns\n    -------\n    Union[ChatResult, List[ChatResult]]\n        The result(s) of the chat(s).\n\n    Raises\n    ------\n    RuntimeError\n        If the workflow is already running.\n    \"\"\"\n    if self._running is True:\n        raise RuntimeError(\"Workflow already running\")\n    self._running = True\n    file_path = output_path or self._file_path\n    try:\n        return await self._a_run(file_path, uploads_root)\n    finally:\n        self._running = False\n</code></pre>"},{"location":"reference/python/runner.html#waldiez.runner.WaldiezRunner.gather_requirements","title":"<code>gather_requirements() -&gt; Set[str]</code>","text":"<p>Gather extra requirements to install before running the flow.</p> <p>Returns:</p> Type Description <code>Set[str]</code> <p>The extra requirements.</p> Source code in <code>waldiez/runner.py</code> <pre><code>def gather_requirements(self) -&gt; Set[str]:\n    \"\"\"Gather extra requirements to install before running the flow.\n\n    Returns\n    -------\n    Set[str]\n        The extra requirements.\n    \"\"\"\n    extra_requirements = {\n        req for req in self.waldiez.requirements if req not in sys.modules\n    }\n    if self.waldiez.has_captain_agents:\n        check_pysqlite3()\n    return extra_requirements\n</code></pre>"},{"location":"reference/python/runner.html#waldiez.runner.WaldiezRunner.install_requirements","title":"<code>install_requirements() -&gt; None</code>","text":"<p>Install the requirements for the flow.</p> Source code in <code>waldiez/runner.py</code> <pre><code>def install_requirements(self) -&gt; None:\n    \"\"\"Install the requirements for the flow.\"\"\"\n    self._called_install_requirements = True\n    printer = get_printer()\n    extra_requirements = self.gather_requirements()\n    if extra_requirements:\n        install_requirements(extra_requirements, printer)\n        refresh_environment()\n</code></pre>"},{"location":"reference/python/runner.html#waldiez.runner.WaldiezRunner.load","title":"<code>load(waldiez_file: Union[str, Path], name: Optional[str] = None, description: Optional[str] = None, tags: Optional[List[str]] = None, requirements: Optional[List[str]] = None) -&gt; WaldiezRunner</code>  <code>classmethod</code>","text":"<p>Create a WaldiezRunner instance from a file.</p> <p>Parameters:</p> Name Type Description Default <code>waldiez_file</code> <code>Union[str, Path]</code> <p>The file path.</p> required <code>name</code> <code>Optional[str]</code> <p>The name of the Waldiez, by default None.</p> <code>None</code> <code>description</code> <code>Optional[str]</code> <p>The description of the Waldiez, by default None.</p> <code>None</code> <code>tags</code> <code>Optional[List[str]]</code> <p>The tags of the Waldiez, by default None.</p> <code>None</code> <code>requirements</code> <code>Optional[List[str]]</code> <p>The requirements of the Waldiez, by default None.</p> <code>None</code> <p>Returns:</p> Type Description <code>WaldiezRunner</code> <p>The Waldiez runner instance.</p> <p>Raises:</p> Type Description <code>FileNotFoundError</code> <p>If the file is not found.</p> <code>RuntimeError</code> <p>If the file is not a valid Waldiez file.</p> Source code in <code>waldiez/runner.py</code> <pre><code>@classmethod\ndef load(\n    cls,\n    waldiez_file: Union[str, Path],\n    name: Optional[str] = None,\n    description: Optional[str] = None,\n    tags: Optional[List[str]] = None,\n    requirements: Optional[List[str]] = None,\n) -&gt; \"WaldiezRunner\":\n    \"\"\"Create a WaldiezRunner instance from a file.\n\n    Parameters\n    ----------\n    waldiez_file : Union[str, Path]\n        The file path.\n    name : Optional[str], optional\n        The name of the Waldiez, by default None.\n    description : Optional[str], optional\n        The description of the Waldiez, by default None.\n    tags : Optional[List[str]], optional\n        The tags of the Waldiez, by default None.\n    requirements : Optional[List[str]], optional\n        The requirements of the Waldiez, by default None.\n\n    Returns\n    -------\n    WaldiezRunner\n        The Waldiez runner instance.\n\n    Raises\n    ------\n    FileNotFoundError\n        If the file is not found.\n    RuntimeError\n        If the file is not a valid Waldiez file.\n    \"\"\"\n    waldiez = Waldiez.load(\n        waldiez_file,\n        name=name,\n        description=description,\n        tags=tags,\n        requirements=requirements,\n    )\n    return cls(waldiez, file_path=waldiez_file)\n</code></pre>"},{"location":"reference/python/runner.html#waldiez.runner.WaldiezRunner.run","title":"<code>run(output_path: Optional[Union[str, Path]] = None, uploads_root: Optional[Union[str, Path]] = None, skip_mmd: bool = False) -&gt; Union[ChatResult, List[ChatResult], Dict[int, ChatResult]]</code>","text":"<p>Run the Waldiez workflow.</p> <p>Parameters:</p> Name Type Description Default <code>output_path</code> <code>Optional[Union[str, Path]]</code> <p>The output path, by default None.</p> <code>None</code> <code>uploads_root</code> <code>Optional[Union[str, Path]]</code> <p>The uploads root, to get user-uploaded files, by default None.</p> <code>None</code> <code>skip_mmd</code> <code>bool</code> <p>Whether to skip the Mermaid diagram generation, by default False.</p> <code>False</code> <p>Returns:</p> Type Description <code>Union[ChatResult, List[ChatResult], Dict[int, ChatResult]]</code> <p>The result(s) of the chat(s).</p> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>If the workflow is already running.</p> Source code in <code>waldiez/runner.py</code> <pre><code>def run(\n    self,\n    output_path: Optional[Union[str, Path]] = None,\n    uploads_root: Optional[Union[str, Path]] = None,\n    skip_mmd: bool = False,\n) -&gt; Union[\"ChatResult\", List[\"ChatResult\"], Dict[int, \"ChatResult\"]]:\n    \"\"\"Run the Waldiez workflow.\n\n    Parameters\n    ----------\n    output_path : Optional[Union[str, Path]], optional\n        The output path, by default None.\n    uploads_root : Optional[Union[str, Path]], optional\n        The uploads root, to get user-uploaded files, by default None.\n    skip_mmd : bool, optional\n        Whether to skip the Mermaid diagram generation, by default False.\n\n    Returns\n    -------\n    Union[\"ChatResult\", List[\"ChatResult\"], Dict[int, \"ChatResult\"]]\n        The result(s) of the chat(s).\n\n    Raises\n    ------\n    RuntimeError\n        If the workflow is already running.\n    \"\"\"\n    if self.waldiez.is_async:\n        # pylint: disable=import-outside-toplevel\n        from anyio.from_thread import start_blocking_portal\n\n        with start_blocking_portal(backend=\"asyncio\") as portal:\n            return portal.call(\n                self._a_run,\n                output_path,\n                uploads_root,\n                skip_mmd,\n            )\n    if self._running is True:\n        raise RuntimeError(\"Workflow already running\")\n    self._running = True\n    file_path = output_path or self._file_path\n    try:\n        return self._run(file_path, uploads_root, skip_mmd)\n    finally:\n        self._running = False\n</code></pre>"},{"location":"reference/python/runner.html#waldiez.runner.WaldiezRunner.running","title":"<code>running: bool</code>  <code>property</code>","text":"<p>Get the running status.</p>"},{"location":"reference/python/runner.html#waldiez.runner.WaldiezRunner.waldiez","title":"<code>waldiez: Waldiez</code>  <code>property</code>","text":"<p>Get the Waldiez instance.</p>"},{"location":"reference/python/waldiez.html","title":"Waldiez","text":"<p>Waldiez data class.</p> <p>A Waldiez class contains all the information that is needed to generate and run an autogen workflow. It has the model/LLM configurations, the agent definitions and their optional additional skills to be used.</p>"},{"location":"reference/python/waldiez.html#waldiez.models.waldiez.Waldiez","title":"<code>Waldiez(flow: WaldiezFlow)</code>  <code>dataclass</code>","text":"<p>Waldiez data class.</p> <p>It contains all the information to generate and run an autogen workflow.</p>"},{"location":"reference/python/waldiez.html#waldiez.models.waldiez.Waldiez.agents","title":"<code>agents: Iterator[WaldiezAgent]</code>  <code>property</code>","text":"<p>Get the agents.</p> <p>Yields:</p> Type Description <code>WaldiezAgent</code> <p>The flow agents.</p>"},{"location":"reference/python/waldiez.html#waldiez.models.waldiez.Waldiez.cache_seed","title":"<code>cache_seed: Optional[int]</code>  <code>property</code>","text":"<p>Get the cache seed.</p>"},{"location":"reference/python/waldiez.html#waldiez.models.waldiez.Waldiez.chats","title":"<code>chats: List[Tuple[WaldiezChat, WaldiezAgent, WaldiezAgent]]</code>  <code>property</code>","text":"<p>Get the chats.</p>"},{"location":"reference/python/waldiez.html#waldiez.models.waldiez.Waldiez.description","title":"<code>description: str</code>  <code>property</code>","text":"<p>Get the flow description.</p>"},{"location":"reference/python/waldiez.html#waldiez.models.waldiez.Waldiez.from_dict","title":"<code>from_dict(data: Dict[str, Any], flow_id: Optional[str] = None, name: Optional[str] = None, description: Optional[str] = None, tags: Optional[List[str]] = None, requirements: Optional[List[str]] = None) -&gt; Waldiez</code>  <code>classmethod</code>","text":"<p>Create a Waldiez from dict.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>Dict[str, Any]</code> <p>The data.</p> required <code>flow_id</code> <code>Optional[str]</code> <p>The flow id, by default None (retrieved from data or generated).</p> <code>None</code> <code>name</code> <code>Optional[str]</code> <p>The name, by default None (retrieved from data).</p> <code>None</code> <code>description</code> <code>Optional[str]</code> <p>The description, by default None (retrieved from data).</p> <code>None</code> <code>tags</code> <code>Optional[List[str]]</code> <p>The tags, by default None (retrieved from data).</p> <code>None</code> <code>requirements</code> <code>Optional[List[str]]</code> <p>The requirements, by default None (retrieved from data).</p> <code>None</code> <p>Returns:</p> Type Description <code>Waldiez</code> <p>The Waldiez.</p> Source code in <code>waldiez/models/waldiez.py</code> <pre><code>@classmethod\ndef from_dict(\n    cls,\n    data: Dict[str, Any],\n    flow_id: Optional[str] = None,\n    name: Optional[str] = None,\n    description: Optional[str] = None,\n    tags: Optional[List[str]] = None,\n    requirements: Optional[List[str]] = None,\n) -&gt; \"Waldiez\":\n    \"\"\"Create a Waldiez from dict.\n\n    Parameters\n    ----------\n    data : Dict[str, Any]\n        The data.\n    flow_id : Optional[str], optional\n        The flow id, by default None (retrieved from data or generated).\n    name : Optional[str], optional\n        The name, by default None (retrieved from data).\n    description : Optional[str], optional\n        The description, by default None (retrieved from data).\n    tags : Optional[List[str]], optional\n        The tags, by default None (retrieved from data).\n    requirements : Optional[List[str]], optional\n        The requirements, by default None (retrieved from data).\n\n    Returns\n    -------\n    Waldiez\n        The Waldiez.\n    \"\"\"\n    flow = get_flow_data(\n        data,\n        flow_id=flow_id,\n        name=name,\n        description=description,\n        tags=tags,\n        requirements=requirements,\n    )\n    return cls(flow=WaldiezFlow.model_validate(flow))\n</code></pre>"},{"location":"reference/python/waldiez.html#waldiez.models.waldiez.Waldiez.get_flow_env_vars","title":"<code>get_flow_env_vars() -&gt; List[Tuple[str, str]]</code>","text":"<p>Get the flow environment variables.</p> <p>Returns:</p> Type Description <code>List[Tuple[str, str]]</code> <p>The environment variables for the flow.</p> Source code in <code>waldiez/models/waldiez.py</code> <pre><code>def get_flow_env_vars(self) -&gt; List[Tuple[str, str]]:\n    \"\"\"Get the flow environment variables.\n\n    Returns\n    -------\n    List[Tuple[str, str]]\n        The environment variables for the flow.\n    \"\"\"\n    env_vars: List[Tuple[str, str]] = []\n    for skill in self.skills:\n        for secret_key, secret_value in skill.secrets.items():\n            env_vars.append((secret_key, secret_value))\n    return env_vars\n</code></pre>"},{"location":"reference/python/waldiez.html#waldiez.models.waldiez.Waldiez.get_group_chat_members","title":"<code>get_group_chat_members(agent: WaldiezAgent) -&gt; List[WaldiezAgent]</code>","text":"<p>Get the chat members that connect to a group chat manager agent.</p> <p>Parameters:</p> Name Type Description Default <code>agent</code> <code>WaldiezAgent</code> <p>The agent (group chat manager).</p> required <p>Returns:</p> Type Description <code>List[WaldiezAgent]</code> <p>The group chat members.</p> Source code in <code>waldiez/models/waldiez.py</code> <pre><code>def get_group_chat_members(self, agent: WaldiezAgent) -&gt; List[WaldiezAgent]:\n    \"\"\"Get the chat members that connect to a group chat manager agent.\n\n    Parameters\n    ----------\n    agent : WaldiezAgent\n        The agent (group chat manager).\n\n    Returns\n    -------\n    List[WaldiezAgent]\n        The group chat members.\n    \"\"\"\n    if agent.agent_type != \"manager\":\n        return []\n    return self.flow.get_group_chat_members(agent.id)\n</code></pre>"},{"location":"reference/python/waldiez.html#waldiez.models.waldiez.Waldiez.get_swarm_members","title":"<code>get_swarm_members(initial_agent: WaldiezAgent) -&gt; Tuple[List[WaldiezAgent], Optional[WaldiezAgent]]</code>","text":"<p>Get the chat members that connect to a swarm agent.</p> <p>Parameters:</p> Name Type Description Default <code>initial_agent</code> <code>WaldiezAgent</code> <p>The initial agent.</p> required <p>Returns:</p> Type Description <code>Tuple[List[WaldiezAgent], Optional[WaldiezAgent]]</code> <p>The swarm agents and the user agent.</p> Source code in <code>waldiez/models/waldiez.py</code> <pre><code>def get_swarm_members(\n    self, initial_agent: WaldiezAgent\n) -&gt; Tuple[List[WaldiezAgent], Optional[WaldiezAgent]]:\n    \"\"\"Get the chat members that connect to a swarm agent.\n\n    Parameters\n    ----------\n    initial_agent : WaldiezAgent\n        The initial agent.\n\n    Returns\n    -------\n    Tuple[List[WaldiezAgent], Optional[WaldiezAgent]]\n        The swarm agents and the user agent.\n    \"\"\"\n    return self.flow.get_swarm_chat_members(initial_agent)\n</code></pre>"},{"location":"reference/python/waldiez.html#waldiez.models.waldiez.Waldiez.has_captain_agents","title":"<code>has_captain_agents: bool</code>  <code>property</code>","text":"<p>Check if the flow has captain agents.</p>"},{"location":"reference/python/waldiez.html#waldiez.models.waldiez.Waldiez.has_multimodal_agents","title":"<code>has_multimodal_agents: bool</code>  <code>property</code>","text":"<p>Check if the flow has multimodal agents.</p>"},{"location":"reference/python/waldiez.html#waldiez.models.waldiez.Waldiez.has_rag_agents","title":"<code>has_rag_agents: bool</code>  <code>property</code>","text":"<p>Check if the flow has RAG agents.</p>"},{"location":"reference/python/waldiez.html#waldiez.models.waldiez.Waldiez.is_async","title":"<code>is_async: bool</code>  <code>property</code>","text":"<p>Check if the flow is asynchronous.</p>"},{"location":"reference/python/waldiez.html#waldiez.models.waldiez.Waldiez.is_single_agent_mode","title":"<code>is_single_agent_mode: bool</code>  <code>property</code>","text":"<p>Check if the flow is single agent mode.</p>"},{"location":"reference/python/waldiez.html#waldiez.models.waldiez.Waldiez.load","title":"<code>load(waldiez_file: Union[str, Path], name: Optional[str] = None, description: Optional[str] = None, tags: Optional[List[str]] = None, requirements: Optional[List[str]] = None) -&gt; Waldiez</code>  <code>classmethod</code>","text":"<p>Load a Waldiez from a file.</p> <p>Parameters:</p> Name Type Description Default <code>waldiez_file</code> <code>Union[str, Path]</code> <p>The Waldiez file.</p> required <code>name</code> <code>Optional[str]</code> <p>The name, by default None.</p> <code>None</code> <code>description</code> <code>Optional[str]</code> <p>The description, by default None.</p> <code>None</code> <code>tags</code> <code>Optional[List[str]]</code> <p>The tags, by default None.</p> <code>None</code> <code>requirements</code> <code>Optional[List[str]]</code> <p>The requirements, by default None.</p> <code>None</code> <p>Returns:</p> Type Description <code>Waldiez</code> <p>The Waldiez.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the file is not found or invalid JSON.</p> Source code in <code>waldiez/models/waldiez.py</code> <pre><code>@classmethod\ndef load(\n    cls,\n    waldiez_file: Union[str, Path],\n    name: Optional[str] = None,\n    description: Optional[str] = None,\n    tags: Optional[List[str]] = None,\n    requirements: Optional[List[str]] = None,\n) -&gt; \"Waldiez\":\n    \"\"\"Load a Waldiez from a file.\n\n    Parameters\n    ----------\n    waldiez_file : Union[str, Path]\n        The Waldiez file.\n    name : Optional[str], optional\n        The name, by default None.\n    description : Optional[str], optional\n        The description, by default None.\n    tags : Optional[List[str]], optional\n        The tags, by default None.\n    requirements : Optional[List[str]], optional\n        The requirements, by default None.\n\n    Returns\n    -------\n    Waldiez\n        The Waldiez.\n\n    Raises\n    ------\n    ValueError\n        If the file is not found or invalid JSON.\n    \"\"\"\n    data: Dict[str, Any] = {}\n    if not Path(waldiez_file).exists():\n        raise ValueError(f\"File not found: {waldiez_file}\")\n    with open(waldiez_file, \"r\", encoding=\"utf-8\") as file:\n        try:\n            data = json.load(file)\n        except json.decoder.JSONDecodeError as error:\n            raise ValueError(f\"Invalid JSON: {waldiez_file}\") from error\n    return cls.from_dict(\n        data,\n        name=name,\n        description=description,\n        tags=tags,\n        requirements=requirements,\n    )\n</code></pre>"},{"location":"reference/python/waldiez.html#waldiez.models.waldiez.Waldiez.model_dump_json","title":"<code>model_dump_json(by_alias: bool = True, indent: Optional[int] = None) -&gt; str</code>","text":"<p>Get the model dump json.</p> <p>We use <code>by_alias=True</code> by default to use the alias (toCamel).</p> <p>Parameters:</p> Name Type Description Default <code>by_alias</code> <code>bool</code> <p>Use alias (toCamel), by default True.</p> <code>True</code> <code>indent</code> <code>Optional[int]</code> <p>The indent, by default None.</p> <code>None</code> <p>Returns:</p> Type Description <code>str</code> <p>The model dump json.</p> Source code in <code>waldiez/models/waldiez.py</code> <pre><code>def model_dump_json(\n    self, by_alias: bool = True, indent: Optional[int] = None\n) -&gt; str:\n    \"\"\"Get the model dump json.\n\n    We use `by_alias=True` by default to use the alias (toCamel).\n\n    Parameters\n    ----------\n    by_alias : bool, optional\n        Use alias (toCamel), by default True.\n    indent : Optional[int], optional\n        The indent, by default None.\n\n    Returns\n    -------\n    str\n        The model dump json.\n    \"\"\"\n    return self.flow.model_dump_json(by_alias=by_alias, indent=indent)\n</code></pre>"},{"location":"reference/python/waldiez.html#waldiez.models.waldiez.Waldiez.models","title":"<code>models: Iterator[WaldiezModel]</code>  <code>property</code>","text":"<p>Get the models.</p> <p>Yields:</p> Type Description <code>WaldiezModel</code> <p>The flow models.</p>"},{"location":"reference/python/waldiez.html#waldiez.models.waldiez.Waldiez.name","title":"<code>name: str</code>  <code>property</code>","text":"<p>Get the flow name.</p>"},{"location":"reference/python/waldiez.html#waldiez.models.waldiez.Waldiez.requirements","title":"<code>requirements: List[str]</code>  <code>property</code>","text":"<p>Get the flow requirements.</p>"},{"location":"reference/python/waldiez.html#waldiez.models.waldiez.Waldiez.skills","title":"<code>skills: Iterator[WaldiezSkill]</code>  <code>property</code>","text":"<p>Get the flow skills.</p> <p>Yields:</p> Type Description <code>WaldiezSkill</code> <p>The skills.</p>"},{"location":"reference/python/waldiez.html#waldiez.models.waldiez.Waldiez.tags","title":"<code>tags: List[str]</code>  <code>property</code>","text":"<p>Get the flow tags.</p>"},{"location":"reference/python/exporting/agents.html","title":"Agents","text":"<p>Export agents.</p>"},{"location":"reference/python/exporting/agents.html#waldiez.exporting.agent.agent_exporter.AgentExporter","title":"<code>AgentExporter(agent: WaldiezAgent, agent_names: Dict[str, str], models: Tuple[List[WaldiezModel], Dict[str, str]], chats: Tuple[List[WaldiezChat], Dict[str, str]], skill_names: Dict[str, str], is_async: bool, group_chat_members: List[WaldiezAgent], for_notebook: bool, arguments_resolver: Callable[[WaldiezAgent], List[str]], output_dir: Optional[Union[str, Path]] = None)</code>","text":"<p>               Bases: <code>BaseExporter</code>, <code>ExporterMixin</code></p> <p>Agents exporter.</p> <p>Parameters:</p> Name Type Description Default <code>agent</code> <code>WaldiezAgent</code> <p>The agent to export.</p> required <code>agent_names</code> <code>Dict[str, str]</code> <p>The agent ids to names mapping.</p> required <code>models</code> <code>Tuple[List[WaldiezModel], Dict[str, str]]</code> <p>All the models and the model ids to names mapping.</p> required <code>chats</code> <code>Tuple[List[WaldiezChat], Dict[str, str]]</code> <p>All the chats and the chat ids to names mapping.</p> required <code>skill_names</code> <code>Dict[str, str]</code> <p>The skill ids to names mapping.</p> required <code>is_async</code> <code>bool</code> <p>Whether the whole flow is async.</p> required <code>for_notebook</code> <code>bool</code> <p>Whether the exporter is for a notebook.</p> required <code>output_dir</code> <code>Optional[Union[str, Path]]</code> <p>The output directory, by default None</p> <code>None</code> Source code in <code>waldiez/exporting/agent/agent_exporter.py</code> <pre><code>def __init__(\n    self,\n    agent: WaldiezAgent,\n    agent_names: Dict[str, str],\n    models: Tuple[List[WaldiezModel], Dict[str, str]],\n    chats: Tuple[List[WaldiezChat], Dict[str, str]],\n    skill_names: Dict[str, str],\n    is_async: bool,\n    group_chat_members: List[WaldiezAgent],\n    for_notebook: bool,\n    arguments_resolver: Callable[[WaldiezAgent], List[str]],\n    output_dir: Optional[Union[str, Path]] = None,\n) -&gt; None:\n    \"\"\"Initialize the agents exporter.\n\n    Parameters\n    ----------\n    agent : WaldiezAgent\n        The agent to export.\n    agent_names : Dict[str, str]\n        The agent ids to names mapping.\n    models : Tuple[List[WaldiezModel], Dict[str, str]]\n        All the models and the model ids to names mapping.\n    chats : Tuple[List[WaldiezChat], Dict[str, str]]\n        All the chats and the chat ids to names mapping.\n    skill_names : Dict[str, str]\n        The skill ids to names mapping.\n    is_async : bool\n        Whether the whole flow is async.\n    for_notebook : bool\n        Whether the exporter is for a notebook.\n    output_dir : Optional[Union[str, Path]], optional\n        The output directory, by default None\n    \"\"\"\n    self.for_notebook = for_notebook\n    self.agent = agent\n    self.agent_names = agent_names\n    if output_dir is not None and not isinstance(output_dir, Path):\n        output_dir = Path(output_dir)\n    self.output_dir = output_dir\n    self.models = models[0]\n    self.model_names = models[1]\n    self.skill_names = skill_names\n    self.arguments_resolver = arguments_resolver\n    self.group_chat_members = group_chat_members\n    self.chats = chats\n    self.is_async = is_async\n    self._agent_name = agent_names[agent.id]\n    # content, argument, import\n    self._code_execution = get_agent_code_execution_config(\n        agent=self.agent,\n        agent_name=self._agent_name,\n        skill_names=self.skill_names,\n    )\n    # before_rag, retrieve_arg, rag_imports\n    self._rag = get_rag_user_extras(\n        agent=self.agent,\n        agent_name=self._agent_name,\n        model_names=self.model_names,\n        path_resolver=self.path_resolver,\n        serializer=self.serializer,\n    )\n    # before_manager, group_chat_arg\n    self._group_chat = get_group_manager_extras(\n        agent=self.agent,\n        agent_names=self.agent_names,\n        group_chat_members=self.group_chat_members,\n        serializer=self.serializer,\n    )\n    # before_agent, extra args, handoff_registrations\n    self._swarm = get_swarm_extras(\n        agent=self.agent,\n        agent_names=self.agent_names,\n        skill_names=self.skill_names,\n        chats=self.chats,\n        is_async=self.is_async,\n        serializer=self.serializer,\n        string_escape=self.string_escape,\n    )\n    # before_agent, termination_arg\n    self._termination = get_is_termination_message(\n        agent=self.agent, agent_name=self._agent_name\n    )\n    self._reasoning = get_reasoning_agent_extras(\n        agent=self.agent,\n        serializer=self.serializer,\n    )\n    self._captain = get_captain_agent_extras(\n        agent=self.agent,\n        agent_names=self.agent_names,\n        all_models=self.models,\n        serializer=self.serializer,\n        output_dir=self.output_dir,\n    )\n</code></pre>"},{"location":"reference/python/exporting/agents.html#waldiez.exporting.agent.agent_exporter.AgentExporter.export","title":"<code>export() -&gt; ExporterReturnType</code>","text":"<p>Export the agent.</p> <p>Returns:</p> Type Description <code>ExporterReturnType</code> <p>The exported agent.</p> Source code in <code>waldiez/exporting/agent/agent_exporter.py</code> <pre><code>def export(self) -&gt; ExporterReturnType:\n    \"\"\"Export the agent.\n\n    Returns\n    -------\n    ExporterReturnType\n        The exported agent.\n    \"\"\"\n    agent_string = self.generate() or \"\"\n    is_group_manager = self.agent.agent_type == \"group_manager\"\n    after_export = self.get_after_export() or []\n    content: Optional[str] = agent_string\n    if is_group_manager and agent_string:\n        content = None\n        # make sure the group manager is defined\n        # after the rest of the agents.\n        # to avoid issues with (for example):\n        #  'group_manager_group_chat = GroupChat(\n        #    # assistant and rag_user should be defined first\n        # '    agents=[assistant, rag_user],\n        # '    enable_clear_history=True,\n        # ...\n        after_export.append(\n            (agent_string, AgentPosition(None, AgentPositions.AFTER_ALL, 0))\n        )\n    return {\n        \"content\": content,\n        \"imports\": self.get_imports(),\n        \"environment_variables\": [],\n        \"before_export\": self.get_before_export(),\n        \"after_export\": after_export,\n    }\n</code></pre>"},{"location":"reference/python/exporting/agents.html#waldiez.exporting.agent.agent_exporter.AgentExporter.generate","title":"<code>generate() -&gt; Optional[str]</code>","text":"<p>Generate the exported agent.</p> <p>Returns:</p> Type Description <code>Optional[str]</code> <p>The exported agent.</p> Source code in <code>waldiez/exporting/agent/agent_exporter.py</code> <pre><code>    def generate(self) -&gt; Optional[str]:\n        \"\"\"Generate the exported agent.\n\n        Returns\n        -------\n        Optional[str]\n            The exported agent.\n        \"\"\"\n        agent = self.agent\n        agent_name = self._agent_name\n        retrieve_arg = self._rag[1]\n        group_chat_arg = self._group_chat[1]\n        is_termination = self._termination[0]\n        code_execution_arg = self._code_execution[1]\n        system_message_arg = self.get_system_message_arg()\n        default_auto_reply: str = \"None\"\n        if agent.data.agent_default_auto_reply:\n            default_auto_reply = (\n                f'\"{self.string_escape(agent.data.agent_default_auto_reply)}\"'\n            )\n        extras = (\n            f\"{group_chat_arg}{retrieve_arg}{self._reasoning}{self._captain}\"\n        )\n        ag2_class = self.agent.ag2_class\n        if agent.agent_type == \"swarm\":\n            # SwarmAgent is deprecated.\n            ag2_class = \"ConversableAgent\"\n        agent_str = f\"\"\"{agent_name} = {ag2_class}(\n    name=\"{agent_name}\",\n    description=\"{agent.description}\"{system_message_arg},\n    human_input_mode=\"{agent.data.human_input_mode}\",\n    max_consecutive_auto_reply={agent.data.max_consecutive_auto_reply},\n    default_auto_reply={default_auto_reply},\n    code_execution_config={code_execution_arg},\n    is_termination_msg={is_termination},{extras}\n\"\"\"\n        if self._swarm[1]:\n            agent_str += self._swarm[1]\n        # e.g. llm_config=...\n        other_args = self.arguments_resolver(agent)\n        if other_args:\n            agent_str += \",\\n\".join(other_args)\n        if not agent_str.endswith(\"\\n\"):\n            agent_str += \"\\n\"\n        agent_str += \")\"\n        return agent_str\n</code></pre>"},{"location":"reference/python/exporting/agents.html#waldiez.exporting.agent.agent_exporter.AgentExporter.get_after_export","title":"<code>get_after_export() -&gt; Optional[List[Tuple[str, Union[ExportPosition, AgentPosition]]]]</code>","text":"<p>Generate the content after the main export.</p> <p>Returns:</p> Type Description <code>Optional[List[Tuple[str, Union[ExportPosition, AgentPosition]]]]</code> <p>The exported content after the main export and its position.</p> Source code in <code>waldiez/exporting/agent/agent_exporter.py</code> <pre><code>def get_after_export(\n    self,\n) -&gt; Optional[List[Tuple[str, Union[ExportPosition, AgentPosition]]]]:\n    \"\"\"Generate the content after the main export.\n\n    Returns\n    -------\n    Optional[List[Tuple[str, Union[ExportPosition, AgentPosition]]]]\n        The exported content after the main export and its position.\n    \"\"\"\n    after_agent_string = \"\"\n    if self._swarm[2]:\n        after_agent_string += self._swarm[2]\n    if after_agent_string:\n        return [\n            (\n                after_agent_string,\n                AgentPosition(self.agent, AgentPositions.AFTER_ALL),\n            )\n        ]\n    return None\n</code></pre>"},{"location":"reference/python/exporting/agents.html#waldiez.exporting.agent.agent_exporter.AgentExporter.get_before_export","title":"<code>get_before_export() -&gt; Optional[List[Tuple[str, Union[ExportPosition, AgentPosition]]]]</code>","text":"<p>Generate the content before the main export.</p> <p>Returns:</p> Type Description <code>Optional[List[Tuple[str, Union[ExportPosition, AgentPosition]]]]</code> <p>The exported content before the main export and its position.</p> Source code in <code>waldiez/exporting/agent/agent_exporter.py</code> <pre><code>def get_before_export(\n    self,\n) -&gt; Optional[List[Tuple[str, Union[ExportPosition, AgentPosition]]]]:\n    \"\"\"Generate the content before the main export.\n\n    Returns\n    -------\n    Optional[List[Tuple[str, Union[ExportPosition, AgentPosition]]]]\n        The exported content before the main export and its position.\n    \"\"\"\n    before_agent_string = \"\"\n    if self._code_execution[0] and self._code_execution[2]:\n        before_agent_string += self._code_execution[0]\n    if self._termination[1]:\n        before_agent_string += self._termination[1]\n    if self._group_chat[0]:\n        before_agent_string += self._group_chat[0]\n    if self._rag[0]:\n        before_agent_string += self._rag[0]\n    if self._swarm[0]:\n        before_agent_string += self._swarm[0]\n    if before_agent_string:\n        return [\n            (\n                before_agent_string,\n                AgentPosition(self.agent, AgentPositions.BEFORE),\n            )\n        ]\n    return None\n</code></pre>"},{"location":"reference/python/exporting/agents.html#waldiez.exporting.agent.agent_exporter.AgentExporter.get_imports","title":"<code>get_imports() -&gt; Optional[List[Tuple[str, ImportPosition]]]</code>","text":"<p>Get the imports.</p> <p>Returns:</p> Type Description <code>Optional[Tuple[str, ImportPosition]]</code> <p>The imports.</p> Source code in <code>waldiez/exporting/agent/agent_exporter.py</code> <pre><code>def get_imports(self) -&gt; Optional[List[Tuple[str, ImportPosition]]]:\n    \"\"\"Get the imports.\n\n    Returns\n    -------\n    Optional[Tuple[str, ImportPosition]]\n        The imports.\n    \"\"\"\n    position = ImportPosition.THIRD_PARTY\n    # default imports based on the agent class.\n    agent_imports = self.agent.ag2_imports\n    # if code execution is enabled, update the imports.\n    if self._code_execution[2]:\n        agent_imports.add(self._code_execution[2])\n    # if RAG is enabled, update the imports.\n    if self._rag[2]:\n        agent_imports.update(self._rag[2])\n    # if the agent has skills, add the register_function import.\n    if self.agent.data.skills:\n        agent_imports.add(\"from autogen import register_function\")\n    return sorted(\n        [(import_string, position) for import_string in agent_imports],\n        key=lambda x: x[0],\n    )\n</code></pre>"},{"location":"reference/python/exporting/agents.html#waldiez.exporting.agent.agent_exporter.AgentExporter.get_system_message_arg","title":"<code>get_system_message_arg() -&gt; str</code>","text":"<p>Get the system message argument.</p> <p>Returns:</p> Type Description <code>str</code> <p>The system message argument.</p> Source code in <code>waldiez/exporting/agent/agent_exporter.py</code> <pre><code>def get_system_message_arg(self) -&gt; str:\n    \"\"\"Get the system message argument.\n\n    Returns\n    -------\n    str\n        The system message argument.\n    \"\"\"\n    if not self.agent.data.system_message:\n        return \"\"\n    system_message = self.string_escape(self.agent.data.system_message)\n    return \",\\n    system_message=\" + f'\"{system_message}\"'\n</code></pre>"},{"location":"reference/python/exporting/base.html","title":"Base","text":"<p>Base classes, mixins, and utilities for exporting data.</p> <p>Each exporter should inherit from the <code>BaseExporter</code> class and implement the <code>export</code> method. The <code>export</code> method should return the exported content as an instance of the <code>ExporterReturnType</code> typed dictionary.</p> <p>               Bases: <code>TypedDict</code></p> <p>Exporter Return Type.</p> <p>Attributes:</p> Name Type Description <code>content</code> <code>Optional[str]</code> <p>The exported content.</p> <code>imports</code> <code>Optional[List[Tuple[str, ImportPosition]]]</code> <p>The additional imports required for the exported content.</p> <code>environment_variables</code> <code>Optional[List[Tuple[str, str]]]</code> <p>The environment variables to set.</p> <code>before_export</code> <code>Optional[List[Tuple[str, Union[ExportPosition, AgentPosition]]]]</code> <p>The exported content before the main export and its position.</p> <code>after_export</code> <code>Optional[List[Tuple[str, Union[ExportPosition, AgentPosition]]]]</code> <p>The exported content after the main export and its position.</p> <p>               Bases: <code>ABC</code></p> <p>Base exporter.</p> <p>Parameters:</p> Name Type Description Default <code>*args</code> <code>Any</code> <p>The positional arguments.</p> <code>()</code> <code>**kwargs</code> <code>Any</code> <p>The keyword arguments.</p> <code>{}</code> Source code in <code>waldiez/exporting/base/base_exporter.py</code> <pre><code>@abc.abstractmethod\ndef __init__(self, *args: Any, **kwargs: Any) -&gt; None:\n    \"\"\"Initialize the exporter.\n\n    Parameters\n    ----------\n    *args : Any\n        The positional arguments.\n    **kwargs : Any\n        The keyword arguments.\n    \"\"\"\n    raise NotImplementedError(\"Method not implemented.\")\n</code></pre> <p>Export position enum.</p> <p>Import position enum.</p> <p>Agent position generation.</p> <p>The base exporter mixin.</p> <p>Generic utils to be used for exporting.</p>"},{"location":"reference/python/exporting/base.html#waldiez.exporting.base.base_exporter.BaseExporter.export","title":"<code>export() -&gt; ExporterReturnType</code>  <code>abstractmethod</code>","text":"<p>Export the content.</p> <p>Returns:</p> Type Description <code>ExporterReturnType</code> <p>The exported content.</p> Source code in <code>waldiez/exporting/base/base_exporter.py</code> <pre><code>@abc.abstractmethod\ndef export(self) -&gt; ExporterReturnType:\n    \"\"\"Export the content.\n\n    Returns\n    -------\n    ExporterReturnType\n        The exported content.\n    \"\"\"\n</code></pre>"},{"location":"reference/python/exporting/base.html#waldiez.exporting.base.base_exporter.BaseExporter.generate","title":"<code>generate() -&gt; Optional[str]</code>","text":"<p>Generate the main export.</p> <p>Returns:</p> Type Description <code>str</code> <p>The exported content.</p> Source code in <code>waldiez/exporting/base/base_exporter.py</code> <pre><code>def generate(\n    self,\n) -&gt; Optional[str]:\n    \"\"\"Generate the main export.\n\n    Returns\n    -------\n    str\n        The exported content.\n    \"\"\"\n</code></pre>"},{"location":"reference/python/exporting/base.html#waldiez.exporting.base.base_exporter.BaseExporter.get_after_export","title":"<code>get_after_export() -&gt; Optional[List[Tuple[str, Union[ExportPosition, AgentPosition]]]]</code>","text":"<p>Generate the content after the main export.</p> <p>Returns:</p> Type Description <code>Optional[List[Tuple[str, Union[ExportPosition, AgentPosition]]]]</code> <p>The exported content after the main export and its position.</p> Source code in <code>waldiez/exporting/base/base_exporter.py</code> <pre><code>def get_after_export(\n    self,\n) -&gt; Optional[List[Tuple[str, Union[ExportPosition, AgentPosition]]]]:\n    \"\"\"Generate the content after the main export.\n\n    Returns\n    -------\n    Optional[List[Tuple[str, Union[ExportPosition, AgentPosition]]]]\n        The exported content after the main export and its position.\n    \"\"\"\n</code></pre>"},{"location":"reference/python/exporting/base.html#waldiez.exporting.base.base_exporter.BaseExporter.get_before_export","title":"<code>get_before_export() -&gt; Optional[List[Tuple[str, Union[ExportPosition, AgentPosition]]]]</code>","text":"<p>Generate the content before the main export.</p> <p>Returns:</p> Type Description <code>Optional[List[Tuple[str, Union[ExportPosition, AgentPosition]]]]</code> <p>The exported content before the main export and its position.</p> Source code in <code>waldiez/exporting/base/base_exporter.py</code> <pre><code>def get_before_export(\n    self,\n) -&gt; Optional[List[Tuple[str, Union[ExportPosition, AgentPosition]]]]:\n    \"\"\"Generate the content before the main export.\n\n    Returns\n    -------\n    Optional[List[Tuple[str, Union[ExportPosition, AgentPosition]]]]\n        The exported content before the main export and its position.\n    \"\"\"\n</code></pre>"},{"location":"reference/python/exporting/base.html#waldiez.exporting.base.base_exporter.BaseExporter.get_environment_variables","title":"<code>get_environment_variables() -&gt; Optional[List[Tuple[str, str]]]</code>","text":"<p>Get the environment variables to set.</p> <p>Returns:</p> Type Description <code>Optional[Set[Tuple[str, str]]]</code> <p>The environment variables to set if any.</p> Source code in <code>waldiez/exporting/base/base_exporter.py</code> <pre><code>def get_environment_variables(self) -&gt; Optional[List[Tuple[str, str]]]:\n    \"\"\"Get the environment variables to set.\n\n    Returns\n    -------\n    Optional[Set[Tuple[str, str]]]\n        The environment variables to set if any.\n    \"\"\"\n</code></pre>"},{"location":"reference/python/exporting/base.html#waldiez.exporting.base.base_exporter.BaseExporter.get_imports","title":"<code>get_imports() -&gt; Optional[List[Tuple[str, ImportPosition]]]</code>","text":"<p>Generate the imports string for the exporter.</p> <p>Returns:</p> Type Description <code>Optional[Tuple[str, ImportPosition]]</code> <p>The exported imports and the position of the imports.</p> Source code in <code>waldiez/exporting/base/base_exporter.py</code> <pre><code>def get_imports(self) -&gt; Optional[List[Tuple[str, ImportPosition]]]:\n    \"\"\"Generate the imports string for the exporter.\n\n    Returns\n    -------\n    Optional[Tuple[str, ImportPosition]]\n        The exported imports and the position of the imports.\n    \"\"\"\n</code></pre>"},{"location":"reference/python/exporting/base.html#waldiez.exporting.base.export_position.ExportPosition","title":"<code>ExportPosition(position: ExportPositions, order: int = 0)</code>  <code>dataclass</code>","text":"<p>Export position.</p> <p>Optionally, the order can be provided to sort the exported content.</p>"},{"location":"reference/python/exporting/base.html#waldiez.exporting.base.export_position.ExportPositions","title":"<code>ExportPositions</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Export position.</p> <p>Attributes:</p> Name Type Description <code>TOP</code> <code>int</code> <p>The top of the export (name, comments etc.)</p> <code>IMPORTS</code> <code>int</code> <p>The imports section.</p> <code>MODELS</code> <code>int</code> <p>The models section (define the llm_configs).</p> <code>SKILLS</code> <code>int</code> <p>The skills section (generate the skill files, and import them)</p> <code>AGENTS</code> <code>int</code> <p>The agents section.</p> <code>CHATS</code> <code>int</code> <p>The chats section (e.g. agent.initiate_chat, or initiate_chats)</p> <code>BOTTOM</code> <code>int</code> <p>The bottom part of the export (like the main function and calling it).</p>"},{"location":"reference/python/exporting/base.html#waldiez.exporting.base.import_position.ImportPosition","title":"<code>ImportPosition</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Import position.</p> <p>Attributes:</p> Name Type Description <code>BUILTINS</code> <code>int</code> <p>The top of the import (builtins)</p> <code>THIRD_PARTY</code> <code>int</code> <p>The third party imports.</p> <code>LOCAL</code> <code>int</code> <p>The local imports.</p>"},{"location":"reference/python/exporting/base.html#waldiez.exporting.base.agent_position.AgentPosition","title":"<code>AgentPosition(agent: Optional[WaldiezAgent], position: AgentPositions, order: int = 0)</code>  <code>dataclass</code>","text":"<p>Agent position.</p> <p>Attributes:</p> Name Type Description <code>agent</code> <code>Optional[WaldiezAgent]</code> <p>The agent.</p> <code>position</code> <code>AgentPositions</code> <p>The position.</p> <code>order</code> <code>int</code> <p>The order of the agent position.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the position is not \"BEFORE_ALL\" or \"AFTER_ALL\" and the agent is not provided.</p>"},{"location":"reference/python/exporting/base.html#waldiez.exporting.base.agent_position.AgentPositions","title":"<code>AgentPositions</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Agent positions.</p> <p>Attributes:</p> Name Type Description <code>BEFORE_ALL</code> <code>int</code> <p>Before all agents.</p> <code>BEFORE</code> <code>int</code> <p>Before the agent.</p> <code>AS_ARGUMENT</code> <code>int</code> <p>As an argument of the agent's initialization.</p> <code>AFTER</code> <code>int</code> <p>After the agent.</p> <code>AFTER_ALL</code> <code>int</code> <p>After all agents.</p>"},{"location":"reference/python/exporting/base.html#waldiez.exporting.base.mixin.ExporterMixin","title":"<code>ExporterMixin</code>","text":"<p>Static methods to be used by the exporters.</p>"},{"location":"reference/python/exporting/base.html#waldiez.exporting.base.mixin.ExporterMixin.comment","title":"<code>comment(for_notebook: bool, hashtags: int = 1) -&gt; str</code>  <code>staticmethod</code>","text":"<p>Comment the text.</p> <p>Parameters:</p> Name Type Description Default <code>for_notebook</code> <code>bool</code> <p>Whether the comment is for a notebook or not.</p> required <code>hashtags</code> <code>int</code> <p>The number of hashtags (for notebooks), by default 1.</p> <code>1</code> <p>Returns:</p> Type Description <code>str</code> <p>The commented text.</p> Source code in <code>waldiez/exporting/base/mixin.py</code> <pre><code>@staticmethod\ndef comment(for_notebook: bool, hashtags: int = 1) -&gt; str:\n    \"\"\"Comment the text.\n\n    Parameters\n    ----------\n    for_notebook : bool\n        Whether the comment is for a notebook or not.\n    hashtags : int, optional\n        The number of hashtags (for notebooks), by default 1.\n\n    Returns\n    -------\n    str\n        The commented text.\n    \"\"\"\n    return comment(for_notebook=for_notebook, hashtags=hashtags)\n</code></pre>"},{"location":"reference/python/exporting/base.html#waldiez.exporting.base.mixin.ExporterMixin.get_comment","title":"<code>get_comment(key: CommentKey, for_notebook: bool) -&gt; str</code>  <code>staticmethod</code>","text":"<p>Get the comment string.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>CommentKey</code> <p>The comment key.</p> required <code>for_notebook</code> <code>bool</code> <p>Whether the comment is for a notebook or not.</p> required <p>Returns:</p> Type Description <code>str</code> <p>The comment string.</p> Source code in <code>waldiez/exporting/base/mixin.py</code> <pre><code>@staticmethod\ndef get_comment(key: CommentKey, for_notebook: bool) -&gt; str:\n    \"\"\"Get the comment string.\n\n    Parameters\n    ----------\n    key : CommentKey\n        The comment key.\n    for_notebook : bool\n        Whether the comment is for a notebook or not.\n\n    Returns\n    -------\n    str\n        The comment string.\n    \"\"\"\n    return get_comment(key=key, for_notebook=for_notebook)\n</code></pre>"},{"location":"reference/python/exporting/base.html#waldiez.exporting.base.mixin.ExporterMixin.get_valid_instance_name","title":"<code>get_valid_instance_name(instance: Tuple[str, str], current_names: Dict[str, str], prefix: str = 'w', max_length: int = 64) -&gt; Dict[str, str]</code>  <code>staticmethod</code>","text":"<p>Get a valid instance name.</p> <p>Parameters:</p> Name Type Description Default <code>instance</code> <code>Tuple[str, str]</code> <p>The instance id and possible name.</p> required <code>current_names</code> <code>Dict[str, str]</code> <p>The current names.</p> required <code>prefix</code> <code>str</code> <p>The prefix for the instance name, by default \"w\".</p> <code>'w'</code> <code>max_length</code> <code>int</code> <p>The maximum length of the variable name, by default 64</p> <code>64</code> <p>Returns:</p> Type Description <code>Dict[str, str]</code> <p>The updated dictionary of current names.</p> Source code in <code>waldiez/exporting/base/mixin.py</code> <pre><code>@staticmethod\ndef get_valid_instance_name(\n    instance: Tuple[str, str],\n    current_names: Dict[str, str],\n    prefix: str = \"w\",\n    max_length: int = 64,\n) -&gt; Dict[str, str]:\n    \"\"\"Get a valid instance name.\n\n    Parameters\n    ----------\n    instance : Tuple[str, str]\n        The instance id and possible name.\n    current_names : Dict[str, str]\n        The current names.\n    prefix : str, optional\n        The prefix for the instance name, by default \"w\".\n    max_length : int, optional\n        The maximum length of the variable name, by default 64\n\n    Returns\n    -------\n    Dict[str, str]\n        The updated dictionary of current names.\n    \"\"\"\n    return get_valid_instance_name(\n        instance=instance,\n        current_names=current_names,\n        prefix=prefix,\n        max_length=max_length,\n    )\n</code></pre>"},{"location":"reference/python/exporting/base.html#waldiez.exporting.base.mixin.ExporterMixin.path_resolver","title":"<code>path_resolver(path: str) -&gt; str</code>  <code>staticmethod</code>","text":"<p>Get the path string.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path.</p> required <p>Returns:</p> Type Description <code>str</code> <p>The path string.</p> Source code in <code>waldiez/exporting/base/mixin.py</code> <pre><code>@staticmethod\ndef path_resolver(path: str) -&gt; str:\n    \"\"\"Get the path string.\n\n    Parameters\n    ----------\n    path : str\n        The path.\n\n    Returns\n    -------\n    str\n        The path string.\n    \"\"\"\n    return get_path_string(path)\n</code></pre>"},{"location":"reference/python/exporting/base.html#waldiez.exporting.base.mixin.ExporterMixin.serializer","title":"<code>serializer(item: Any, tabs: int = 1) -&gt; str</code>  <code>staticmethod</code>","text":"<p>Get the string representation of an item.</p> <p>Parameters:</p> Name Type Description Default <code>item</code> <code>Any</code> <p>The item.</p> required <code>tabs</code> <code>int</code> <p>The number of tabs for indentation, by default 1.</p> <code>1</code> <p>Returns:</p> Type Description <code>str</code> <p>The string representation of the item.</p> Source code in <code>waldiez/exporting/base/mixin.py</code> <pre><code>@staticmethod\ndef serializer(item: Any, tabs: int = 1) -&gt; str:\n    \"\"\"Get the string representation of an item.\n\n    Parameters\n    ----------\n    item : Any\n        The item.\n    tabs : int, optional\n        The number of tabs for indentation, by default 1.\n\n    Returns\n    -------\n    str\n        The string representation of the item.\n    \"\"\"\n    return get_item_string(item=item, tabs=tabs)\n</code></pre>"},{"location":"reference/python/exporting/base.html#waldiez.exporting.base.mixin.ExporterMixin.string_escape","title":"<code>string_escape(string: str) -&gt; str</code>  <code>staticmethod</code>","text":"<p>Get a string with escaped quotes and newlines.</p> <p>Parameters:</p> Name Type Description Default <code>string</code> <code>str</code> <p>The original string.</p> required <p>Returns:</p> Type Description <code>str</code> <p>The escaped string.</p> Source code in <code>waldiez/exporting/base/mixin.py</code> <pre><code>@staticmethod\ndef string_escape(string: str) -&gt; str:\n    \"\"\"Get a string with escaped quotes and newlines.\n\n    Parameters\n    ----------\n    string : str\n        The original string.\n\n    Returns\n    -------\n    str\n        The escaped string.\n    \"\"\"\n    return get_escaped_string(string)\n</code></pre>"},{"location":"reference/python/exporting/base.html#waldiez.exporting.base.utils.CommentKey","title":"<code>CommentKey = Literal['agents', 'imports', 'skills', 'models', 'nested', 'run', 'logging']</code>  <code>module-attribute</code>","text":"<p>Possible keys for comments.</p>"},{"location":"reference/python/exporting/base.html#waldiez.exporting.base.utils.comment","title":"<code>comment(for_notebook: bool, hashtags: int = 1) -&gt; str</code>","text":"<p>Get the comment string.</p> <p>Parameters:</p> Name Type Description Default <code>for_notebook</code> <code>bool</code> <p>Whether the comment is for a notebook or not.</p> required <code>hashtags</code> <code>int</code> <p>The number of hashtags (for notebooks), by default 1.</p> <code>1</code> <p>Returns:</p> Type Description <code>str</code> <p>The comment string.</p> Example <pre><code>&gt;&gt;&gt; comment(True, 2)\n'## '\n&gt;&gt;&gt; comment(False)\n'# '\n</code></pre> Source code in <code>waldiez/exporting/base/utils/comments.py</code> <pre><code>def comment(for_notebook: bool, hashtags: int = 1) -&gt; str:\n    \"\"\"Get the comment string.\n\n    Parameters\n    ----------\n    for_notebook : bool\n        Whether the comment is for a notebook or not.\n    hashtags : int, optional\n        The number of hashtags (for notebooks), by default 1.\n\n    Returns\n    -------\n    str\n        The comment string.\n    Example\n    -------\n    ```python\n    &gt;&gt;&gt; comment(True, 2)\n    '## '\n    &gt;&gt;&gt; comment(False)\n    '# '\n    ```\n    \"\"\"\n    content = \"# \"\n    if for_notebook:\n        content += \"#\" * hashtags + \" \"\n    return content\n</code></pre>"},{"location":"reference/python/exporting/base.html#waldiez.exporting.base.utils.comments","title":"<code>comments</code>","text":"<p>Utilities for comments.</p> <p>Functions:</p> Name Description <code>comment</code> <p>Get a comment string.</p> <code>get_comment</code> <p>Get a comment string for some common keys (notebook headings).</p>"},{"location":"reference/python/exporting/base.html#waldiez.exporting.base.utils.comments.CommentKey","title":"<code>CommentKey = Literal['agents', 'imports', 'skills', 'models', 'nested', 'run', 'logging']</code>  <code>module-attribute</code>","text":"<p>Possible keys for comments.</p>"},{"location":"reference/python/exporting/base.html#waldiez.exporting.base.utils.comments.comment","title":"<code>comment(for_notebook: bool, hashtags: int = 1) -&gt; str</code>","text":"<p>Get the comment string.</p> <p>Parameters:</p> Name Type Description Default <code>for_notebook</code> <code>bool</code> <p>Whether the comment is for a notebook or not.</p> required <code>hashtags</code> <code>int</code> <p>The number of hashtags (for notebooks), by default 1.</p> <code>1</code> <p>Returns:</p> Type Description <code>str</code> <p>The comment string.</p> Example <pre><code>&gt;&gt;&gt; comment(True, 2)\n'## '\n&gt;&gt;&gt; comment(False)\n'# '\n</code></pre> Source code in <code>waldiez/exporting/base/utils/comments.py</code> <pre><code>def comment(for_notebook: bool, hashtags: int = 1) -&gt; str:\n    \"\"\"Get the comment string.\n\n    Parameters\n    ----------\n    for_notebook : bool\n        Whether the comment is for a notebook or not.\n    hashtags : int, optional\n        The number of hashtags (for notebooks), by default 1.\n\n    Returns\n    -------\n    str\n        The comment string.\n    Example\n    -------\n    ```python\n    &gt;&gt;&gt; comment(True, 2)\n    '## '\n    &gt;&gt;&gt; comment(False)\n    '# '\n    ```\n    \"\"\"\n    content = \"# \"\n    if for_notebook:\n        content += \"#\" * hashtags + \" \"\n    return content\n</code></pre>"},{"location":"reference/python/exporting/base.html#waldiez.exporting.base.utils.comments.get_comment","title":"<code>get_comment(key: CommentKey, for_notebook: bool) -&gt; str</code>","text":"<p>Get a comment string for some common keys.</p> <p>The key is a heading (in a notebook) or just a comment (in a script).</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>agents | imports | skills | models | nested | run | logging</code> <p>The key.</p> required <code>for_notebook</code> <code>bool</code> <p>Whether the comment is for a notebook.</p> required <p>Returns:</p> Type Description <code>str</code> <p>The comment string.</p> Example <pre><code>&gt;&gt;&gt; get_comment(\"agents\", True)\n\n'## Agents'\n&gt;&gt;&gt; get_comment(\"skills\", False)\n\n'# Skills'\n</code></pre> Source code in <code>waldiez/exporting/base/utils/comments.py</code> <pre><code>def get_comment(\n    key: CommentKey,\n    for_notebook: bool,\n) -&gt; str:\n    \"\"\"Get a comment string for some common keys.\n\n    The key is a heading (in a notebook) or just a comment (in a script).\n\n    Parameters\n    ----------\n    key : \"agents\"|\"imports\"|\"skills\"|\"models\"|\"nested\"|\"run\"|\"logging\"\n        The key.\n    for_notebook : bool\n        Whether the comment is for a notebook.\n\n    Returns\n    -------\n    str\n        The comment string.\n\n    Example\n    -------\n    ```python\n    &gt;&gt;&gt; get_comment(\"agents\", True)\n\n    '## Agents'\n    &gt;&gt;&gt; get_comment(\"skills\", False)\n\n    '# Skills'\n    ```\n    \"\"\"\n    # pylint: disable=too-many-return-statements\n    if key == \"agents\":\n        return \"\\n\" + comment(for_notebook, 2) + \"Agents\\n\"\n    if key == \"imports\":\n        return \"\\n\" + comment(for_notebook, 2) + \"Imports\\n\"\n    if key == \"skills\":\n        return \"\\n\" + comment(for_notebook, 2) + \"Skills\\n\"\n    if key == \"models\":\n        return \"\\n\" + comment(for_notebook, 2) + \"Models\\n\"\n    if key == \"nested\":\n        return \"\\n\" + comment(for_notebook, 2) + \"Nested Chats\\n\"\n    if key == \"run\":\n        return \"\\n\" + comment(for_notebook, 2) + \"Run the flow\\n\"\n    if key == \"logging\":\n        return \"\\n\" + comment(for_notebook, 2) + \"Start Logging\\n\"\n    return comment(for_notebook)\n</code></pre>"},{"location":"reference/python/exporting/base.html#waldiez.exporting.base.utils.get_comment","title":"<code>get_comment(key: CommentKey, for_notebook: bool) -&gt; str</code>","text":"<p>Get a comment string for some common keys.</p> <p>The key is a heading (in a notebook) or just a comment (in a script).</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>agents | imports | skills | models | nested | run | logging</code> <p>The key.</p> required <code>for_notebook</code> <code>bool</code> <p>Whether the comment is for a notebook.</p> required <p>Returns:</p> Type Description <code>str</code> <p>The comment string.</p> Example <pre><code>&gt;&gt;&gt; get_comment(\"agents\", True)\n\n'## Agents'\n&gt;&gt;&gt; get_comment(\"skills\", False)\n\n'# Skills'\n</code></pre> Source code in <code>waldiez/exporting/base/utils/comments.py</code> <pre><code>def get_comment(\n    key: CommentKey,\n    for_notebook: bool,\n) -&gt; str:\n    \"\"\"Get a comment string for some common keys.\n\n    The key is a heading (in a notebook) or just a comment (in a script).\n\n    Parameters\n    ----------\n    key : \"agents\"|\"imports\"|\"skills\"|\"models\"|\"nested\"|\"run\"|\"logging\"\n        The key.\n    for_notebook : bool\n        Whether the comment is for a notebook.\n\n    Returns\n    -------\n    str\n        The comment string.\n\n    Example\n    -------\n    ```python\n    &gt;&gt;&gt; get_comment(\"agents\", True)\n\n    '## Agents'\n    &gt;&gt;&gt; get_comment(\"skills\", False)\n\n    '# Skills'\n    ```\n    \"\"\"\n    # pylint: disable=too-many-return-statements\n    if key == \"agents\":\n        return \"\\n\" + comment(for_notebook, 2) + \"Agents\\n\"\n    if key == \"imports\":\n        return \"\\n\" + comment(for_notebook, 2) + \"Imports\\n\"\n    if key == \"skills\":\n        return \"\\n\" + comment(for_notebook, 2) + \"Skills\\n\"\n    if key == \"models\":\n        return \"\\n\" + comment(for_notebook, 2) + \"Models\\n\"\n    if key == \"nested\":\n        return \"\\n\" + comment(for_notebook, 2) + \"Nested Chats\\n\"\n    if key == \"run\":\n        return \"\\n\" + comment(for_notebook, 2) + \"Run the flow\\n\"\n    if key == \"logging\":\n        return \"\\n\" + comment(for_notebook, 2) + \"Start Logging\\n\"\n    return comment(for_notebook)\n</code></pre>"},{"location":"reference/python/exporting/base.html#waldiez.exporting.base.utils.get_escaped_string","title":"<code>get_escaped_string(string: str) -&gt; str</code>","text":"<p>Get a string with escaped quotes and newlines.</p> <p>Parameters:</p> Name Type Description Default <code>string</code> <code>str</code> <p>The original string.</p> required <p>Returns:</p> Type Description <code>str</code> <p>The escaped string.</p> Source code in <code>waldiez/exporting/base/utils/naming.py</code> <pre><code>def get_escaped_string(string: str) -&gt; str:\n    \"\"\"Get a string with escaped quotes and newlines.\n\n    Parameters\n    ----------\n    string : str\n        The original string.\n\n    Returns\n    -------\n    str\n        The escaped string.\n    \"\"\"\n    return string.replace('\"', '\\\\\"').replace(\"\\n\", \"\\\\n\")\n</code></pre>"},{"location":"reference/python/exporting/base.html#waldiez.exporting.base.utils.get_item_string","title":"<code>get_item_string(item: Any, tabs: int = 1) -&gt; str</code>","text":"<p>Convert an item to a formatted string with given indentation.</p> <p>Parameters:</p> Name Type Description Default <code>item</code> <code>Any</code> <p>The item to convert.</p> required <code>tabs</code> <code>int</code> <p>The number of tabs, by default 1.</p> <code>1</code> <p>Returns:</p> Type Description <code>str</code> <p>The formatted string.</p> Example <pre><code>&gt;&gt;&gt; obj = {\"a\": 1, \"b\": [1, 2, 3]}\n&gt;&gt;&gt; get_item_string(obj)\n{\n    \"a\": 1,\n    \"b\": [\n        1,\n        2,\n        3\n    ]\n}\n&gt;&gt;&gt; obj = {\"a\": 1, \"b\": [1, 2, 3], \"c\": {\"d\": 4}}\n&gt;&gt;&gt; get_item_string(obj, 2)\n{\n        \"a\": 1,\n        \"b\": [\n            1,\n            2,\n            3\n        ],\n        \"c\": {\n            \"d\": 4\n        }\n}\n</code></pre> Source code in <code>waldiez/exporting/base/utils/to_string.py</code> <pre><code>def get_item_string(item: Any, tabs: int = 1) -&gt; str:\n    \"\"\"Convert an item to a formatted string with given indentation.\n\n    Parameters\n    ----------\n    item : Any\n        The item to convert.\n    tabs : int, optional\n        The number of tabs, by default 1.\n\n    Returns\n    -------\n    str\n        The formatted string.\n\n    Example\n    -------\n    ```python\n    &gt;&gt;&gt; obj = {\"a\": 1, \"b\": [1, 2, 3]}\n    &gt;&gt;&gt; get_item_string(obj)\n    {\n        \"a\": 1,\n        \"b\": [\n            1,\n            2,\n            3\n        ]\n    }\n    &gt;&gt;&gt; obj = {\"a\": 1, \"b\": [1, 2, 3], \"c\": {\"d\": 4}}\n    &gt;&gt;&gt; get_item_string(obj, 2)\n    {\n            \"a\": 1,\n            \"b\": [\n                1,\n                2,\n                3\n            ],\n            \"c\": {\n                \"d\": 4\n            }\n    }\n    ```\n    \"\"\"\n    indent = \" \" * 4 * tabs  # Number of spaces corresponding to the tabs\n    next_indent = (\n        \" \" * 4 * (tabs + 1)\n    )  # Number of spaces corresponding to the next tab level\n    if isinstance(item, dict):\n        items = []\n        for key, value in item.items():\n            items.append(\n                f'{next_indent}\"{key}\": {get_item_string(value, tabs + 1)}'\n            )\n        # python3.10? f-string expression part cannot include a backslash\n        items_string = \",\\n\".join(items)\n        to_return = \"\\n\" + items_string + \"\\n\" + indent\n        return f\"{{{to_return}}}\"\n    if isinstance(item, list):\n        items = []\n        for sub_item in item:\n            items.append(f\"{next_indent}{get_item_string(sub_item, tabs + 1)}\")\n        # python3.10? f-string expression part cannot include a backslash\n        items_string = \",\\n\".join(items)\n        to_return = \"\\n\" + items_string + \"\\n\" + indent\n        return f\"[{to_return}]\"\n\n    if isinstance(item, str):\n        if item.startswith(\"r'\") or item.startswith('r\"'):\n            return item\n        return f'\"{item}\"'\n\n    if item is None:\n        return \"None\"\n    return str(item)\n</code></pre>"},{"location":"reference/python/exporting/base.html#waldiez.exporting.base.utils.get_path_string","title":"<code>get_path_string(path: str) -&gt; str</code>","text":"<p>Get the path string.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The string to check.</p> required <p>Returns:</p> Type Description <code>str</code> <p>The local path string.</p> Source code in <code>waldiez/exporting/base/utils/path_check.py</code> <pre><code>def get_path_string(path: str) -&gt; str:\n    \"\"\"Get the path string.\n\n    Parameters\n    ----------\n    path : str\n        The string to check.\n\n    Returns\n    -------\n    str\n        The local path string.\n    \"\"\"\n    resolved = _check_local_path(path)\n    if not resolved:\n        return _get_raw_path_string(path)\n    return _get_raw_path_string(resolved)\n</code></pre>"},{"location":"reference/python/exporting/base.html#waldiez.exporting.base.utils.get_valid_instance_name","title":"<code>get_valid_instance_name(instance: Tuple[str, str], current_names: Dict[str, str], prefix: str = 'w', max_length: int = MAX_VARIABLE_LENGTH) -&gt; Dict[str, str]</code>","text":"<p>Get a valid instance name.</p> <p>If the instance id is already in the current names nothing is done. If the name already exists in the current names,     the name is updated (with an index suffix).</p> <p>Parameters:</p> Name Type Description Default <code>instance</code> <code>Tuple[str, str]</code> <p>The instance id and possible name.</p> required <code>current_names</code> <code>Dict[str, str]</code> <p>The current names.</p> required <code>prefix</code> <code>str</code> <p>The prefix to use if the name starts with a digit, if the name is already in the current names, or if the name is already in the current names with an index suffix.</p> <code>'w'</code> <code>max_length</code> <code>int</code> <p>The maximum length of the variable name.</p> <code>MAX_VARIABLE_LENGTH</code> <p>Returns:</p> Type Description <code>Dict[str, str]</code> <p>The updated names.</p> Source code in <code>waldiez/exporting/base/utils/naming.py</code> <pre><code>def get_valid_instance_name(\n    instance: Tuple[str, str],\n    current_names: Dict[str, str],\n    prefix: str = \"w\",\n    max_length: int = MAX_VARIABLE_LENGTH,\n) -&gt; Dict[str, str]:\n    \"\"\"Get a valid instance name.\n\n    If the instance id is already in the current names nothing is done.\n    If the name already exists in the current names,\n        the name is updated (with an index suffix).\n\n    Parameters\n    ----------\n    instance : Tuple[str, str]\n        The instance id and possible name.\n    current_names : Dict[str, str]\n        The current names.\n    prefix : str, optional\n        The prefix to use if the name starts with a digit,\n        if the name is already in the current names,\n        or if the name is already in the current names with an index suffix.\n    max_length : int, optional\n        The maximum length of the variable name.\n\n    Returns\n    -------\n    Dict[str, str]\n        The updated names.\n    \"\"\"\n    instance_id, possible_name = instance[0], instance[1][:max_length]\n    if instance_id in current_names:\n        # already in the current names (it's id)\n        return current_names\n    new_names = current_names.copy()\n    name = get_valid_python_variable_name(\n        possible_name, prefix=prefix, max_length=max_length\n    )\n    if name in current_names.values():\n        name = f\"{prefix}_{name}\"\n    if name in current_names.values():\n        index = 1\n        while f\"{name}_{index}\" in current_names.values():\n            index += 1\n        name = f\"{name}_{index}\"\n    new_names[instance_id] = name\n    return new_names\n</code></pre>"},{"location":"reference/python/exporting/base.html#waldiez.exporting.base.utils.naming","title":"<code>naming</code>","text":"<p>Utilities for naming.</p> <p>Functions:</p> Name Description <code>get_valid_python_variable_name</code> <p>Make sure a string is a valid Python variable name.</p> <code>get_valid_instance_name</code> <p>Get a valid instance name.</p> <code>get_escaped_string</code> <p>Get a string with escaped quotes and newlines.</p>"},{"location":"reference/python/exporting/base.html#waldiez.exporting.base.utils.naming.get_escaped_string","title":"<code>get_escaped_string(string: str) -&gt; str</code>","text":"<p>Get a string with escaped quotes and newlines.</p> <p>Parameters:</p> Name Type Description Default <code>string</code> <code>str</code> <p>The original string.</p> required <p>Returns:</p> Type Description <code>str</code> <p>The escaped string.</p> Source code in <code>waldiez/exporting/base/utils/naming.py</code> <pre><code>def get_escaped_string(string: str) -&gt; str:\n    \"\"\"Get a string with escaped quotes and newlines.\n\n    Parameters\n    ----------\n    string : str\n        The original string.\n\n    Returns\n    -------\n    str\n        The escaped string.\n    \"\"\"\n    return string.replace('\"', '\\\\\"').replace(\"\\n\", \"\\\\n\")\n</code></pre>"},{"location":"reference/python/exporting/base.html#waldiez.exporting.base.utils.naming.get_valid_instance_name","title":"<code>get_valid_instance_name(instance: Tuple[str, str], current_names: Dict[str, str], prefix: str = 'w', max_length: int = MAX_VARIABLE_LENGTH) -&gt; Dict[str, str]</code>","text":"<p>Get a valid instance name.</p> <p>If the instance id is already in the current names nothing is done. If the name already exists in the current names,     the name is updated (with an index suffix).</p> <p>Parameters:</p> Name Type Description Default <code>instance</code> <code>Tuple[str, str]</code> <p>The instance id and possible name.</p> required <code>current_names</code> <code>Dict[str, str]</code> <p>The current names.</p> required <code>prefix</code> <code>str</code> <p>The prefix to use if the name starts with a digit, if the name is already in the current names, or if the name is already in the current names with an index suffix.</p> <code>'w'</code> <code>max_length</code> <code>int</code> <p>The maximum length of the variable name.</p> <code>MAX_VARIABLE_LENGTH</code> <p>Returns:</p> Type Description <code>Dict[str, str]</code> <p>The updated names.</p> Source code in <code>waldiez/exporting/base/utils/naming.py</code> <pre><code>def get_valid_instance_name(\n    instance: Tuple[str, str],\n    current_names: Dict[str, str],\n    prefix: str = \"w\",\n    max_length: int = MAX_VARIABLE_LENGTH,\n) -&gt; Dict[str, str]:\n    \"\"\"Get a valid instance name.\n\n    If the instance id is already in the current names nothing is done.\n    If the name already exists in the current names,\n        the name is updated (with an index suffix).\n\n    Parameters\n    ----------\n    instance : Tuple[str, str]\n        The instance id and possible name.\n    current_names : Dict[str, str]\n        The current names.\n    prefix : str, optional\n        The prefix to use if the name starts with a digit,\n        if the name is already in the current names,\n        or if the name is already in the current names with an index suffix.\n    max_length : int, optional\n        The maximum length of the variable name.\n\n    Returns\n    -------\n    Dict[str, str]\n        The updated names.\n    \"\"\"\n    instance_id, possible_name = instance[0], instance[1][:max_length]\n    if instance_id in current_names:\n        # already in the current names (it's id)\n        return current_names\n    new_names = current_names.copy()\n    name = get_valid_python_variable_name(\n        possible_name, prefix=prefix, max_length=max_length\n    )\n    if name in current_names.values():\n        name = f\"{prefix}_{name}\"\n    if name in current_names.values():\n        index = 1\n        while f\"{name}_{index}\" in current_names.values():\n            index += 1\n        name = f\"{name}_{index}\"\n    new_names[instance_id] = name\n    return new_names\n</code></pre>"},{"location":"reference/python/exporting/base.html#waldiez.exporting.base.utils.naming.get_valid_python_variable_name","title":"<code>get_valid_python_variable_name(possible: str, prefix: str = 'w', max_length: int = MAX_VARIABLE_LENGTH) -&gt; str</code>","text":"<p>Get a valid Python variable name from a possible name.</p> <p>Parameters:</p> Name Type Description Default <code>possible</code> <code>str</code> <p>The possible name.</p> required <code>prefix</code> <code>str</code> <p>The prefix to use if the name starts with a digit or special character</p> <code>'w'</code> <code>max_length</code> <code>int</code> <p>The maximum length of the variable name.</p> <code>MAX_VARIABLE_LENGTH</code> <p>Returns:</p> Type Description <code>str</code> <p>The valid Python variable name.</p> Source code in <code>waldiez/exporting/base/utils/naming.py</code> <pre><code>def get_valid_python_variable_name(\n    possible: str,\n    prefix: str = \"w\",\n    max_length: int = MAX_VARIABLE_LENGTH,\n) -&gt; str:\n    \"\"\"Get a valid Python variable name from a possible name.\n\n    Parameters\n    ----------\n    possible : str\n        The possible name.\n\n    prefix : str, optional\n        The prefix to use if the name starts with a digit or special character\n\n    max_length : int, optional\n        The maximum length of the variable name.\n\n    Returns\n    -------\n    str\n        The valid Python variable name.\n    \"\"\"\n\n    def replacement(match: re.Match[str]) -&gt; str:\n        \"\"\"Get the replacement for the match.\n\n        Parameters\n        ----------\n        match : re.Match[str]\n            The match.\n\n        Returns\n        -------\n        str\n            The replacement\n        \"\"\"\n        if match.group(0) in [\"-&gt;\", \"=&gt;\"]:\n            return \"to\"\n        if match.group(0) in [\"&lt;-\", \"&lt;=\"]:\n            return \"from\"\n        if re.match(r\"\\W|^(?=\\d)\", match.group(0)):\n            return \"_\"\n        return match.group(0)\n\n    possible = re.sub(r\"-&gt;|=&gt;|&lt;-|&lt;=|\\W|^(?=\\d)\", replacement, possible)[\n        :max_length\n    ].lower()\n\n    if not possible:\n        return prefix + \"_\"\n    if possible.startswith(\"_\"):\n        return f\"{prefix}{possible}\"\n    if possible[0].isdigit():\n        return f\"{prefix}_{possible}\"\n    return possible\n</code></pre>"},{"location":"reference/python/exporting/base.html#waldiez.exporting.base.utils.path_check","title":"<code>path_check</code>","text":"<p>Path check utility functions.</p>"},{"location":"reference/python/exporting/base.html#waldiez.exporting.base.utils.path_check.get_path_string","title":"<code>get_path_string(path: str) -&gt; str</code>","text":"<p>Get the path string.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The string to check.</p> required <p>Returns:</p> Type Description <code>str</code> <p>The local path string.</p> Source code in <code>waldiez/exporting/base/utils/path_check.py</code> <pre><code>def get_path_string(path: str) -&gt; str:\n    \"\"\"Get the path string.\n\n    Parameters\n    ----------\n    path : str\n        The string to check.\n\n    Returns\n    -------\n    str\n        The local path string.\n    \"\"\"\n    resolved = _check_local_path(path)\n    if not resolved:\n        return _get_raw_path_string(path)\n    return _get_raw_path_string(resolved)\n</code></pre>"},{"location":"reference/python/exporting/base.html#waldiez.exporting.base.utils.to_string","title":"<code>to_string</code>","text":"<p>Utilities for converting items to strings.</p> <p>To be used with dicts and/or lists.</p>"},{"location":"reference/python/exporting/base.html#waldiez.exporting.base.utils.to_string.get_item_string","title":"<code>get_item_string(item: Any, tabs: int = 1) -&gt; str</code>","text":"<p>Convert an item to a formatted string with given indentation.</p> <p>Parameters:</p> Name Type Description Default <code>item</code> <code>Any</code> <p>The item to convert.</p> required <code>tabs</code> <code>int</code> <p>The number of tabs, by default 1.</p> <code>1</code> <p>Returns:</p> Type Description <code>str</code> <p>The formatted string.</p> Example <pre><code>&gt;&gt;&gt; obj = {\"a\": 1, \"b\": [1, 2, 3]}\n&gt;&gt;&gt; get_item_string(obj)\n{\n    \"a\": 1,\n    \"b\": [\n        1,\n        2,\n        3\n    ]\n}\n&gt;&gt;&gt; obj = {\"a\": 1, \"b\": [1, 2, 3], \"c\": {\"d\": 4}}\n&gt;&gt;&gt; get_item_string(obj, 2)\n{\n        \"a\": 1,\n        \"b\": [\n            1,\n            2,\n            3\n        ],\n        \"c\": {\n            \"d\": 4\n        }\n}\n</code></pre> Source code in <code>waldiez/exporting/base/utils/to_string.py</code> <pre><code>def get_item_string(item: Any, tabs: int = 1) -&gt; str:\n    \"\"\"Convert an item to a formatted string with given indentation.\n\n    Parameters\n    ----------\n    item : Any\n        The item to convert.\n    tabs : int, optional\n        The number of tabs, by default 1.\n\n    Returns\n    -------\n    str\n        The formatted string.\n\n    Example\n    -------\n    ```python\n    &gt;&gt;&gt; obj = {\"a\": 1, \"b\": [1, 2, 3]}\n    &gt;&gt;&gt; get_item_string(obj)\n    {\n        \"a\": 1,\n        \"b\": [\n            1,\n            2,\n            3\n        ]\n    }\n    &gt;&gt;&gt; obj = {\"a\": 1, \"b\": [1, 2, 3], \"c\": {\"d\": 4}}\n    &gt;&gt;&gt; get_item_string(obj, 2)\n    {\n            \"a\": 1,\n            \"b\": [\n                1,\n                2,\n                3\n            ],\n            \"c\": {\n                \"d\": 4\n            }\n    }\n    ```\n    \"\"\"\n    indent = \" \" * 4 * tabs  # Number of spaces corresponding to the tabs\n    next_indent = (\n        \" \" * 4 * (tabs + 1)\n    )  # Number of spaces corresponding to the next tab level\n    if isinstance(item, dict):\n        items = []\n        for key, value in item.items():\n            items.append(\n                f'{next_indent}\"{key}\": {get_item_string(value, tabs + 1)}'\n            )\n        # python3.10? f-string expression part cannot include a backslash\n        items_string = \",\\n\".join(items)\n        to_return = \"\\n\" + items_string + \"\\n\" + indent\n        return f\"{{{to_return}}}\"\n    if isinstance(item, list):\n        items = []\n        for sub_item in item:\n            items.append(f\"{next_indent}{get_item_string(sub_item, tabs + 1)}\")\n        # python3.10? f-string expression part cannot include a backslash\n        items_string = \",\\n\".join(items)\n        to_return = \"\\n\" + items_string + \"\\n\" + indent\n        return f\"[{to_return}]\"\n\n    if isinstance(item, str):\n        if item.startswith(\"r'\") or item.startswith('r\"'):\n            return item\n        return f'\"{item}\"'\n\n    if item is None:\n        return \"None\"\n    return str(item)\n</code></pre>"},{"location":"reference/python/exporting/chats.html","title":"Chats","text":"<p>Chats exporter.</p>"},{"location":"reference/python/exporting/chats.html#waldiez.exporting.chats.chats_exporter.ChatsExporter","title":"<code>ChatsExporter(get_swarm_members: Callable[[WaldiezAgent], Tuple[List[WaldiezAgent], Optional[WaldiezAgent]]], all_agents: List[WaldiezAgent], agent_names: Dict[str, str], all_chats: List[WaldiezChat], chat_names: Dict[str, str], main_chats: List[Tuple[WaldiezChat, WaldiezAgent, WaldiezAgent]], for_notebook: bool, is_async: bool)</code>","text":"<p>               Bases: <code>BaseExporter</code>, <code>ExporterMixin</code></p> <p>Chats exporter.</p> <p>Parameters:</p> Name Type Description Default <code>get_swarm_members</code> <code>Callable[</code> <pre><code>[WaldiezAgent],\nTuple[List[WaldiezAgent], Optional[WaldiezAgent]]\n</code></pre> <p>] The function to use to resolve the swarm members.</p> required <code>all_agents</code> <code>List[WaldiezAgent]</code> <p>All the agents in the flow.</p> required <code>agent_names</code> <code>Dict[str, str]</code> <p>A mapping of agent id to agent name.</p> required <code>all_chats</code> <code>List[WaldiezChat]</code> <p>All the chats in the flow.</p> required <code>chat_names</code> <code>Dict[str, str]</code> <p>A mapping of chat id to chat name.</p> required <code>main_chats</code> <code>List[Tuple[WaldiezChat, WaldiezAgent, WaldiezAgent]]</code> <p>The main chats in the flow.</p> required <code>for_notebook</code> <code>bool</code> <p>Whether the export is for a notebook.</p> required <code>is_async</code> <code>bool</code> <p>Whether the chat is asynchronous.</p> required Source code in <code>waldiez/exporting/chats/chats_exporter.py</code> <pre><code>def __init__(\n    self,\n    get_swarm_members: Callable[\n        [WaldiezAgent], Tuple[List[WaldiezAgent], Optional[WaldiezAgent]]\n    ],\n    all_agents: List[WaldiezAgent],\n    agent_names: Dict[str, str],\n    all_chats: List[WaldiezChat],\n    chat_names: Dict[str, str],\n    main_chats: List[Tuple[WaldiezChat, WaldiezAgent, WaldiezAgent]],\n    for_notebook: bool,\n    is_async: bool,\n):\n    \"\"\"Initialize the chats exporter.\n\n    Parameters\n    ----------\n    get_swarm_members : Callable[\n            [WaldiezAgent],\n            Tuple[List[WaldiezAgent], Optional[WaldiezAgent]]\n        ]\n        The function to use to resolve the swarm members.\n    all_agents : List[WaldiezAgent]\n        All the agents in the flow.\n    agent_names : Dict[str, str]\n        A mapping of agent id to agent name.\n    all_chats : List[WaldiezChat]\n        All the chats in the flow.\n    chat_names : Dict[str, str]\n        A mapping of chat id to chat name.\n    main_chats : List[Tuple[WaldiezChat, WaldiezAgent, WaldiezAgent]]\n        The main chats in the flow.\n    for_notebook : bool\n        Whether the export is for a notebook.\n    is_async : bool\n        Whether the chat is asynchronous.\n    \"\"\"\n    self.all_agents = all_agents\n    self.agent_names = agent_names\n    self.main_chats = main_chats\n    self.all_chats = all_chats\n    self.chat_names = chat_names\n    self.get_swarm_members = get_swarm_members\n    self.for_notebook = for_notebook\n    self.is_async = is_async\n    self._chat_string = None\n    self._before_chat = None\n    self._generated = False\n</code></pre>"},{"location":"reference/python/exporting/chats.html#waldiez.exporting.chats.chats_exporter.ChatsExporter.export","title":"<code>export() -&gt; ExporterReturnType</code>","text":"<p>Export the chats.</p> <p>Returns:</p> Type Description <code>ExporterReturnType</code> <p>The exported chats, the imports, the before export strings, the after export strings, and the environment variables.</p> Source code in <code>waldiez/exporting/chats/chats_exporter.py</code> <pre><code>def export(self) -&gt; ExporterReturnType:\n    \"\"\"Export the chats.\n\n    Returns\n    -------\n    ExporterReturnType\n        The exported chats, the imports, the before export strings,\n        the after export strings, and the environment variables.\n    \"\"\"\n    exported_string = self.generate()\n    imports = self.get_imports()\n    before_export = self.get_before_export()\n    after_export = self.get_after_export()\n    return {\n        \"content\": exported_string,\n        \"imports\": imports,\n        \"before_export\": before_export,\n        \"after_export\": after_export,\n        \"environment_variables\": None,\n    }\n</code></pre>"},{"location":"reference/python/exporting/chats.html#waldiez.exporting.chats.chats_exporter.ChatsExporter.generate","title":"<code>generate() -&gt; str</code>","text":"<p>Generate the chats content.</p> <p>Returns:</p> Type Description <code>str</code> <p>The chats content.</p> Source code in <code>waldiez/exporting/chats/chats_exporter.py</code> <pre><code>def generate(self) -&gt; str:\n    \"\"\"Generate the chats content.\n\n    Returns\n    -------\n    str\n        The chats content.\n    \"\"\"\n    if self._generated is False:\n        self._export_chats()\n        self._generated = True\n    return self._chat_string or \"\"\n</code></pre>"},{"location":"reference/python/exporting/chats.html#waldiez.exporting.chats.chats_exporter.ChatsExporter.get_after_export","title":"<code>get_after_export() -&gt; Optional[List[Tuple[str, Union[ExportPosition, AgentPosition]]]]</code>","text":"<p>Generate the content after the main export.</p> <p>Returns:</p> Type Description <code>Optional[List[Tuple[str, Union[ExportPosition, AgentPosition]]]]</code> <p>The exported content after the main export and its position.</p> Source code in <code>waldiez/exporting/chats/chats_exporter.py</code> <pre><code>def get_after_export(\n    self,\n) -&gt; Optional[List[Tuple[str, Union[ExportPosition, AgentPosition]]]]:\n    \"\"\"Generate the content after the main export.\n\n    Returns\n    -------\n    Optional[List[Tuple[str, Union[ExportPosition, AgentPosition]]]]\n        The exported content after the main export and its position.\n    \"\"\"\n    after: List[Tuple[str, Union[ExportPosition, AgentPosition]]] = []\n    # not per agent, we might have references to agents not yet defined.\n    # let's use one string for all nested chat registrations\n    nested_chat_registrations = \"\"\n    for agent in self.all_agents:\n        if agent.agent_type != \"swarm\":\n            registration_string = export_nested_chat_registration(\n                agent=agent,\n                all_chats=self.all_chats,\n                chat_names=self.chat_names,\n                agent_names=self.agent_names,\n                string_escape=self.string_escape,\n                serializer=self.serializer,\n                is_async=self.is_async,\n            )\n            if registration_string:\n                nested_chat_registrations += \"\\n\" + registration_string\n    if nested_chat_registrations:\n        # let's place it before the chats (after all agents are defined)\n        after.append(\n            (\n                nested_chat_registrations,\n                AgentPosition(None, AgentPositions.AFTER_ALL, 2),\n            )\n        )\n    return after\n</code></pre>"},{"location":"reference/python/exporting/chats.html#waldiez.exporting.chats.chats_exporter.ChatsExporter.get_before_export","title":"<code>get_before_export() -&gt; Optional[List[Tuple[str, Union[ExportPosition, AgentPosition]]]]</code>","text":"<p>Generate the content before the main export.</p> <p>Returns:</p> Type Description <code>Optional[List[Tuple[str, Union[ExportPosition, AgentPosition]]]]</code> <p>The exported content before the main export and its position.</p> Source code in <code>waldiez/exporting/chats/chats_exporter.py</code> <pre><code>def get_before_export(\n    self,\n) -&gt; Optional[List[Tuple[str, Union[ExportPosition, AgentPosition]]]]:\n    \"\"\"Generate the content before the main export.\n\n    Returns\n    -------\n    Optional[List[Tuple[str, Union[ExportPosition, AgentPosition]]]]\n        The exported content before the main export and its position.\n    \"\"\"\n    before: List[Tuple[str, Union[ExportPosition, AgentPosition]]] = []\n    if self._generated is False:\n        self._export_chats()\n        self._generated = True\n    if self._before_chat:\n        before.append(\n            (self._before_chat, ExportPosition(ExportPositions.CHATS))\n        )\n    return before\n</code></pre>"},{"location":"reference/python/exporting/chats.html#waldiez.exporting.chats.chats_exporter.ChatsExporter.get_imports","title":"<code>get_imports() -&gt; Optional[List[Tuple[str, ImportPosition]]]</code>","text":"<p>Get the imports string.</p> <p>Returns:</p> Type Description <code>str</code> <p>The imports string.</p> Source code in <code>waldiez/exporting/chats/chats_exporter.py</code> <pre><code>def get_imports(self) -&gt; Optional[List[Tuple[str, ImportPosition]]]:\n    \"\"\"Get the imports string.\n\n    Returns\n    -------\n    str\n        The imports string.\n    \"\"\"\n    if len(self.main_chats) == 1:\n        _, sender, recipient = self.main_chats[0]\n        if sender.agent_type == \"swarm\" or recipient.agent_type == \"swarm\":\n            import_string = \"from autogen import initiate_swarm_chat\"\n            if self.is_async:\n                import_string = \"from autogen import a_initiate_swarm_chat\"\n            return [(import_string, ImportPosition.THIRD_PARTY)]\n        # no additional imports, it is `sender.initiate_chat(....)`\n        return None\n    if self.is_async:\n        import_string = (\n            \"from autogen.agentchat.chat import a_initiate_chats\"\n        )\n    else:\n        import_string = \"from autogen.agentchat.chat import initiate_chats\"\n    return [(import_string, ImportPosition.THIRD_PARTY)]\n</code></pre>"},{"location":"reference/python/exporting/flow.html","title":"Flow","text":"<p>Flow Exporter class.</p> <ul> <li>We gather all the exports (models, skills, agents, chats).</li> </ul> <ul> <li>We first add all the imports from the above exports.</li> <li>If we have skills, we include their imports.     (their files were generated when exporting the skills).</li> <li>Then, we write the all model configs.</li> <li>Next, we write the agent definitions     (using the <code>llm_config=...</code> argument from the model exports).</li> <li>If additional (nested_chats) are defined,     we write their registrations after all agents are defined.</li> <li>Next, we write the chat definitions     (using the agent names from the agent exports).</li> <li>If exporting to py,     we add the <code>run</code> function and the <code>def main()</code> to call the run function.</li> <li>If the flow is async, the <code>run</code> function is async.</li> </ul>"},{"location":"reference/python/exporting/flow.html#waldiez.exporting.flow.flow_exporter.FlowExporter","title":"<code>FlowExporter(waldiez: Waldiez, for_notebook: bool, output_dir: Optional[Union[str, Path]] = None)</code>","text":"<p>               Bases: <code>BaseExporter</code>, <code>ExporterMixin</code></p> <p>Flow exporter.</p> Source code in <code>waldiez/exporting/flow/flow_exporter.py</code> <pre><code>def __init__(\n    self,\n    waldiez: Waldiez,\n    for_notebook: bool,\n    output_dir: Optional[Union[str, Path]] = None,\n) -&gt; None:\n    \"\"\"Initialize the flow exporter.\"\"\"\n    self.waldiez = waldiez\n    self.for_notebook = for_notebook\n    if output_dir is not None and not isinstance(output_dir, Path):\n        output_dir = Path(output_dir).resolve()\n    self.output_dir = output_dir\n    self.initialize()\n</code></pre>"},{"location":"reference/python/exporting/flow.html#waldiez.exporting.flow.flow_exporter.FlowExporter.initialize","title":"<code>initialize() -&gt; None</code>","text":"<p>Get all the names in the flow.</p> <p>We need to make sure that no duplicate names are used, and that the names can be used as python variables.</p> Source code in <code>waldiez/exporting/flow/flow_exporter.py</code> <pre><code>def initialize(\n    self,\n) -&gt; None:\n    \"\"\"Get all the names in the flow.\n\n    We need to make sure that no duplicate names are used,\n    and that the names can be used as python variables.\n    \"\"\"\n    unique_names = ensure_unique_names(\n        self.waldiez,\n        self.get_valid_instance_name,\n    )\n    self.flow_name = unique_names[\"flow_name\"]\n    self.agents = unique_names[\"agents\"]\n    self.models = unique_names[\"models\"]\n    self.skills = unique_names[\"skills\"]\n    self.chats = unique_names[\"chats\"]\n    self.agent_names = unique_names[\"agent_names\"]\n    self.model_names = unique_names[\"model_names\"]\n    self.skill_names = unique_names[\"skill_names\"]\n    self.chat_names = unique_names[\"chat_names\"]\n</code></pre>"},{"location":"reference/python/exporting/flow.html#waldiez.exporting.flow.flow_exporter.FlowExporter.export_flow","title":"<code>export_flow() -&gt; ExporterReturnType</code>","text":"<p>Export the flow.</p> <p>Returns:</p> Type Description <code>ExporterReturnType</code> <p>The exported flow.</p> Source code in <code>waldiez/exporting/flow/flow_exporter.py</code> <pre><code>def export_flow(self) -&gt; ExporterReturnType:\n    \"\"\"Export the flow.\n\n    Returns\n    -------\n    ExporterReturnType\n        The exported flow.\n    \"\"\"\n    models_output = self.export_models()\n    skills_output = self.export_skills()\n    chats_output = self.export_chats()\n    env_vars = self.gather_environment_variables(\n        model_env_vars=models_output[\"environment_variables\"],\n        skill_env_vars=skills_output[\"environment_variables\"],\n        chat_env_vars=chats_output[\"environment_variables\"],\n    )\n    before_export = self.gather_exports(\n        model_export=models_output[\"before_export\"],\n        skill_export=skills_output[\"before_export\"],\n        chat_export=chats_output[\"before_export\"],\n    )\n    after_export = self.gather_exports(\n        model_export=models_output[\"after_export\"],\n        skill_export=skills_output[\"after_export\"],\n        chat_export=chats_output[\"after_export\"],\n    )\n    # agents last (to make sure we have any needed arguments)\n    # like `llm_config=...` from the models\n    agents_output = self.export_agents(\n        before_export=before_export,\n        after_export=after_export,\n    )\n    imports = gather_imports(\n        model_imports=models_output[\"imports\"],\n        skill_imports=skills_output[\"imports\"],\n        chat_imports=chats_output[\"imports\"],\n        agent_imports=agents_output[\"imports\"],\n    )\n    if agents_output[\"environment_variables\"]:\n        env_vars.extend(agents_output[\"environment_variables\"])\n    if agents_output[\"before_export\"]:\n        before_export.extend(agents_output[\"before_export\"])\n    if agents_output[\"after_export\"]:\n        after_export.extend(agents_output[\"after_export\"])\n    all_imports = (\n        get_the_imports_string(imports, is_async=self.waldiez.is_async),\n        ImportPosition.LOCAL,\n    )\n    before_chats_export = chats_output[\"before_export\"] or []\n    content_before_chats = [\n        x[0]\n        for x in before_chats_export\n        if isinstance(x[1], ExportPosition)\n        and x[1].position == ExportPositions.CHATS\n    ]\n    before_chats = \"\\n\".join(content_before_chats)\n    content = self.merge_exports(\n        imports=all_imports,\n        models_output=models_output[\"content\"] or \"\",\n        skills_output=skills_output[\"content\"] or \"\",\n        agents_content=agents_output[\"content\"] or \"\",\n        chats_content=chats_output[\"content\"] or \"\",\n        before_chats=before_chats,\n    )\n    return {\n        \"content\": content,\n        \"imports\": [all_imports],\n        \"after_export\": after_export,\n        \"before_export\": before_export,\n        \"environment_variables\": env_vars,\n    }\n</code></pre>"},{"location":"reference/python/exporting/flow.html#waldiez.exporting.flow.flow_exporter.FlowExporter.merge_exports","title":"<code>merge_exports(imports: Tuple[str, ImportPosition], models_output: str, skills_output: str, agents_content: str, chats_content: str, before_chats: str) -&gt; str</code>","text":"<p>Merge all the export contents.</p> <p>Parameters:</p> Name Type Description Default <code>imports</code> <code>Tuple[str, ImportPosition]</code> <p>The imports.</p> required <code>models_output</code> <code>str</code> <p>The models output.</p> required <code>skills_output</code> <code>str</code> <p>The skills output.</p> required <code>agents_content</code> <code>str</code> <p>The agents content.</p> required <code>chats_content</code> <code>str</code> <p>The chats content.</p> required <code>before_chats</code> <code>str</code> required <p>Returns:</p> Type Description <code>str</code> <p>The merged export contents.</p> Source code in <code>waldiez/exporting/flow/flow_exporter.py</code> <pre><code>def merge_exports(\n    self,\n    imports: Tuple[str, ImportPosition],\n    models_output: str,\n    skills_output: str,\n    agents_content: str,\n    chats_content: str,\n    before_chats: str,\n) -&gt; str:\n    \"\"\"Merge all the export contents.\n\n    Parameters\n    ----------\n    imports : Tuple[str, ImportPosition]\n        The imports.\n    models_output : str\n        The models output.\n    skills_output : str\n        The skills output.\n    agents_content : str\n        The agents content.\n    chats_content : str\n        The chats content.\n    before_chats : str\n\n    Returns\n    -------\n    str\n        The merged export contents.\n    \"\"\"\n    is_async = self.waldiez.is_async\n    cache_seed = self.waldiez.cache_seed\n    content = (\n        get_py_content_start(self.waldiez)\n        if not self.for_notebook\n        else get_ipynb_content_start(self.waldiez, comment=self.comment)\n    )\n    content += self.get_comment(\"imports\", self.for_notebook) + \"\\n\"\n    content += imports[0] + \"\\n\"\n    content += get_np_no_nep50_handle() + \"\\n\"\n    content += self.get_comment(\"logging\", self.for_notebook) + \"\\n\"\n    content += get_start_logging(is_async=is_async, tabs=0) + \"\\n\"\n    content += \"start_logging()\\n\\n\"\n    if models_output:\n        content += self.get_comment(\"models\", self.for_notebook) + \"\\n\"\n        content += models_output + \"\\n\"\n    if skills_output:\n        content += self.get_comment(\"skills\", self.for_notebook) + \"\\n\"\n        content += skills_output + \"\\n\"\n    if agents_content:\n        content += self.get_comment(\"agents\", self.for_notebook) + \"\\n\"\n        content += agents_content + \"\\n\"\n    if before_chats:\n        content += before_chats + \"\\n\"\n    content += get_sqlite_out(is_async=is_async) + \"\\n\"\n    content += get_stop_logging(tabs=0, is_async=is_async) + \"\\n\"\n    content += self.get_comment(\"run\", self.for_notebook) + \"\\n\"\n    after_run = get_after_run_content(\n        waldiez=self.waldiez,\n        agent_names=self.agent_names,\n        tabs=0 if self.for_notebook else 1,\n    )\n    if self.for_notebook is False:\n        content += get_def_main(\n            chats_content,\n            after_run=after_run,\n            is_async=self.waldiez.is_async,\n            cache_seed=cache_seed,\n        )\n    else:\n        if chats_content.startswith(\"\\n\"):\n            chats_content = chats_content[1:]\n        content += (\n            \"\\n\" + f\"with Cache.disk(cache_seed={cache_seed}) as cache:\"\n            \"\\n\" + chats_content + \"\\n\"\n        )\n        if is_async:\n            content += \"await stop_logging()\"\n        else:\n            content += \"stop_logging()\"\n            content += after_run\n    content = content.replace(\"\\n\\n\\n\\n\", \"\\n\\n\\n\")\n    return content\n</code></pre>"},{"location":"reference/python/exporting/flow.html#waldiez.exporting.flow.flow_exporter.FlowExporter.gather_environment_variables","title":"<code>gather_environment_variables(model_env_vars: Optional[List[Tuple[str, str]]], skill_env_vars: Optional[List[Tuple[str, str]]], chat_env_vars: Optional[List[Tuple[str, str]]]) -&gt; List[Tuple[str, str]]</code>  <code>staticmethod</code>","text":"<p>Gather all the environment variables.</p> <p>Parameters:</p> Name Type Description Default <code>model_env_vars</code> <code>Optional[List[Tuple[str, str]]]</code> <p>The model environment variables.</p> required <code>skill_env_vars</code> <code>Optional[List[Tuple[str, str]]]</code> <p>The skill environment variables.</p> required <code>chat_env_vars</code> <code>Optional[List[Tuple[str, str]]]</code> <p>The chat environment variables.</p> required <p>Returns:</p> Type Description <code>List[Tuple[str, str]]</code> <p>The gathered environment variables.</p> Source code in <code>waldiez/exporting/flow/flow_exporter.py</code> <pre><code>@staticmethod\ndef gather_environment_variables(\n    model_env_vars: Optional[List[Tuple[str, str]]],\n    skill_env_vars: Optional[List[Tuple[str, str]]],\n    chat_env_vars: Optional[List[Tuple[str, str]]],\n) -&gt; List[Tuple[str, str]]:\n    \"\"\"\n    Gather all the environment variables.\n\n    Parameters\n    ----------\n    model_env_vars : Optional[List[Tuple[str, str]]]\n        The model environment variables.\n    skill_env_vars : Optional[List[Tuple[str, str]]]\n        The skill environment variables.\n    chat_env_vars : Optional[List[Tuple[str, str]]]\n        The chat environment variables.\n\n    Returns\n    -------\n    List[Tuple[str, str]]\n        The gathered environment variables.\n    \"\"\"\n    all_env_vars: List[Tuple[str, str]] = []\n    if model_env_vars:\n        all_env_vars.extend(model_env_vars)\n    if skill_env_vars:\n        all_env_vars.extend(skill_env_vars)\n    if chat_env_vars:\n        all_env_vars.extend(chat_env_vars)\n    return all_env_vars\n</code></pre>"},{"location":"reference/python/exporting/flow.html#waldiez.exporting.flow.flow_exporter.FlowExporter.gather_exports","title":"<code>gather_exports(model_export: Optional[List[Tuple[str, Union[ExportPosition, AgentPosition]]]], skill_export: Optional[List[Tuple[str, Union[ExportPosition, AgentPosition]]]], chat_export: Optional[List[Tuple[str, Union[ExportPosition, AgentPosition]]]]) -&gt; List[Tuple[str, Union[ExportPosition, AgentPosition]]]</code>  <code>staticmethod</code>","text":"<p>Gather all (but agents) the before or after exports.</p> <p>Parameters:</p> Name Type Description Default <code>model_export</code> <code>Optional[List[Tuple[str, Union[ExportPosition, AgentPosition]]]]</code> <p>The model exports.</p> required <code>skill_export</code> <code>Optional[List[Tuple[str, Union[ExportPosition, AgentPosition]]]]</code> <p>The skill exports.</p> required <code>chat_export</code> <code>Optional[List[Tuple[str, Union[ExportPosition, AgentPosition]]]]</code> <p>The chat exports.</p> required <p>Returns:</p> Type Description <code>List[Tuple[str, Union[ExportPosition, AgentPosition]]]</code> <p>The gathered exports.</p> Source code in <code>waldiez/exporting/flow/flow_exporter.py</code> <pre><code>@staticmethod\ndef gather_exports(\n    model_export: Optional[\n        List[Tuple[str, Union[ExportPosition, AgentPosition]]]\n    ],\n    skill_export: Optional[\n        List[Tuple[str, Union[ExportPosition, AgentPosition]]]\n    ],\n    chat_export: Optional[\n        List[Tuple[str, Union[ExportPosition, AgentPosition]]]\n    ],\n) -&gt; List[Tuple[str, Union[ExportPosition, AgentPosition]]]:\n    \"\"\"Gather all (but agents) the before or after exports.\n\n    Parameters\n    ----------\n    model_export : Optional[List[Tuple[str, Union[ExportPosition, AgentPosition]]]]\n        The model exports.\n    skill_export : Optional[List[Tuple[str, Union[ExportPosition, AgentPosition]]]]\n        The skill exports.\n    chat_export : Optional[List[Tuple[str, Union[ExportPosition, AgentPosition]]]]\n        The chat exports.\n\n    Returns\n    -------\n    List[Tuple[str, Union[ExportPosition, AgentPosition]]]\n        The gathered exports.\n    \"\"\"\n    all_exports: List[Tuple[str, Union[ExportPosition, AgentPosition]]] = []\n    if model_export:\n        all_exports.extend(model_export)\n    if skill_export:\n        all_exports.extend(skill_export)\n    if chat_export:\n        all_exports.extend(chat_export)\n    return all_exports\n</code></pre>"},{"location":"reference/python/exporting/flow.html#waldiez.exporting.flow.flow_exporter.FlowExporter.export_models","title":"<code>export_models() -&gt; ExporterReturnType</code>","text":"<p>Export the models.</p> <p>Returns:</p> Type Description <code>str</code> <p>The exported models.</p> Source code in <code>waldiez/exporting/flow/flow_exporter.py</code> <pre><code>def export_models(self) -&gt; ExporterReturnType:\n    \"\"\"Export the models.\n\n    Returns\n    -------\n    str\n        The exported models.\n    \"\"\"\n    exporter = ModelsExporter(\n        flow_name=self.flow_name,\n        agents=self.agents,\n        agent_names=self.agent_names,\n        models=self.models,\n        model_names=self.model_names,\n        for_notebook=self.for_notebook,\n        output_dir=self.output_dir,\n        cache_seed=self.waldiez.cache_seed,\n    )\n    return exporter.export()\n</code></pre>"},{"location":"reference/python/exporting/flow.html#waldiez.exporting.flow.flow_exporter.FlowExporter.export_skills","title":"<code>export_skills() -&gt; ExporterReturnType</code>","text":"<p>Export the skills.</p> <p>Returns:</p> Type Description <code>str</code> <p>The exported skills.</p> Source code in <code>waldiez/exporting/flow/flow_exporter.py</code> <pre><code>def export_skills(self) -&gt; ExporterReturnType:\n    \"\"\"Export the skills.\n\n    Returns\n    -------\n    str\n        The exported skills.\n    \"\"\"\n    exporter = SkillsExporter(\n        flow_name=self.flow_name,\n        agents=self.agents,\n        agent_names=self.agent_names,\n        skills=self.skills,\n        skill_names=self.skill_names,\n        output_dir=self.output_dir,\n    )\n    return exporter.export()\n</code></pre>"},{"location":"reference/python/exporting/flow.html#waldiez.exporting.flow.flow_exporter.FlowExporter.gather_agent_arguments","title":"<code>gather_agent_arguments(before_export: List[Tuple[str, Union[ExportPosition, AgentPosition]]], after_export: List[Tuple[str, Union[ExportPosition, AgentPosition]]]) -&gt; List[Tuple[str, AgentPosition]]</code>  <code>staticmethod</code>","text":"<p>Gather the agent arguments.</p> <p>Parameters:</p> Name Type Description Default <code>before_export</code> <code>List[Tuple[str, Union[ExportPosition, AgentPosition]]]</code> <p>The before export.</p> required <code>after_export</code> <code>List[Tuple[str, Union[ExportPosition, AgentPosition]]]</code> <p>The after export.</p> required <p>Returns:</p> Type Description <code>List[Tuple[str, AgentPosition]]</code> <p>The gathered agent arguments.</p> Source code in <code>waldiez/exporting/flow/flow_exporter.py</code> <pre><code>@staticmethod\ndef gather_agent_arguments(\n    before_export: List[Tuple[str, Union[ExportPosition, AgentPosition]]],\n    after_export: List[Tuple[str, Union[ExportPosition, AgentPosition]]],\n) -&gt; List[Tuple[str, AgentPosition]]:\n    \"\"\"Gather the agent arguments.\n\n    Parameters\n    ----------\n    before_export : List[Tuple[str, Union[ExportPosition, AgentPosition]]]\n        The before export.\n    after_export : List[Tuple[str, Union[ExportPosition, AgentPosition]]]\n        The after export.\n\n    Returns\n    -------\n    List[Tuple[str, AgentPosition]]\n        The gathered agent arguments.\n    \"\"\"\n    exported_with_agent_arg: List[Tuple[str, AgentPosition]] = []\n    for before in before_export:\n        position = before[1]\n        if (\n            isinstance(position, AgentPosition)\n            and position.position == AgentPositions.AS_ARGUMENT\n        ):\n            exported_with_agent_arg.append((before[0], position))\n    for after in after_export:\n        position = after[1]\n        if (\n            isinstance(position, AgentPosition)\n            and position.position == AgentPositions.AS_ARGUMENT\n        ):\n            exported_with_agent_arg.append((after[0], position))\n    return exported_with_agent_arg\n</code></pre>"},{"location":"reference/python/exporting/flow.html#waldiez.exporting.flow.flow_exporter.FlowExporter.export_agents","title":"<code>export_agents(before_export: List[Tuple[str, Union[ExportPosition, AgentPosition]]], after_export: List[Tuple[str, Union[ExportPosition, AgentPosition]]]) -&gt; ExporterReturnType</code>","text":"<p>Export the agents.</p> <p>Parameters:</p> Name Type Description Default <code>before_export</code> <code>List[Tuple[str, Union[ExportPosition, AgentPosition]]]</code> <p>The before export.</p> required <code>after_export</code> <code>List[Tuple[str, Union[ExportPosition, AgentPosition]]]</code> <p>The after export.</p> required <p>Returns:</p> Type Description <code>str</code> <p>The exported agents.</p> Source code in <code>waldiez/exporting/flow/flow_exporter.py</code> <pre><code>def export_agents(\n    self,\n    before_export: List[Tuple[str, Union[ExportPosition, AgentPosition]]],\n    after_export: List[Tuple[str, Union[ExportPosition, AgentPosition]]],\n) -&gt; ExporterReturnType:\n    \"\"\"Export the agents.\n\n    Parameters\n    ----------\n    before_export : List[Tuple[str, Union[ExportPosition, AgentPosition]]]\n        The before export.\n    after_export : List[Tuple[str, Union[ExportPosition, AgentPosition]]]\n        The after export.\n\n    Returns\n    -------\n    str\n        The exported agents.\n    \"\"\"\n    agent_outputs = []\n    for agent in self.agents:\n        exported_with_agent_arg = self.gather_agent_arguments(\n            before_export, after_export\n        )\n        arguments_resolver = partial(\n            self.agent_arguments_resolver,\n            exported_with_agent_arg,\n        )\n        group_chat_members = self.waldiez.get_group_chat_members(agent)\n        exporter = AgentExporter(\n            agent=agent,\n            agent_names=self.agent_names,\n            models=(self.models, self.model_names),\n            chats=(self.chats, self.chat_names),\n            skill_names=self.skill_names,\n            is_async=self.waldiez.is_async,\n            for_notebook=self.for_notebook,\n            output_dir=self.output_dir,\n            group_chat_members=group_chat_members,\n            arguments_resolver=arguments_resolver,\n        )\n        agent_output = exporter.export()\n        agent_content = agent_output[\"content\"] or \"\"\n        after_agent_export = agent_output[\"after_export\"]\n        if after_agent_export:\n            after_export.extend(after_agent_export)\n        before_agent_export = agent_output[\"before_export\"]\n        if before_agent_export:\n            before_export.extend(before_agent_export)\n        if agent_content:\n            agent_content = add_before_agent_content(\n                agent_content,\n                before_export,\n                agent,\n            )\n            agent_content = add_after_agent_content(\n                agent_content,\n                after_export,\n                agent,\n            )\n        agent_output[\"content\"] = agent_content\n        agent_outputs.append(agent_output)\n    return gather_agent_outputs(\n        before_export=before_export,\n        after_export=after_export,\n        agent_outputs=agent_outputs,\n    )\n</code></pre>"},{"location":"reference/python/exporting/flow.html#waldiez.exporting.flow.flow_exporter.FlowExporter.agent_arguments_resolver","title":"<code>agent_arguments_resolver(additional_exports: List[Tuple[str, AgentPosition]], agent: WaldiezAgent) -&gt; List[str]</code>  <code>staticmethod</code>","text":"<p>Resolve the arguments for the agent.</p> <p>Parameters:</p> Name Type Description Default <code>additional_exports</code> <code>List[Tuple[str, AgentPosition]]</code> <p>The additional exports.</p> required <code>agent</code> <code>WaldiezAgent</code> <p>The agent.</p> required <p>Returns:</p> Type Description <code>List[str]</code> <p>The arguments for the agent.</p> Source code in <code>waldiez/exporting/flow/flow_exporter.py</code> <pre><code>@staticmethod\ndef agent_arguments_resolver(\n    additional_exports: List[Tuple[str, AgentPosition]], agent: WaldiezAgent\n) -&gt; List[str]:\n    \"\"\"Resolve the arguments for the agent.\n\n    Parameters\n    ----------\n    additional_exports : List[Tuple[str, AgentPosition]]\n        The additional exports.\n    agent : WaldiezAgent\n        The agent.\n\n    Returns\n    -------\n    List[str]\n        The arguments for the agent.\n    \"\"\"\n    return [x[0] for x in additional_exports if x[1].agent == agent]\n</code></pre>"},{"location":"reference/python/exporting/flow.html#waldiez.exporting.flow.flow_exporter.FlowExporter.export_chats","title":"<code>export_chats() -&gt; ExporterReturnType</code>","text":"<p>Export the chats.</p> <p>Returns:</p> Type Description <code>str</code> <p>The exported chats.</p> Source code in <code>waldiez/exporting/flow/flow_exporter.py</code> <pre><code>def export_chats(self) -&gt; ExporterReturnType:\n    \"\"\"Export the chats.\n\n    Returns\n    -------\n    str\n        The exported chats.\n    \"\"\"\n    exporter = ChatsExporter(\n        get_swarm_members=self.waldiez.get_swarm_members,\n        all_agents=self.agents,\n        agent_names=self.agent_names,\n        all_chats=self.chats,\n        chat_names=self.chat_names,\n        main_chats=self.waldiez.chats,\n        for_notebook=self.for_notebook,\n        is_async=self.waldiez.is_async,\n    )\n    output = exporter.export()\n    chat_contents = output[\"content\"] or \"\"\n    after_chats = output[\"after_export\"]\n    if chat_contents and after_chats:\n        chat_contents = add_after_chat_content(\n            chat_contents,\n            after_chats,\n        )\n    output[\"content\"] = chat_contents\n    return output\n</code></pre>"},{"location":"reference/python/exporting/flow.html#waldiez.exporting.flow.flow_exporter.FlowExporter.export","title":"<code>export() -&gt; ExporterReturnType</code>","text":"<p>Export the flow.</p> <p>Returns:</p> Type Description <code>SubExporterReturnType</code> <p>The exported flow.</p> Source code in <code>waldiez/exporting/flow/flow_exporter.py</code> <pre><code>def export(self) -&gt; ExporterReturnType:\n    \"\"\"Export the flow.\n\n    Returns\n    -------\n    SubExporterReturnType\n        The exported flow.\n    \"\"\"\n    return self.export_flow()\n</code></pre>"},{"location":"reference/python/exporting/models.html","title":"Models","text":"<p>Export models (llm_configs).</p>"},{"location":"reference/python/exporting/models.html#waldiez.exporting.models.models_exporter.ModelsExporter","title":"<code>ModelsExporter(flow_name: str, agents: List[WaldiezAgent], agent_names: Dict[str, str], models: List[WaldiezModel], model_names: Dict[str, str], for_notebook: bool, cache_seed: Optional[int], output_dir: Optional[Union[str, Path]] = None)</code>","text":"<p>               Bases: <code>BaseExporter</code>, <code>ExporterMixin</code></p> <p>Models exporter.</p> <p>Parameters:</p> Name Type Description Default <code>agents</code> <code>List[WaldiezAgent]</code> <p>The agents.</p> required <code>agent_names</code> <code>Dict[str, str]</code> <p>The agent names.</p> required <code>models</code> <code>List[WaldiezModel]</code> <p>The models.</p> required <code>model_names</code> <code>Dict[str, str]</code> <p>The model names.</p> required <code>for_notebook</code> <code>bool</code> <p>Whether the export is for a notebook or not.</p> required <code>cache_seed</code> <code>Optional[int]</code> <p>The cache seed if any, by default None</p> required <code>output_dir</code> <code>Optional[Union[str, Path]]</code> <p>The output directory if any, by default None</p> <code>None</code> Source code in <code>waldiez/exporting/models/models_exporter.py</code> <pre><code>def __init__(\n    self,\n    flow_name: str,\n    agents: List[WaldiezAgent],\n    agent_names: Dict[str, str],\n    models: List[WaldiezModel],\n    model_names: Dict[str, str],\n    for_notebook: bool,\n    cache_seed: Optional[int],\n    output_dir: Optional[Union[str, Path]] = None,\n) -&gt; None:\n    \"\"\"Initialize the models exporter.\n\n    Parameters\n    ----------\n    agents : List[WaldiezAgent]\n        The agents.\n    agent_names : Dict[str, str]\n        The agent names.\n    models : List[WaldiezModel]\n        The models.\n    model_names : Dict[str, str]\n        The model names.\n    for_notebook : bool\n        Whether the export is for a notebook or not.\n    cache_seed : Optional[int]\n        The cache seed if any, by default None\n    output_dir : Optional[Union[str, Path]], optional\n        The output directory if any, by default None\n    \"\"\"\n    self.for_notebook = for_notebook\n    self.flow_name = flow_name\n    self.agents = agents\n    self.agent_names = agent_names\n    self.models = models\n    self.model_names = model_names\n    if output_dir is not None and not isinstance(output_dir, Path):\n        output_dir = Path(output_dir)\n    self.cache_seed = cache_seed\n    self.output_dir = output_dir\n    self._exported_string = None\n</code></pre>"},{"location":"reference/python/exporting/models.html#waldiez.exporting.models.models_exporter.ModelsExporter.export","title":"<code>export() -&gt; ExporterReturnType</code>","text":"<p>Export the models.</p> <p>Returns:</p> Type Description <code>ExporterReturnType</code> <p>The exported models, the imports, the before export strings, the after export strings, and the environment variables.</p> Source code in <code>waldiez/exporting/models/models_exporter.py</code> <pre><code>def export(self) -&gt; ExporterReturnType:\n    \"\"\"Export the models.\n\n    Returns\n    -------\n    ExporterReturnType\n        The exported models,\n        the imports,\n        the before export strings,\n        the after export strings,\n        and the environment variables.\n    \"\"\"\n    exported_string = self.generate()\n    imports = self.get_imports()\n    after_export = self.get_after_export()\n    result: ExporterReturnType = {\n        \"content\": exported_string,\n        \"imports\": imports,\n        \"before_export\": None,\n        \"after_export\": after_export,\n        \"environment_variables\": None,\n    }\n    return result\n</code></pre>"},{"location":"reference/python/exporting/models.html#waldiez.exporting.models.models_exporter.ModelsExporter.generate","title":"<code>generate() -&gt; str</code>","text":"<p>Export the models.</p> <p>Returns:</p> Type Description <code>str</code> <p>The exported models.</p> Source code in <code>waldiez/exporting/models/models_exporter.py</code> <pre><code>def generate(self) -&gt; str:\n    \"\"\"Export the models.\n\n    Returns\n    -------\n    str\n        The exported models.\n    \"\"\"\n    if not self._exported_string:  # pragma: no cover\n        self._exported_string = export_models(\n            flow_name=self.flow_name,\n            all_models=self.models,\n            model_names=self.model_names,\n            output_dir=self.output_dir,\n            serializer=self.serializer,\n        )\n    return self._exported_string\n</code></pre>"},{"location":"reference/python/exporting/models.html#waldiez.exporting.models.models_exporter.ModelsExporter.get_after_export","title":"<code>get_after_export() -&gt; Optional[List[Tuple[str, Union[ExportPosition, AgentPosition]]]]</code>","text":"<p>Generate the after export strings.</p> <p>The arguments for the agent's initialization. example generated args:</p> <p>agent1 = ConversableAgent(     ...     llm_config=False,     ... )</p> <p>agent2 = ConversableAgent(     ...     llm_config={         \"config_list\": [             model1_llm_config,             model2_llm_config,         ],     },     ... )</p> <p>where <code>model1_llm_config</code> and <code>model2_llm_config</code> are the exported models using <code>self.generate()</code></p> <p>Returns:</p> Type Description <code>Optional[List[Tuple[str, Union[ExportPosition, AgentPosition]]]]</code> <p>The exported after export strings and their positions.</p> Source code in <code>waldiez/exporting/models/models_exporter.py</code> <pre><code>def get_after_export(\n    self,\n) -&gt; Optional[List[Tuple[str, Union[ExportPosition, AgentPosition]]]]:\n    # fmt: off\n    \"\"\"Generate the after export strings.\n\n    The arguments for the agent's initialization.\n    example generated args:\n    &gt;&gt;&gt; agent1 = ConversableAgent(\n    &gt;&gt;&gt;     ...\n    &gt;&gt;&gt;     llm_config=False,\n    &gt;&gt;&gt;     ...\n    &gt;&gt;&gt; )\n\n    &gt;&gt;&gt; agent2 = ConversableAgent(\n    &gt;&gt;&gt;     ...\n    &gt;&gt;&gt;     llm_config={\n    &gt;&gt;&gt;         \"config_list\": [\n    &gt;&gt;&gt;             model1_llm_config,\n    &gt;&gt;&gt;             model2_llm_config,\n    &gt;&gt;&gt;         ],\n    &gt;&gt;&gt;     },\n    &gt;&gt;&gt;     ...\n    &gt;&gt;&gt; )\n\n    where `model1_llm_config` and `model2_llm_config`\n    are the exported models using `self.generate()`\n\n    Returns\n    -------\n    Optional[List[Tuple[str, Union[ExportPosition, AgentPosition]]]]\n        The exported after export strings and their positions.\n    \"\"\"\n    # fmt: on\n    agent_llm_config_args: List[\n        Tuple[str, Union[ExportPosition, AgentPosition]]\n    ] = []\n    for agent in self.agents:\n        agent_llm_config_args.append(\n            (\n                get_agent_llm_config_arg(\n                    agent,\n                    all_models=self.models,\n                    model_names=self.model_names,\n                    cache_seed=self.cache_seed,\n                ),\n                AgentPosition(\n                    agent=agent, position=AgentPositions.AS_ARGUMENT\n                ),\n            )\n        )\n    return agent_llm_config_args\n</code></pre>"},{"location":"reference/python/exporting/models.html#waldiez.exporting.models.models_exporter.ModelsExporter.get_environment_variables","title":"<code>get_environment_variables() -&gt; Optional[List[Tuple[str, str]]]</code>","text":"<p>Get the environment variables to set.</p> <p>Returns:</p> Type Description <code>Optional[List[Tuple[str, str]]</code> <p>The environment variables to set.</p> Source code in <code>waldiez/exporting/models/models_exporter.py</code> <pre><code>def get_environment_variables(self) -&gt; Optional[List[Tuple[str, str]]]:\n    \"\"\"Get the environment variables to set.\n\n    Returns\n    -------\n    Optional[List[Tuple[str, str]]\n        The environment variables to set.\n    \"\"\"\n    env_vars = []\n    for model in self.models:\n        if model.api_key:\n            env_vars.append((model.api_key_env_key, model.api_key))\n    return env_vars\n</code></pre>"},{"location":"reference/python/exporting/models.html#waldiez.exporting.models.models_exporter.ModelsExporter.get_imports","title":"<code>get_imports() -&gt; Optional[List[Tuple[str, ImportPosition]]]</code>","text":"<p>Generate the imports string.</p> <p>Returns:</p> Type Description <code>Optional[Tuple[str, ImportPosition]]</code> <p>The exported imports and the position of the imports.</p> Source code in <code>waldiez/exporting/models/models_exporter.py</code> <pre><code>def get_imports(self) -&gt; Optional[List[Tuple[str, ImportPosition]]]:\n    \"\"\"Generate the imports string.\n\n    Returns\n    -------\n    Optional[Tuple[str, ImportPosition]]\n        The exported imports and the position of the imports.\n    \"\"\"\n    if not self.output_dir:\n        return None\n    file_path = self.output_dir / f\"{self.flow_name}_api_keys.py\"\n    if not file_path.exists():\n        # might be because the models are not exported yet\n        if not self._exported_string:\n            self.generate()\n        # if still not exported, return None\n        if not file_path.exists():  # pragma: no cover\n            return None\n    import_string = f\"from {self.flow_name}_api_keys import (\" + \"\\n\"\n    import_string += f\"    get_{self.flow_name}_model_api_key,\" + \"\\n\"\n    import_string += \")\\n\"\n    return [(import_string, ImportPosition.LOCAL)]\n</code></pre>"},{"location":"reference/python/exporting/skills.html","title":"Skills","text":"<p>Skills/tools related string generation functions.</p> <p>Functions:</p> Name Description <code>get_agent_skill_registration</code> <p>Get an agent's skill registration string.</p> <code>export_skills</code> <p>Get the skills content and secrets.</p>"},{"location":"reference/python/exporting/skills.html#waldiez.exporting.skills.skills_exporter.SkillsExporter","title":"<code>SkillsExporter(flow_name: str, agents: List[WaldiezAgent], agent_names: Dict[str, str], skills: List[WaldiezSkill], skill_names: Dict[str, str], output_dir: Optional[Union[str, Path]] = None)</code>","text":"<p>               Bases: <code>BaseExporter</code>, <code>ExporterMixin</code></p> <p>Skill exporter.</p> <p>Parameters:</p> Name Type Description Default <code>flow_name</code> <code>str</code> <p>The name of the flow.</p> required <code>agents</code> <code>List[WaldiezAgent]</code> <p>The agents.</p> required <code>agent_names</code> <code>Dict[str, str]</code> <p>The agent names.</p> required <code>skills</code> <code>List[WaldiezSkill]</code> <p>The skills.</p> required <code>skill_names</code> <code>Dict[str, str]</code> <p>The skill names.</p> required <code>output_dir</code> <code>Optional[Union[str, Path]]</code> <p>The output directory if any, by default None</p> <code>None</code> Source code in <code>waldiez/exporting/skills/skills_exporter.py</code> <pre><code>def __init__(\n    self,\n    flow_name: str,\n    agents: List[WaldiezAgent],\n    agent_names: Dict[str, str],\n    skills: List[WaldiezSkill],\n    skill_names: Dict[str, str],\n    output_dir: Optional[Union[str, Path]] = None,\n) -&gt; None:\n    \"\"\"Initialize the skill exporter.\n\n    Parameters\n    ----------\n    flow_name : str\n        The name of the flow.\n    agents : List[WaldiezAgent]\n        The agents.\n    agent_names : Dict[str, str]\n        The agent names.\n    skills : List[WaldiezSkill]\n        The skills.\n    skill_names : Dict[str, str]\n        The skill names.\n    output_dir : Optional[Union[str, Path]], optional\n        The output directory if any, by default None\n    \"\"\"\n    self.flow_name = flow_name\n    self.agents = agents\n    self.agent_names = agent_names\n    self.skills = skills\n    self.skill_names = skill_names\n    self.output_dir = output_dir\n    self.skill_imports, self.skill_secrets, self.skills_contents = (\n        export_skills(\n            flow_name=flow_name,\n            skills=skills,\n            skill_names=skill_names,\n            output_dir=output_dir,\n        )\n    )\n</code></pre>"},{"location":"reference/python/exporting/skills.html#waldiez.exporting.skills.skills_exporter.SkillsExporter.export","title":"<code>export() -&gt; ExporterReturnType</code>","text":"<p>Export the skills.</p> <p>Returns:</p> Type Description <code>ExporterReturnType</code> <p>The exported skills content, the imports, the before export strings, the after export strings, and the environment variables.</p> Source code in <code>waldiez/exporting/skills/skills_exporter.py</code> <pre><code>def export(self) -&gt; ExporterReturnType:\n    \"\"\"Export the skills.\n\n    Returns\n    -------\n    ExporterReturnType\n        The exported skills content, the imports,\n        the before export strings, the after export strings,\n        and the environment variables.\n    \"\"\"\n    content = self.generate()\n    imports = self.get_imports()\n    after_export = self.get_after_export()\n    environment_variables = self.get_environment_variables()\n    result: ExporterReturnType = {\n        \"content\": content,\n        \"imports\": imports,\n        \"before_export\": None,\n        \"after_export\": after_export,\n        \"environment_variables\": environment_variables,\n    }\n    return result\n</code></pre>"},{"location":"reference/python/exporting/skills.html#waldiez.exporting.skills.skills_exporter.SkillsExporter.generate","title":"<code>generate() -&gt; Optional[str]</code>","text":"<p>Generate the main export.</p> <p>Returns:</p> Type Description <code>Optional[str]</code> <p>The exported content.</p> Source code in <code>waldiez/exporting/skills/skills_exporter.py</code> <pre><code>def generate(self) -&gt; Optional[str]:\n    \"\"\"Generate the main export.\n\n    Returns\n    -------\n    Optional[str]\n        The exported content.\n    \"\"\"\n    return self.skills_contents\n</code></pre>"},{"location":"reference/python/exporting/skills.html#waldiez.exporting.skills.skills_exporter.SkillsExporter.get_after_export","title":"<code>get_after_export() -&gt; Optional[List[Tuple[str, Union[ExportPosition, AgentPosition]]]]</code>","text":"<p>Generate the content after the main export.</p> <p>Returns:</p> Type Description <code>Optional[List[Tuple[str, Union[ExportPosition, AgentPosition]]]]</code> <p>The exported content after the main export and its position.</p> Source code in <code>waldiez/exporting/skills/skills_exporter.py</code> <pre><code>def get_after_export(\n    self,\n) -&gt; Optional[List[Tuple[str, Union[ExportPosition, AgentPosition]]]]:\n    \"\"\"Generate the content after the main export.\n\n    Returns\n    -------\n    Optional[List[Tuple[str, Union[ExportPosition, AgentPosition]]]]\n        The exported content after the main export and its position.\n    \"\"\"\n    agent_registrations: List[\n        Tuple[str, Union[ExportPosition, AgentPosition]]\n    ] = []\n    for agent in self.agents:\n        agent_registration = get_agent_skill_registrations(\n            agent=agent,\n            agent_names=self.agent_names,\n            all_skills=self.skills,\n            skill_names=self.skill_names,\n            string_escape=self.string_escape,\n        )\n        if agent_registration:\n            # after all agents since we use the executor\n            # (it might not yet be defined)\n            position = AgentPosition(None, AgentPositions.AFTER_ALL, 1)\n            agent_registrations.append((agent_registration, position))\n    return agent_registrations\n</code></pre>"},{"location":"reference/python/exporting/skills.html#waldiez.exporting.skills.skills_exporter.SkillsExporter.get_before_export","title":"<code>get_before_export() -&gt; Optional[List[Tuple[str, Union[ExportPosition, AgentPosition]]]]</code>","text":"<p>Generate the content before the main export.</p> <p>Returns:</p> Type Description <code>Optional[List[Tuple[str, Union[ExportPosition, AgentPosition]]]]</code> <p>The exported content before the main export and its position.</p> Source code in <code>waldiez/exporting/skills/skills_exporter.py</code> <pre><code>def get_before_export(\n    self,\n) -&gt; Optional[List[Tuple[str, Union[ExportPosition, AgentPosition]]]]:\n    \"\"\"Generate the content before the main export.\n\n    Returns\n    -------\n    Optional[List[Tuple[str, Union[ExportPosition, AgentPosition]]]]\n        The exported content before the main export and its position.\n    \"\"\"\n</code></pre>"},{"location":"reference/python/exporting/skills.html#waldiez.exporting.skills.skills_exporter.SkillsExporter.get_environment_variables","title":"<code>get_environment_variables() -&gt; List[Tuple[str, str]]</code>","text":"<p>Get the environment variables to set.</p> <p>Returns:</p> Type Description <code>List[Tuple[str, str]]</code> <p>The environment variables to set.</p> Source code in <code>waldiez/exporting/skills/skills_exporter.py</code> <pre><code>def get_environment_variables(self) -&gt; List[Tuple[str, str]]:\n    \"\"\"Get the environment variables to set.\n\n    Returns\n    -------\n    List[Tuple[str, str]]\n        The environment variables to set.\n    \"\"\"\n    return self.skill_secrets\n</code></pre>"},{"location":"reference/python/exporting/skills.html#waldiez.exporting.skills.skills_exporter.SkillsExporter.get_imports","title":"<code>get_imports() -&gt; List[Tuple[str, ImportPosition]]</code>","text":"<p>Generate the imports string.</p> <p>Returns:</p> Type Description <code>Tuple[str, int]</code> <p>The exported imports and the position of the imports.</p> Source code in <code>waldiez/exporting/skills/skills_exporter.py</code> <pre><code>def get_imports(self) -&gt; List[Tuple[str, ImportPosition]]:\n    \"\"\"Generate the imports string.\n\n    Returns\n    -------\n    Tuple[str, int]\n        The exported imports and the position of the imports.\n    \"\"\"\n    imports: List[Tuple[str, ImportPosition]] = []\n    if not self.skill_imports:\n        return imports\n    # standard imports\n    for import_statement in self.skill_imports[0]:\n        imports.append((import_statement, ImportPosition.BUILTINS))\n    # third party imports\n    for import_statement in self.skill_imports[1]:\n        imports.append((import_statement, ImportPosition.THIRD_PARTY))\n    # secrets/local imports\n    for import_statement in self.skill_imports[2]:\n        imports.append((import_statement, ImportPosition.LOCAL))\n    return imports\n</code></pre>"},{"location":"reference/python/models/chat.html","title":"Chat","text":"<p>Waldiez chat model.</p> <p>Chat data model.</p> <p>Waldiez Message Model.</p> <p>Nested chat model.</p> <p>Waldiez chat summary options.</p>"},{"location":"reference/python/models/chat.html#waldiez.models.chat.chat.WaldiezChat","title":"<code>WaldiezChat</code>","text":"<p>               Bases: <code>WaldiezBase</code></p> <p>Chat class.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>str</code> <p>The chat ID.</p> <code>data</code> <code>WaldiezChatData</code> <p>The chat data. See <code>waldiez.models.chat.WaldiezChatData</code> for more information.</p> <code>name</code> <code>str</code> <p>The chat name.</p> <code>source</code> <code>str</code> <p>The chat source.</p> <code>target</code> <code>str</code> <p>The chat target.</p> <code>nested_chat</code> <code>WaldiezChatNested</code> <p>The nested chat message/reply if any.</p> <code>message</code> <code>WaldiezChatMessage</code> <p>The chat message.</p> <code>message_content</code> <code>Optional[str]</code> <p>The chat message content if any. If method, the method's body.</p> <p>Methods:</p> Name Description <code>get_chat_args</code> <p>Get the chat arguments to use in autogen.</p>"},{"location":"reference/python/models/chat.html#waldiez.models.chat.chat.WaldiezChat.after_work","title":"<code>after_work: Optional[WaldiezSwarmAfterWork]</code>  <code>property</code>","text":"<p>Get the after work.</p>"},{"location":"reference/python/models/chat.html#waldiez.models.chat.chat.WaldiezChat.chat_id","title":"<code>chat_id: int</code>  <code>property</code>","text":"<p>Get the chat ID.</p>"},{"location":"reference/python/models/chat.html#waldiez.models.chat.chat.WaldiezChat.context_variables","title":"<code>context_variables: Dict[str, Any]</code>  <code>property</code>","text":"<p>Get the context variables.</p>"},{"location":"reference/python/models/chat.html#waldiez.models.chat.chat.WaldiezChat.description","title":"<code>description: str</code>  <code>property</code>","text":"<p>Get the description.</p>"},{"location":"reference/python/models/chat.html#waldiez.models.chat.chat.WaldiezChat.get_chat_args","title":"<code>get_chat_args(for_queue: bool, sender: Optional[WaldiezAgent] = None) -&gt; Dict[str, Any]</code>","text":"<p>Get the chat arguments to use in autogen.</p> <p>Parameters:</p> Name Type Description Default <code>for_queue</code> <code>bool</code> <p>Whether to get the chat arguments for a chat queue.</p> required <code>sender</code> <code>WaldiezAgent</code> <p>The sender agent, to check if it's a RAG user.</p> <code>None</code> <p>Returns:</p> Type Description <code>dict</code> <p>The chat arguments.</p> Source code in <code>waldiez/models/chat/chat.py</code> <pre><code>def get_chat_args(\n    self,\n    for_queue: bool,\n    sender: Optional[WaldiezAgent] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"Get the chat arguments to use in autogen.\n\n    Parameters\n    ----------\n    for_queue : bool\n        Whether to get the chat arguments for a chat queue.\n    sender : WaldiezAgent, optional\n        The sender agent, to check if it's a RAG user.\n\n    Returns\n    -------\n    dict\n        The chat arguments.\n    \"\"\"\n    args_dict = self.data.get_chat_args(for_queue)\n    if (\n        isinstance(sender, WaldiezRagUser)\n        and sender.agent_type == \"rag_user\"\n        and self.message.type == \"rag_message_generator\"\n    ):\n        # check for n_results in agent data, to add in context\n        n_results = sender.data.retrieve_config.n_results\n        if isinstance(n_results, int) and n_results &gt; 0:\n            args_dict[\"n_results\"] = n_results\n    return args_dict\n</code></pre>"},{"location":"reference/python/models/chat.html#waldiez.models.chat.chat.WaldiezChat.get_message_function","title":"<code>get_message_function(name_prefix: Optional[str] = None, name_suffix: Optional[str] = None, is_rag: bool = False) -&gt; Tuple[str, str]</code>","text":"<p>Get the message function.</p> <p>Parameters:</p> Name Type Description Default <code>name_prefix</code> <code>str</code> <p>The function name prefix.</p> <code>None</code> <code>name_suffix</code> <code>str</code> <p>The function name suffix.</p> <code>None</code> <code>is_rag</code> <code>bool</code> <p>If the message is from a RAG user.</p> <code>False</code> <p>Returns:</p> Type Description <code>Tuple[str, str]</code> <p>The message function and the function name.</p> Source code in <code>waldiez/models/chat/chat.py</code> <pre><code>def get_message_function(\n    self,\n    name_prefix: Optional[str] = None,\n    name_suffix: Optional[str] = None,\n    is_rag: bool = False,\n) -&gt; Tuple[str, str]:\n    \"\"\"Get the message function.\n\n    Parameters\n    ----------\n    name_prefix : str\n        The function name prefix.\n    name_suffix : str\n        The function name suffix.\n    is_rag : bool\n        If the message is from a RAG user.\n\n    Returns\n    -------\n    Tuple[str, str]\n        The message function and the function name.\n    \"\"\"\n    if self.message.type in (\"string\", \"none\") or (\n        not self.message_content and is_rag is False\n    ):\n        return \"\", \"\"\n    function_types = CALLABLE_MESSAGE_TYPES\n    function_name = CALLABLE_MESSAGE\n    if name_prefix:\n        function_name = f\"{name_prefix}_{function_name}\"\n    if name_suffix:\n        function_name = f\"{function_name}_{name_suffix}\"\n    if is_rag and self.message.type == \"rag_message_generator\":\n        function_types = CALLABLE_MESSAGE_RAG_WITH_CARRYOVER_TYPES\n        return (\n            generate_function(\n                function_name=function_name,\n                function_args=CALLABLE_MESSAGE_ARGS,\n                function_types=function_types,\n                function_body=self.message.content_body\n                or RAG_METHOD_WITH_CARRYOVER_BODY,\n            ),\n            function_name,\n        )\n    return (\n        generate_function(\n            function_name=function_name,\n            function_args=CALLABLE_MESSAGE_ARGS,\n            function_types=function_types,\n            function_body=self.message_content or \"\",\n        ),\n        function_name,\n    )\n</code></pre>"},{"location":"reference/python/models/chat.html#waldiez.models.chat.chat.WaldiezChat.get_nested_chat_message_function","title":"<code>get_nested_chat_message_function(name_prefix: Optional[str] = None, name_suffix: Optional[str] = None) -&gt; Tuple[str, str]</code>","text":"<p>Get the nested chat message function.</p> <p>Parameters:</p> Name Type Description Default <code>name_prefix</code> <code>str</code> <p>The function name prefix.</p> <code>None</code> <code>name_suffix</code> <code>str</code> <p>The function name suffix.</p> <code>None</code> <p>Returns:</p> Type Description <code>Tuple[str, str]</code> <p>The nested chat message function and the function name.</p> Source code in <code>waldiez/models/chat/chat.py</code> <pre><code>def get_nested_chat_message_function(\n    self,\n    name_prefix: Optional[str] = None,\n    name_suffix: Optional[str] = None,\n) -&gt; Tuple[str, str]:\n    \"\"\"Get the nested chat message function.\n\n    Parameters\n    ----------\n    name_prefix : str\n        The function name prefix.\n    name_suffix : str\n        The function name suffix.\n\n    Returns\n    -------\n    Tuple[str, str]\n        The nested chat message function and the function name.\n    \"\"\"\n    if (\n        not self.nested_chat.message\n        or self.nested_chat.message.type in (\"string\", \"none\")\n        or not self.nested_chat.message_content\n    ):\n        return \"\", \"\"\n    function_name = NESTED_CHAT_MESSAGE\n    if name_prefix:\n        function_name = f\"{name_prefix}_{function_name}\"\n    if name_suffix:\n        function_name = f\"{function_name}_{name_suffix}\"\n    return (\n        generate_function(\n            function_name=function_name,\n            function_args=NESTED_CHAT_ARGS,\n            function_types=NESTED_CHAT_TYPES,\n            function_body=self.nested_chat.message_content,\n        ),\n        function_name,\n    )\n</code></pre>"},{"location":"reference/python/models/chat.html#waldiez.models.chat.chat.WaldiezChat.get_nested_chat_reply_function","title":"<code>get_nested_chat_reply_function(name_prefix: Optional[str] = None, name_suffix: Optional[str] = None) -&gt; Tuple[str, str]</code>","text":"<p>Get the nested chat reply function.</p> <p>Parameters:</p> Name Type Description Default <code>name_prefix</code> <code>str</code> <p>The function name prefix.</p> <code>None</code> <code>name_suffix</code> <code>str</code> <p>The function name suffix.</p> <code>None</code> <p>Returns:</p> Type Description <code>Tuple[str, str]</code> <p>The nested chat reply function and the function name.</p> Source code in <code>waldiez/models/chat/chat.py</code> <pre><code>def get_nested_chat_reply_function(\n    self,\n    name_prefix: Optional[str] = None,\n    name_suffix: Optional[str] = None,\n) -&gt; Tuple[str, str]:\n    \"\"\"Get the nested chat reply function.\n\n    Parameters\n    ----------\n    name_prefix : str\n        The function name prefix.\n    name_suffix : str\n        The function name suffix.\n\n    Returns\n    -------\n    Tuple[str, str]\n        The nested chat reply function and the function name.\n    \"\"\"\n    if (\n        not self.nested_chat.reply\n        or self.nested_chat.reply.type in (\"string\", \"none\")\n        or not self.nested_chat.reply_content\n    ):\n        return \"\", \"\"\n    function_name = NESTED_CHAT_REPLY\n    if name_prefix:\n        function_name = f\"{name_prefix}_{function_name}\"\n    if name_suffix:\n        function_name = f\"{function_name}_{name_suffix}\"\n    return (\n        generate_function(\n            function_name=function_name,\n            function_args=NESTED_CHAT_ARGS,\n            function_types=NESTED_CHAT_TYPES,\n            function_body=self.nested_chat.reply_content,\n        ),\n        function_name,\n    )\n</code></pre>"},{"location":"reference/python/models/chat.html#waldiez.models.chat.chat.WaldiezChat.max_rounds","title":"<code>max_rounds: int</code>  <code>property</code>","text":"<p>Get the max rounds for swarm chat.</p>"},{"location":"reference/python/models/chat.html#waldiez.models.chat.chat.WaldiezChat.message","title":"<code>message: WaldiezChatMessage</code>  <code>property</code>","text":"<p>Get the message.</p>"},{"location":"reference/python/models/chat.html#waldiez.models.chat.chat.WaldiezChat.message_content","title":"<code>message_content: Optional[str]</code>  <code>property</code>","text":"<p>Get the message content.</p>"},{"location":"reference/python/models/chat.html#waldiez.models.chat.chat.WaldiezChat.model_dump","title":"<code>model_dump(**kwargs: Any) -&gt; Dict[str, Any]</code>","text":"<p>Dump the model to a dict including the chat attributes.</p> <p>Parameters:</p> Name Type Description Default <code>kwargs</code> <code>Any</code> <p>The keyword arguments.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model dump with the chat attributes.</p> Source code in <code>waldiez/models/chat/chat.py</code> <pre><code>def model_dump(self, **kwargs: Any) -&gt; Dict[str, Any]:\n    \"\"\"Dump the model to a dict including the chat attributes.\n\n    Parameters\n    ----------\n    kwargs : Any\n        The keyword arguments.\n\n    Returns\n    -------\n    Dict[str, Any]\n        The model dump with the chat attributes.\n    \"\"\"\n    dump = super().model_dump(**kwargs)\n    dump[\"name\"] = self.name\n    dump[\"description\"] = self.description\n    dump[\"source\"] = self.source\n    dump[\"target\"] = self.target\n    dump[\"nested_chat\"] = self.nested_chat.model_dump()\n    dump[\"message\"] = self.message.model_dump()\n    dump[\"message_content\"] = self.message_content\n    dump[\"context_variables\"] = self.context_variables\n    dump[\"max_rounds\"] = self.max_rounds\n    dump[\"after_work\"] = (\n        self.after_work.model_dump() if self.after_work else None\n    )\n    return dump\n</code></pre>"},{"location":"reference/python/models/chat.html#waldiez.models.chat.chat.WaldiezChat.name","title":"<code>name: str</code>  <code>property</code>","text":"<p>Get the name.</p>"},{"location":"reference/python/models/chat.html#waldiez.models.chat.chat.WaldiezChat.nested_chat","title":"<code>nested_chat: WaldiezChatNested</code>  <code>property</code>","text":"<p>Get the nested chat.</p>"},{"location":"reference/python/models/chat.html#waldiez.models.chat.chat.WaldiezChat.order","title":"<code>order: int</code>  <code>property</code>","text":"<p>Get the order.</p>"},{"location":"reference/python/models/chat.html#waldiez.models.chat.chat.WaldiezChat.prerequisites","title":"<code>prerequisites: List[int]</code>  <code>property</code>","text":"<p>Get the chat prerequisites.</p>"},{"location":"reference/python/models/chat.html#waldiez.models.chat.chat.WaldiezChat.set_chat_id","title":"<code>set_chat_id(value: int) -&gt; None</code>","text":"<p>Set the chat ID.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>int</code> <p>The chat ID.</p> required Source code in <code>waldiez/models/chat/chat.py</code> <pre><code>def set_chat_id(self, value: int) -&gt; None:\n    \"\"\"Set the chat ID.\n\n    Parameters\n    ----------\n    value : int\n        The chat ID.\n    \"\"\"\n    self.data.set_chat_id(value)\n</code></pre>"},{"location":"reference/python/models/chat.html#waldiez.models.chat.chat.WaldiezChat.set_prerequisites","title":"<code>set_prerequisites(value: List[int]) -&gt; None</code>","text":"<p>Set the chat prerequisites.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>List[int]</code> <p>The chat prerequisites.</p> required Source code in <code>waldiez/models/chat/chat.py</code> <pre><code>def set_prerequisites(self, value: List[int]) -&gt; None:\n    \"\"\"Set the chat prerequisites.\n\n    Parameters\n    ----------\n    value : List[int]\n        The chat prerequisites.\n    \"\"\"\n    self.data.set_prerequisites(value)\n</code></pre>"},{"location":"reference/python/models/chat.html#waldiez.models.chat.chat.WaldiezChat.source","title":"<code>source: str</code>  <code>property</code>","text":"<p>Get the source.</p>"},{"location":"reference/python/models/chat.html#waldiez.models.chat.chat.WaldiezChat.target","title":"<code>target: str</code>  <code>property</code>","text":"<p>Get the target.</p>"},{"location":"reference/python/models/chat.html#waldiez.models.chat.chat_data.WaldiezChatData","title":"<code>WaldiezChatData</code>","text":"<p>               Bases: <code>WaldiezBase</code></p> <p>Chat data class.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>The name of the chat.</p> <code>source</code> <code>str</code> <p>The source of the chat (sender).</p> <code>target</code> <code>str</code> <p>The target of the chat (recipient).</p> <code>description</code> <code>str</code> <p>The description of the chat.</p> <code>position</code> <code>int</code> <p>The position of the chat. Ignored (UI related).</p> <code>order</code> <code>int</code> <p>The of the chat. If negative, ignored.</p> <code>clear_history</code> <code>(Optional[bool], optional)</code> <p>Whether to clear the chat history, by default None.</p> <code>message</code> <code>Union[str, WaldiezChatMessage]</code> <p>The message of the chat.</p> <code>nested_chat</code> <code>WaldiezChatNested</code> <p>The nested chat config.</p> <code>summary</code> <code>WaldiezChatSummary</code> <p>The summary method and options for the chat.</p> <code>max_turns</code> <code>Optional[int]</code> <p>The maximum number of turns for the chat, by default None (no limit).</p> <code>silent</code> <code>(Optional[bool], optional)</code> <p>Whether to run the chat silently, by default None (ignored).</p> <code>summary_args</code> <code>Optional[Dict[str, Any]]</code> <p>The summary args to use in autogen.</p> <code>real_source</code> <code>Optional[str]</code> <p>The real source of the chat (overrides the source).</p> <code>real_target</code> <code>Optional[str]</code> <p>The real target of the chat (overrides the target).</p> <code>max_rounds</code> <code>int</code> <p>Maximum number of conversation rounds (swarm).</p> <code>after_work</code> <code>Optional[WaldiezSwarmAfterWork]</code> <p>The work to do after the chat (swarm).</p> <p>Methods:</p> Name Description <code>validate_message</code> <p>Validate the message.</p> <code>validate_summary_method</code> <p>Validate the summary method.</p> <code>serialize_summary_method</code> <p>Serialize summary method.</p> <code>get_chat_args</code> <p>Get the chat arguments to use in autogen.</p>"},{"location":"reference/python/models/chat.html#waldiez.models.chat.chat_data.WaldiezChatData.get_chat_args","title":"<code>get_chat_args(for_queue: bool) -&gt; Dict[str, Any]</code>","text":"<p>Get the chat arguments to use in autogen.</p> <p>Without the 'message' key.</p> <p>Parameters:</p> Name Type Description Default <code>for_queue</code> <code>bool</code> <p>Whether to get the arguments for a chat queue.</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The dictionary to pass as kwargs.</p> Source code in <code>waldiez/models/chat/chat_data.py</code> <pre><code>def get_chat_args(self, for_queue: bool) -&gt; Dict[str, Any]:\n    \"\"\"Get the chat arguments to use in autogen.\n\n    Without the 'message' key.\n\n    Parameters\n    ----------\n    for_queue : bool\n        Whether to get the arguments for a chat queue.\n\n    Returns\n    -------\n    Dict[str, Any]\n        The dictionary to pass as kwargs.\n    \"\"\"\n    args: Dict[str, Any] = {}\n    if self.summary.method:\n        args[\"summary_method\"] = self.summary.method\n    if self.summary_args:\n        args[\"summary_args\"] = self.summary_args\n    if isinstance(self.max_turns, int) and self.max_turns &gt; 0:\n        args[\"max_turns\"] = self.max_turns\n    if isinstance(self.clear_history, bool):\n        args[\"clear_history\"] = self.clear_history\n    if isinstance(self.silent, bool):\n        args[\"silent\"] = self.silent\n    args.update(self._get_context_args())\n    if for_queue:\n        args[\"chat_id\"] = self._chat_id\n    if self._prerequisites:\n        args[\"prerequisites\"] = self._prerequisites\n    return args\n</code></pre>"},{"location":"reference/python/models/chat.html#waldiez.models.chat.chat_data.WaldiezChatData.get_chat_id","title":"<code>get_chat_id() -&gt; int</code>","text":"<p>Get the chat id.</p> <p>Returns:</p> Type Description <code>int</code> <p>The chat id.</p> Source code in <code>waldiez/models/chat/chat_data.py</code> <pre><code>def get_chat_id(self) -&gt; int:\n    \"\"\"Get the chat id.\n\n    Returns\n    -------\n    int\n        The chat id.\n    \"\"\"\n    return self._chat_id\n</code></pre>"},{"location":"reference/python/models/chat.html#waldiez.models.chat.chat_data.WaldiezChatData.get_prerequisites","title":"<code>get_prerequisites() -&gt; List[int]</code>","text":"<p>Get the chat prerequisites.</p> <p>Returns:</p> Type Description <code>List[int]</code> <p>The chat prerequisites (if async).</p> Source code in <code>waldiez/models/chat/chat_data.py</code> <pre><code>def get_prerequisites(self) -&gt; List[int]:\n    \"\"\"Get the chat prerequisites.\n\n    Returns\n    -------\n    List[int]\n        The chat prerequisites (if async).\n    \"\"\"\n    return self._prerequisites\n</code></pre>"},{"location":"reference/python/models/chat.html#waldiez.models.chat.chat_data.WaldiezChatData.message_content","title":"<code>message_content: Optional[str]</code>  <code>property</code>","text":"<p>Get the message content.</p>"},{"location":"reference/python/models/chat.html#waldiez.models.chat.chat_data.WaldiezChatData.set_chat_id","title":"<code>set_chat_id(value: int) -&gt; None</code>","text":"<p>Set the chat id.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>int</code> <p>The chat id.</p> required Source code in <code>waldiez/models/chat/chat_data.py</code> <pre><code>def set_chat_id(self, value: int) -&gt; None:\n    \"\"\"Set the chat id.\n\n    Parameters\n    ----------\n    value : int\n        The chat id.\n    \"\"\"\n    self._chat_id = value\n</code></pre>"},{"location":"reference/python/models/chat.html#waldiez.models.chat.chat_data.WaldiezChatData.set_prerequisites","title":"<code>set_prerequisites(value: List[int]) -&gt; None</code>","text":"<p>Set the chat prerequisites.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>List[int]</code> <p>The chat prerequisites to set.</p> required Source code in <code>waldiez/models/chat/chat_data.py</code> <pre><code>def set_prerequisites(self, value: List[int]) -&gt; None:\n    \"\"\"Set the chat prerequisites.\n\n    Parameters\n    ----------\n    value : List[int]\n        The chat prerequisites to set.\n    \"\"\"\n    self._prerequisites = value\n</code></pre>"},{"location":"reference/python/models/chat.html#waldiez.models.chat.chat_data.WaldiezChatData.summary_args","title":"<code>summary_args: Optional[Dict[str, Any]]</code>  <code>property</code>","text":"<p>Get the summary args.</p>"},{"location":"reference/python/models/chat.html#waldiez.models.chat.chat_data.WaldiezChatData.validate_chat_data","title":"<code>validate_chat_data() -&gt; Self</code>","text":"<p>Validate the chat data.</p> <p>Returns:</p> Type Description <code>WaldiezChatData</code> <p>The validated chat data.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the validation fails.</p> Source code in <code>waldiez/models/chat/chat_data.py</code> <pre><code>@model_validator(mode=\"after\")\ndef validate_chat_data(self) -&gt; Self:\n    \"\"\"Validate the chat data.\n\n    Returns\n    -------\n    WaldiezChatData\n        The validated chat data.\n\n    Raises\n    ------\n    ValueError\n        If the validation fails.\n    \"\"\"\n    if not isinstance(self.message, WaldiezChatMessage):  # pragma: no cover\n        return self\n    self._message_content = self.message.content\n    if self.message.type == \"none\":\n        self._message_content = None\n    if self.message.type == \"string\":\n        self._message_content = self.message.content\n    if self.message.type == \"method\":\n        valid, error_or_body = check_function(\n            self.message.content or \"\",\n            CALLABLE_MESSAGE,\n            CALLABLE_MESSAGE_ARGS,\n        )\n        if not valid:\n            raise ValueError(error_or_body)\n        self._message_content = error_or_body\n    return self\n</code></pre>"},{"location":"reference/python/models/chat.html#waldiez.models.chat.chat_data.WaldiezChatData.validate_context_variables","title":"<code>validate_context_variables(value: Optional[Dict[str, Any]]) -&gt; Optional[Dict[str, Any]]</code>  <code>classmethod</code>","text":"<p>Validate the context variables.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>Optional[Dict[str, Any]]</code> <p>The context variables value.</p> required <p>Returns:</p> Type Description <code>Optional[Dict[str, Any]]</code> <p>The validated context variables value.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the validation fails.</p> Source code in <code>waldiez/models/chat/chat_data.py</code> <pre><code>@field_validator(\"context_variables\", mode=\"after\")\n@classmethod\ndef validate_context_variables(\n    cls, value: Optional[Dict[str, Any]]\n) -&gt; Optional[Dict[str, Any]]:\n    \"\"\"Validate the context variables.\n\n    Parameters\n    ----------\n    value : Optional[Dict[str, Any]]\n        The context variables value.\n\n    Returns\n    -------\n    Optional[Dict[str, Any]]\n        The validated context variables value.\n\n    Raises\n    ------\n    ValueError\n        If the validation fails.\n    \"\"\"\n    if value is None:\n        return None\n    return update_dict(value)\n</code></pre>"},{"location":"reference/python/models/chat.html#waldiez.models.chat.chat_data.WaldiezChatData.validate_message","title":"<code>validate_message(value: Any) -&gt; WaldiezChatMessage</code>  <code>classmethod</code>","text":"<p>Validate the message.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>Any</code> <p>The message value.</p> required <p>Returns:</p> Type Description <code>WaldiezChatMessage</code> <p>The validated message value.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the validation fails.</p> Source code in <code>waldiez/models/chat/chat_data.py</code> <pre><code>@field_validator(\"message\", mode=\"before\")\n@classmethod\ndef validate_message(cls, value: Any) -&gt; WaldiezChatMessage:\n    \"\"\"Validate the message.\n\n    Parameters\n    ----------\n    value : Any\n        The message value.\n\n    Returns\n    -------\n    WaldiezChatMessage\n        The validated message value.\n\n    Raises\n    ------\n    ValueError\n        If the validation fails.\n    \"\"\"\n    if value is None:\n        return WaldiezChatMessage(\n            type=\"none\", use_carryover=False, content=None, context={}\n        )\n    if isinstance(value, (str, int, float, bool)):\n        return WaldiezChatMessage(\n            type=\"string\",\n            use_carryover=False,\n            content=str(value),\n            context={},\n        )\n    if isinstance(value, dict):\n        return WaldiezChatMessage.model_validate(value)\n    if not isinstance(value, WaldiezChatMessage):\n        return WaldiezChatMessage(\n            type=\"none\", use_carryover=False, content=None, context={}\n        )\n    return value\n</code></pre>"},{"location":"reference/python/models/chat.html#waldiez.models.chat.chat_message.WaldiezChatMessage","title":"<code>WaldiezChatMessage</code>","text":"<p>               Bases: <code>WaldiezBase</code></p> <p>Waldiez Message.</p> <p>A generic message with a type and content.</p> <p>If the type is not <code>none</code>, the content is a string. If the type is 'method', the content is the source code of a method. If the type is 'last_carryover', the content is a method to return     the last carryover from the context. If the type is 'rag_message_generator', and the sender is a RAG user agent,     the content will be generated by the <code>sender.message_generator</code> method.</p> <p>Attributes:</p> Name Type Description <code>type</code> <code>WaldiezChatMessageType</code> <p>The type of the message: - string - method - rag_message_generator - none If the sender is a RAG user agent, and the type is <code>rag_message_generator</code>, the <code>{sender}.message_generator</code> method will be used.</p> <code>content</code> <code>Optional[str]</code> <p>The content of the message (string or method).</p> <code>context</code> <code>Dict[str, Any]</code> <p>Extra context of the message.</p>"},{"location":"reference/python/models/chat.html#waldiez.models.chat.chat_message.WaldiezChatMessage.content_body","title":"<code>content_body: Optional[str]</code>  <code>property</code>","text":"<p>Get the content body.</p>"},{"location":"reference/python/models/chat.html#waldiez.models.chat.chat_message.WaldiezChatMessage.validate_content","title":"<code>validate_content() -&gt; Self</code>","text":"<p>Validate the content (if not a method).</p> <p>Returns:</p> Type Description <code>WaldiezChatMessage</code> <p>The validated instance.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the content is invalid.</p> Source code in <code>waldiez/models/chat/chat_message.py</code> <pre><code>@model_validator(mode=\"after\")\ndef validate_content(self) -&gt; Self:\n    \"\"\"Validate the content (if not a method).\n\n    Returns\n    -------\n    WaldiezChatMessage\n        The validated instance.\n\n    Raises\n    ------\n    ValueError\n        If the content is invalid.\n    \"\"\"\n    content: Optional[str] = None\n    if self.type == \"none\":\n        content = \"None\"\n    if self.type == \"method\":\n        if not self.content:\n            raise ValueError(\n                \"The message content is required for the method type\"\n            )\n        content = self.content\n    if self.type == \"string\":\n        if not self.content:\n            self.content = \"\"\n        if self.use_carryover:\n            content = get_last_carryover_method_content(\n                text_content=self.content,\n            )\n        content = self.content\n    if self.type == \"rag_message_generator\":\n        if self.use_carryover:\n            content = get_last_carryover_method_content(\n                text_content=self.content or \"\",\n            )\n        else:\n            content = RAG_METHOD_WITH_CARRYOVER_BODY\n            self.content = RAG_METHOD_WITH_CARRYOVER\n    self._content_body = content\n    return self\n</code></pre>"},{"location":"reference/python/models/chat.html#waldiez.models.chat.chat_message.WaldiezChatMessage.validate_context_vars","title":"<code>validate_context_vars() -&gt; Self</code>","text":"<p>Try to detect bools nulls and numbers from the context values.</p> <p>Returns:</p> Type Description <code>WaldiezChatMessage</code> <p>The validated instance.</p> Source code in <code>waldiez/models/chat/chat_message.py</code> <pre><code>@model_validator(mode=\"after\")\ndef validate_context_vars(self) -&gt; Self:\n    \"\"\"Try to detect bools nulls and numbers from the context values.\n\n    Returns\n    -------\n    WaldiezChatMessage\n        The validated instance.\n    \"\"\"\n    self.context = update_dict(self.context)\n    return self\n</code></pre>"},{"location":"reference/python/models/chat.html#waldiez.models.chat.chat_message.WaldiezChatMessage.validate_method","title":"<code>validate_method(function_name: str, function_args: List[str]) -&gt; str</code>","text":"<p>Validate a method.</p> <p>Parameters:</p> Name Type Description Default <code>function_name</code> <code>str</code> <p>The method name.</p> required <code>function_args</code> <code>List[str]</code> <p>The expected method arguments.</p> required <p>Returns:</p> Type Description <code>str</code> <p>The validated method body.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the validation fails.</p> Source code in <code>waldiez/models/chat/chat_message.py</code> <pre><code>def validate_method(\n    self,\n    function_name: str,\n    function_args: List[str],\n) -&gt; str:\n    \"\"\"Validate a method.\n\n    Parameters\n    ----------\n    function_name : str\n        The method name.\n    function_args : List[str]\n        The expected method arguments.\n\n    Returns\n    -------\n    str\n        The validated method body.\n\n    Raises\n    ------\n    ValueError\n        If the validation fails.\n    \"\"\"\n    if not self.content:\n        raise ValueError(\n            \"The message content is required for the method type\"\n        )\n    is_valid, error_or_body = check_function(\n        code_string=self.content,\n        function_name=function_name,\n        function_args=function_args,\n    )\n    if not is_valid:\n        raise ValueError(error_or_body)\n    return error_or_body\n</code></pre>"},{"location":"reference/python/models/chat.html#waldiez.models.chat.chat_message.WaldiezChatMessageType","title":"<code>WaldiezChatMessageType = Literal['string', 'method', 'rag_message_generator', 'none']</code>  <code>module-attribute</code>","text":"<p>Possible types for the message.</p>"},{"location":"reference/python/models/chat.html#waldiez.models.chat.chat_message.get_last_carryover_method_content","title":"<code>get_last_carryover_method_content(text_content: str) -&gt; str</code>","text":"<p>Get the last carryover method content.</p> <p>Parameters:</p> Name Type Description Default <code>text_content</code> <code>str</code> <p>Text content before the carryover.</p> required <p>Returns:</p> Type Description <code>str</code> <p>The last carryover method content.</p> Source code in <code>waldiez/models/chat/chat_message.py</code> <pre><code>def get_last_carryover_method_content(text_content: str) -&gt; str:\n    \"\"\"Get the last carryover method content.\n\n    Parameters\n    ----------\n    text_content : str\n        Text content before the carryover.\n\n    Returns\n    -------\n    str\n        The last carryover method content.\n    \"\"\"\n    method_content = '''\n    \"\"\"Get the message to send using the last carryover.\n\n    Parameters\n    ----------\n    sender : ConversableAgent\n        The source agent.\n    recipient : ConversableAgent\n        The target agent.\n    context : Dict[str, Any]\n        The context.\n\n    Returns\n    -------\n    Union[Dict[str, Any], str]\n        The message to send using the last carryover.\n    \"\"\"\n    carryover = context.get(\"carryover\", \"\")\n    if isinstance(carryover, list):\n        carryover = carryover[-1]\n    if not isinstance(carryover, str):\n        if isinstance(carryover, list):\n            carryover = carryover[-1]\n        elif isinstance(carryover, dict):\n            carryover = carryover.get(\"content\", \"\")\n    if not isinstance(carryover, str):\n        carryover = \"\"'''\n    if text_content:\n        method_content += f\"\"\"\n    final_message = \"{text_content}\" + carryover\n    return final_message\n\"\"\"\n    else:\n        method_content += \"\"\"\n    return carryover\n\"\"\"\n    return method_content\n</code></pre>"},{"location":"reference/python/models/chat.html#waldiez.models.chat.chat_nested.WaldiezChatNested","title":"<code>WaldiezChatNested</code>","text":"<p>               Bases: <code>WaldiezBase</code></p> <p>Nested chat class.</p> <p>Attributes:</p> Name Type Description <code>message</code> <code>WaldiezChatMessage</code> <p>The message in a nested chat (sender -&gt; recipient).</p> <code>reply</code> <code>WaldiezChatMessage</code> <p>The reply in a nested chat (recipient -&gt; sender).</p>"},{"location":"reference/python/models/chat.html#waldiez.models.chat.chat_nested.WaldiezChatNested.message_content","title":"<code>message_content: Optional[str]</code>  <code>property</code>","text":"<p>Get the message content.</p>"},{"location":"reference/python/models/chat.html#waldiez.models.chat.chat_nested.WaldiezChatNested.reply_content","title":"<code>reply_content: Optional[str]</code>  <code>property</code>","text":"<p>Get the reply content.</p>"},{"location":"reference/python/models/chat.html#waldiez.models.chat.chat_nested.WaldiezChatNested.validate_message","title":"<code>validate_message(value: Any) -&gt; WaldiezChatMessage</code>  <code>classmethod</code>","text":"<p>Validate the message.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>Any</code> <p>The value.</p> required <p>Returns:</p> Type Description <code>WaldiezChatMessage</code> <p>The validated message.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the validation fails.</p> Source code in <code>waldiez/models/chat/chat_nested.py</code> <pre><code>@field_validator(\"message\", \"reply\", mode=\"before\")\n@classmethod\ndef validate_message(cls, value: Any) -&gt; WaldiezChatMessage:\n    \"\"\"Validate the message.\n\n    Parameters\n    ----------\n    value : Any\n        The value.\n\n    Returns\n    -------\n    WaldiezChatMessage\n        The validated message.\n\n    Raises\n    ------\n    ValueError\n        If the validation fails.\n    \"\"\"\n    if not value:\n        return WaldiezChatMessage(\n            type=\"none\", use_carryover=False, content=None, context={}\n        )\n    if isinstance(value, str):\n        return WaldiezChatMessage(\n            type=\"string\", use_carryover=False, content=value, context={}\n        )\n    if isinstance(value, dict):\n        return WaldiezChatMessage.model_validate(value)\n    if isinstance(value, WaldiezChatMessage):\n        return value\n    raise ValueError(f\"Invalid message type: {type(value)}\")\n</code></pre>"},{"location":"reference/python/models/chat.html#waldiez.models.chat.chat_nested.WaldiezChatNested.validate_nested_chat","title":"<code>validate_nested_chat() -&gt; Self</code>","text":"<p>Validate the nested chat.</p> <p>Returns:</p> Type Description <code>WaldiezChatNested</code> <p>The validated nested chat.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the validation fails.</p> Source code in <code>waldiez/models/chat/chat_nested.py</code> <pre><code>@model_validator(mode=\"after\")\ndef validate_nested_chat(self) -&gt; Self:\n    \"\"\"Validate the nested chat.\n\n    Returns\n    -------\n    WaldiezChatNested\n        The validated nested chat.\n\n    Raises\n    ------\n    ValueError\n        If the validation fails.\n    \"\"\"\n    if self.message is not None:\n        self._message_content = self.message.content_body\n        if self.message.type == \"none\":\n            self._message_content = \"\"\n        if self.message.type == \"string\":\n            self._message_content = self.message.content\n        if self.message.type == \"method\":\n            self._message_content = self.message.validate_method(\n                function_name=NESTED_CHAT_MESSAGE,\n                function_args=NESTED_CHAT_ARGS,\n            )\n\n    if self.reply is not None:\n        self._reply_content = self.reply.content_body\n        if self.reply.type == \"none\":\n            self._reply_content = \"\"\n        if self.reply.type == \"string\":\n            self._reply_content = self.reply.content\n        if self.reply.type == \"method\":\n            self._reply_content = self.reply.validate_method(\n                function_name=NESTED_CHAT_REPLY,\n                function_args=NESTED_CHAT_ARGS,\n            )\n    return self\n</code></pre>"},{"location":"reference/python/models/chat.html#waldiez.models.chat.chat_summary.WaldiezChatSummary","title":"<code>WaldiezChatSummary</code>","text":"<p>               Bases: <code>WaldiezBase</code></p> <p>Llm summary method options.</p> <p>Attributes:</p> Name Type Description <code>method</code> <code>Optional[WaldiezChatSummaryMethod]</code> <p>The method to use for the LLM summary. Defaults to \"last_msg\".</p> <code>prompt</code> <code>str</code> <p>The prompt for the LLM summary method.</p> <code>args</code> <code>Optional[Dict[str, Any]]</code> <p>The additional arguments for the LLM summary method, by default None.</p>"},{"location":"reference/python/models/chat.html#waldiez.models.chat.chat_summary.WaldiezChatSummary.serialize_summary_method","title":"<code>serialize_summary_method(value: Any, info: FieldSerializationInfo) -&gt; Any</code>  <code>classmethod</code>","text":"<p>Serialize summary method.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>Any</code> <p>The value to serialize.</p> required <code>info</code> <code>FieldSerializationInfo</code> <p>The serialization info.</p> required <p>Returns:</p> Type Description <code>Any</code> <p>The serialized value.</p> Source code in <code>waldiez/models/chat/chat_summary.py</code> <pre><code>@field_serializer(\"method\")\n@classmethod\ndef serialize_summary_method(\n    cls, value: Any, info: FieldSerializationInfo\n) -&gt; Any:\n    \"\"\"Serialize summary method.\n\n    Parameters\n    ----------\n    value : Any\n        The value to serialize.\n    info : FieldSerializationInfo\n        The serialization info.\n\n    Returns\n    -------\n    Any\n        The serialized value.\n    \"\"\"\n    if info.by_alias is True:\n        if value == \"reflection_with_llm\":\n            return \"reflectionWithLlm\"\n        if value == \"last_msg\":\n            return \"lastMsg\"\n    return value\n</code></pre>"},{"location":"reference/python/models/chat.html#waldiez.models.chat.chat_summary.WaldiezChatSummary.validate_summary_method","title":"<code>validate_summary_method(value: Optional[WaldiezChatSummaryMethod]) -&gt; Optional[WaldiezChatSummaryMethod]</code>  <code>classmethod</code>","text":"<p>Validate the summary method.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>Optional[WaldiezChatSummaryMethod]</code> <p>The passed WaldiezChatSummaryMethod</p> required <p>Returns:</p> Type Description <code>Optional[WaldiezChatSummaryMethod]</code> <p>The validated message summary method</p> Source code in <code>waldiez/models/chat/chat_summary.py</code> <pre><code>@field_validator(\"method\", mode=\"before\")\n@classmethod\ndef validate_summary_method(\n    cls, value: Optional[WaldiezChatSummaryMethod]\n) -&gt; Optional[WaldiezChatSummaryMethod]:\n    \"\"\"Validate the summary method.\n\n    Parameters\n    ----------\n    value : Optional[WaldiezChatSummaryMethod]\n        The passed WaldiezChatSummaryMethod\n\n    Returns\n    -------\n    Optional[WaldiezChatSummaryMethod]\n        The validated message summary method\n    \"\"\"\n    if str(value).lower() == \"none\":\n        return None\n    if value == \"lastMsg\":\n        return \"last_msg\"\n    if value == \"reflectionWithLlm\":\n        return \"reflection_with_llm\"\n    return value\n</code></pre>"},{"location":"reference/python/models/chat.html#waldiez.models.chat.chat_summary.WaldiezChatSummaryMethod","title":"<code>WaldiezChatSummaryMethod = Literal['reflectionWithLlm', 'lastMsg', 'reflection_with_llm', 'last_msg']</code>  <code>module-attribute</code>","text":"<p>Possible methods for the LLM summary.</p>"},{"location":"reference/python/models/common.html","title":"Common","text":"<p>Common utils for all models.</p>"},{"location":"reference/python/models/common.html#waldiez.models.common.WaldiezBase","title":"<code>WaldiezBase</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Base model class to inherit from.</p> <p>It contains the default configuration for all models. It also <code>model_dumps</code> by alias by default.</p>"},{"location":"reference/python/models/common.html#waldiez.models.common.WaldiezBase.model_dump","title":"<code>model_dump(**kwargs: Any) -&gt; Dict[str, Any]</code>","text":"<p>Dump the model to a dictionary.</p> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <code>Any</code> <p>Additional keyword arguments.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The dictionary representation of the model.</p> Source code in <code>waldiez/models/common/base.py</code> <pre><code>def model_dump(self, **kwargs: Any) -&gt; Dict[str, Any]:\n    \"\"\"Dump the model to a dictionary.\n\n    Parameters\n    ----------\n    **kwargs : Any\n        Additional keyword arguments.\n\n    Returns\n    -------\n    Dict[str, Any]\n        The dictionary representation of the model.\n    \"\"\"\n    by_alias = kwargs.pop(\"by_alias\", None)\n    if by_alias is None:\n        by_alias = True\n    if not isinstance(by_alias, bool):\n        by_alias = True\n    return super().model_dump(by_alias=by_alias, **kwargs)\n</code></pre>"},{"location":"reference/python/models/common.html#waldiez.models.common.WaldiezBase.model_dump_json","title":"<code>model_dump_json(**kwargs: Any) -&gt; str</code>","text":"<p>Dump the model to a JSON string.</p> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <code>Any</code> <p>Additional keyword arguments.</p> <code>{}</code> <p>Returns:</p> Type Description <code>str</code> <p>The JSON string.</p> Source code in <code>waldiez/models/common/base.py</code> <pre><code>def model_dump_json(self, **kwargs: Any) -&gt; str:\n    \"\"\"Dump the model to a JSON string.\n\n    Parameters\n    ----------\n    **kwargs : Any\n        Additional keyword arguments.\n\n    Returns\n    -------\n    str\n        The JSON string.\n    \"\"\"\n    by_alias = kwargs.pop(\"by_alias\", None)\n    if by_alias is None:\n        by_alias = True\n    if not isinstance(by_alias, bool):\n        by_alias = True\n    return super().model_dump_json(by_alias=by_alias, **kwargs)\n</code></pre>"},{"location":"reference/python/models/common.html#waldiez.models.common.ag2_version","title":"<code>ag2_version</code>","text":"<p>Get the autogen version.</p>"},{"location":"reference/python/models/common.html#waldiez.models.common.ag2_version.get_autogen_version","title":"<code>get_autogen_version() -&gt; str</code>  <code>cached</code>","text":"<p>Get the autogen version.</p> <p>Returns:</p> Type Description <code>str</code> <p>The autogen version.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If pyautogen is not installed.</p> Source code in <code>waldiez/models/common/ag2_version.py</code> <pre><code>@cache\ndef get_autogen_version() -&gt; str:\n    \"\"\"Get the autogen version.\n\n    Returns\n    -------\n    str\n        The autogen version.\n\n    Raises\n    ------\n    ValueError\n        If pyautogen is not installed.\n    \"\"\"\n    # pylint: disable=import-outside-toplevel\n    with warnings.catch_warnings():\n        warnings.simplefilter(\"ignore\")\n        try:\n            from autogen.version import __version__ as ag2  # type: ignore\n        except ImportError as error:  # pragma: no cover\n            raise ValueError(\"pyautogen is not installed.\") from error\n    return ag2\n</code></pre>"},{"location":"reference/python/models/common.html#waldiez.models.common.base","title":"<code>base</code>","text":"<p>Base class to inherit from.</p>"},{"location":"reference/python/models/common.html#waldiez.models.common.base.WaldiezBase","title":"<code>WaldiezBase</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Base model class to inherit from.</p> <p>It contains the default configuration for all models. It also <code>model_dumps</code> by alias by default.</p>"},{"location":"reference/python/models/common.html#waldiez.models.common.base.WaldiezBase.model_dump","title":"<code>model_dump(**kwargs: Any) -&gt; Dict[str, Any]</code>","text":"<p>Dump the model to a dictionary.</p> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <code>Any</code> <p>Additional keyword arguments.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The dictionary representation of the model.</p> Source code in <code>waldiez/models/common/base.py</code> <pre><code>def model_dump(self, **kwargs: Any) -&gt; Dict[str, Any]:\n    \"\"\"Dump the model to a dictionary.\n\n    Parameters\n    ----------\n    **kwargs : Any\n        Additional keyword arguments.\n\n    Returns\n    -------\n    Dict[str, Any]\n        The dictionary representation of the model.\n    \"\"\"\n    by_alias = kwargs.pop(\"by_alias\", None)\n    if by_alias is None:\n        by_alias = True\n    if not isinstance(by_alias, bool):\n        by_alias = True\n    return super().model_dump(by_alias=by_alias, **kwargs)\n</code></pre>"},{"location":"reference/python/models/common.html#waldiez.models.common.base.WaldiezBase.model_dump_json","title":"<code>model_dump_json(**kwargs: Any) -&gt; str</code>","text":"<p>Dump the model to a JSON string.</p> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <code>Any</code> <p>Additional keyword arguments.</p> <code>{}</code> <p>Returns:</p> Type Description <code>str</code> <p>The JSON string.</p> Source code in <code>waldiez/models/common/base.py</code> <pre><code>def model_dump_json(self, **kwargs: Any) -&gt; str:\n    \"\"\"Dump the model to a JSON string.\n\n    Parameters\n    ----------\n    **kwargs : Any\n        Additional keyword arguments.\n\n    Returns\n    -------\n    str\n        The JSON string.\n    \"\"\"\n    by_alias = kwargs.pop(\"by_alias\", None)\n    if by_alias is None:\n        by_alias = True\n    if not isinstance(by_alias, bool):\n        by_alias = True\n    return super().model_dump_json(by_alias=by_alias, **kwargs)\n</code></pre>"},{"location":"reference/python/models/common.html#waldiez.models.common.check_function","title":"<code>check_function(code_string: str, function_name: str, function_args: List[str]) -&gt; Tuple[bool, str]</code>","text":"<p>Check the function.</p> <p>Parameters:</p> Name Type Description Default <code>code_string</code> <code>str</code> <p>The code string to check.</p> required <code>function_name</code> <code>str</code> <p>The expected method name.</p> required <code>function_args</code> <code>List[str]</code> <p>The expected method arguments.</p> required <p>Returns:</p> Type Description <code>Tuple[bool, str]</code> <p>If valid, True and the function body (only), no extra lines. If invalid, False and the error message.</p> Source code in <code>waldiez/models/common/method_utils.py</code> <pre><code>def check_function(\n    code_string: str,\n    function_name: str,\n    function_args: List[str],\n) -&gt; Tuple[bool, str]:\n    \"\"\"Check the function.\n\n    Parameters\n    ----------\n    code_string : str\n        The code string to check.\n    function_name : str\n        The expected method name.\n    function_args : List[str]\n        The expected method arguments.\n\n    Returns\n    -------\n    Tuple[bool, str]\n        If valid, True and the function body (only), no extra lines.\n        If invalid, False and the error message.\n    \"\"\"\n    error, tree = parse_code_string(code_string)\n    if error is not None or tree is None:\n        return False, error or \"Invalid code\"\n    return _validate_function_body(\n        tree,\n        code_string,\n        function_name,\n        function_args,\n    )\n</code></pre>"},{"location":"reference/python/models/common.html#waldiez.models.common.date_utils","title":"<code>date_utils</code>","text":"<p>Date utilities.</p>"},{"location":"reference/python/models/common.html#waldiez.models.common.date_utils.now","title":"<code>now() -&gt; str</code>","text":"<p>Get the current date and time in UTC.</p> <p>Returns:</p> Type Description <code>str</code> <p>The current date and time in UTC.</p> Source code in <code>waldiez/models/common/date_utils.py</code> <pre><code>def now() -&gt; str:\n    \"\"\"Get the current date and time in UTC.\n\n    Returns\n    -------\n    str\n        The current date and time in UTC.\n    \"\"\"\n    return (\n        datetime.now(tz=timezone.utc)\n        .isoformat(timespec=\"milliseconds\")\n        .replace(\"+00:00\", \"Z\")\n    )\n</code></pre>"},{"location":"reference/python/models/common.html#waldiez.models.common.dict_utils","title":"<code>dict_utils</code>","text":"<p>Dictionary related utilities.</p>"},{"location":"reference/python/models/common.html#waldiez.models.common.dict_utils.update_dict","title":"<code>update_dict(original: Dict[str, Any]) -&gt; Dict[str, Any]</code>","text":"<p>Try to determine the type of the dictionary values.</p> <p>Parameters:</p> Name Type Description Default <code>original</code> <code>Dict[str, Any]</code> <p>The original dictionary.</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The updated dictionary with values converted to the detected types.</p> Source code in <code>waldiez/models/common/dict_utils.py</code> <pre><code>def update_dict(original: Dict[str, Any]) -&gt; Dict[str, Any]:\n    \"\"\"\n\n    Try to determine the type of the dictionary values.\n\n    Parameters\n    ----------\n    original : Dict[str, Any]\n        The original dictionary.\n\n    Returns\n    -------\n    Dict[str, Any]\n        The updated dictionary with values converted to the detected types.\n    \"\"\"\n    new_dict: Dict[str, Any] = {}\n    for key, value in original.items():\n        value_lower = str(value).lower()\n        if value_lower in (\"none\", \"null\"):\n            new_dict[key] = None\n        elif value_lower in (\"true\", \"false\"):\n            new_dict[key] = value_lower == \"true\"\n        elif str(value).isdigit():\n            new_dict[key] = int(value)\n        elif str(value).replace(\".\", \"\").isdigit():\n            try:\n                new_dict[key] = float(value)\n            except ValueError:  # pragma: no cover\n                new_dict[key] = value\n        else:\n            new_dict[key] = value\n    return new_dict\n</code></pre>"},{"location":"reference/python/models/common.html#waldiez.models.common.gather_code_imports","title":"<code>gather_code_imports(code_string: str, is_interop: bool) -&gt; Tuple[List[str], List[str]]</code>","text":"<p>Gather the imports from the code string.</p> <p>Parameters:</p> Name Type Description Default <code>code_string</code> <code>str</code> <p>The code string.</p> required <code>is_interop</code> <code>bool</code> <p>If True, make sure the interoperability import is present.</p> required <p>Returns:</p> Type Description <code>Tuple[List[str], List[str]]</code> <p>The standard library imports and the third party imports.</p> Source code in <code>waldiez/models/common/method_utils.py</code> <pre><code>def gather_code_imports(\n    code_string: str,\n    is_interop: bool,\n) -&gt; Tuple[List[str], List[str]]:\n    \"\"\"Gather the imports from the code string.\n\n    Parameters\n    ----------\n    code_string : str\n        The code string.\n    is_interop : bool\n        If True, make sure the interoperability import is present.\n\n    Returns\n    -------\n    Tuple[List[str], List[str]]\n        The standard library imports and the third party imports.\n    \"\"\"\n    standard_lib_imports: List[str] = []\n    third_party_imports: List[str] = []\n    tree = parso.parse(code_string)  # type: ignore\n    for node in tree.iter_imports():\n        if node.type == \"import_name\":\n            full_import_statement = node.get_code().strip()\n            module_name = (\n                node.get_code().replace(\"import\", \"\").strip().split(\" \")[0]\n            )\n            if not module_name:\n                continue\n            if is_standard_library(module_name):\n                standard_lib_imports.append(full_import_statement)\n            else:\n                third_party_imports.append(full_import_statement)\n        elif node.type == \"import_from\":\n            full_import_statement = node.get_code().strip()\n            module_name = (\n                node.get_code().replace(\"from\", \"\").strip().split(\" \")[0]\n            )\n            if not module_name:\n                continue\n            if is_standard_library(module_name):\n                standard_lib_imports.append(full_import_statement)\n            else:\n                third_party_imports.append(full_import_statement)\n    if is_interop and (\n        \"from autogen.interop import Interoperability\"\n        not in third_party_imports\n    ):\n        third_party_imports.append(\n            \"from autogen.interop import Interoperability\"\n        )\n    # sorted_standard_lib_imports =  # first import x, then from a import b\n    sorted_standard_lib_imports = sorted(\n        [stmt for stmt in standard_lib_imports if stmt.startswith(\"import \")]\n    ) + sorted(\n        [stmt for stmt in standard_lib_imports if stmt.startswith(\"from \")]\n    )\n    sorted_third_party_imports = sorted(\n        [stmt for stmt in third_party_imports if stmt.startswith(\"import \")]\n    ) + sorted(\n        [stmt for stmt in third_party_imports if stmt.startswith(\"from \")]\n    )\n    return sorted_standard_lib_imports, sorted_third_party_imports\n</code></pre>"},{"location":"reference/python/models/common.html#waldiez.models.common.generate_function","title":"<code>generate_function(function_name: str, function_args: List[str], function_types: Tuple[List[str], str], function_body: str, types_as_comments: bool = False) -&gt; str</code>","text":"<p>Generate a function.</p> <p>Parameters:</p> Name Type Description Default <code>function_name</code> <code>str</code> <p>The function name.</p> required <code>function_args</code> <code>List[str]</code> <p>The function arguments.</p> required <code>function_types</code> <code>Tuple[List[str], str]</code> <p>The function types.</p> required <code>function_body</code> <code>str</code> <p>The function body.</p> required <code>types_as_comments</code> <code>bool</code> <p>Include the type hints as comments (or in the function signature) (default is False).</p> <code>False</code> <p>Returns:</p> Type Description <code>str</code> <p>The generated function.</p> Source code in <code>waldiez/models/common/method_utils.py</code> <pre><code>def generate_function(\n    function_name: str,\n    function_args: List[str],\n    function_types: Tuple[List[str], str],\n    function_body: str,\n    types_as_comments: bool = False,\n) -&gt; str:\n    \"\"\"Generate a function.\n\n    Parameters\n    ----------\n    function_name : str\n        The function name.\n    function_args : List[str]\n        The function arguments.\n    function_types : Tuple[List[str], str]\n        The function types.\n    function_body : str\n        The function body.\n    types_as_comments : bool, optional\n        Include the type hints as comments (or in the function signature)\n        (default is False).\n\n    Returns\n    -------\n    str\n        The generated function.\n    \"\"\"\n    if len(function_name) &gt; MAX_VAR_NAME_LENGTH:\n        function_name = function_name[:MAX_VAR_NAME_LENGTH]\n    function_string = f\"def {function_name}(\"\n    if not function_args:\n        function_string += \")\"\n    else:\n        function_string += \"\\n\"\n        for arg, arg_type in zip(\n            function_args, function_types[0], strict=False\n        ):\n            if types_as_comments:\n                function_string += f\"    {arg},  # type: {arg_type}\" + \"\\n\"\n            else:\n                function_string += f\"    {arg}: {arg_type},\" + \"\\n\"\n        function_string += \")\"\n    if types_as_comments:\n        function_string += \":\\n\"\n        function_string += \"    # type: (...) -&gt; \" + function_types[1]\n    else:\n        function_string += \" -&gt; \" + function_types[1] + \":\"\n    function_string += \"\\n\" if not function_body.startswith(\"\\n\") else \"\"\n    function_string += f\"{function_body}\"\n    if not function_string.endswith(\"\\n\"):\n        function_string += \"\\n\"\n    return function_string\n</code></pre>"},{"location":"reference/python/models/common.html#waldiez.models.common.get_autogen_version","title":"<code>get_autogen_version() -&gt; str</code>  <code>cached</code>","text":"<p>Get the autogen version.</p> <p>Returns:</p> Type Description <code>str</code> <p>The autogen version.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If pyautogen is not installed.</p> Source code in <code>waldiez/models/common/ag2_version.py</code> <pre><code>@cache\ndef get_autogen_version() -&gt; str:\n    \"\"\"Get the autogen version.\n\n    Returns\n    -------\n    str\n        The autogen version.\n\n    Raises\n    ------\n    ValueError\n        If pyautogen is not installed.\n    \"\"\"\n    # pylint: disable=import-outside-toplevel\n    with warnings.catch_warnings():\n        warnings.simplefilter(\"ignore\")\n        try:\n            from autogen.version import __version__ as ag2  # type: ignore\n        except ImportError as error:  # pragma: no cover\n            raise ValueError(\"pyautogen is not installed.\") from error\n    return ag2\n</code></pre>"},{"location":"reference/python/models/common.html#waldiez.models.common.get_function","title":"<code>get_function(code_string: str, function_name: str) -&gt; str</code>","text":"<p>Get the function signature and body.</p> <p>Parameters:</p> Name Type Description Default <code>code_string</code> <code>str</code> <p>The code string.</p> required <code>function_name</code> <code>str</code> <p>The function name.</p> required <p>Returns:</p> Type Description <code>str</code> <p>The function signature and body.</p> Source code in <code>waldiez/models/common/method_utils.py</code> <pre><code>def get_function(\n    code_string: str,\n    function_name: str,\n) -&gt; str:\n    \"\"\"Get the function signature and body.\n\n    Parameters\n    ----------\n    code_string : str\n        The code string.\n    function_name : str\n        The function name.\n\n    Returns\n    -------\n    str\n        The function signature and body.\n    \"\"\"\n    tree = parso.parse(code_string)  # type: ignore\n    for node in tree.iter_funcdefs():\n        if node.name.value == function_name:\n            return node.get_code()\n    return \"\"\n</code></pre>"},{"location":"reference/python/models/common.html#waldiez.models.common.method_utils","title":"<code>method_utils</code>","text":"<p>Function related utilities.</p>"},{"location":"reference/python/models/common.html#waldiez.models.common.method_utils.check_function","title":"<code>check_function(code_string: str, function_name: str, function_args: List[str]) -&gt; Tuple[bool, str]</code>","text":"<p>Check the function.</p> <p>Parameters:</p> Name Type Description Default <code>code_string</code> <code>str</code> <p>The code string to check.</p> required <code>function_name</code> <code>str</code> <p>The expected method name.</p> required <code>function_args</code> <code>List[str]</code> <p>The expected method arguments.</p> required <p>Returns:</p> Type Description <code>Tuple[bool, str]</code> <p>If valid, True and the function body (only), no extra lines. If invalid, False and the error message.</p> Source code in <code>waldiez/models/common/method_utils.py</code> <pre><code>def check_function(\n    code_string: str,\n    function_name: str,\n    function_args: List[str],\n) -&gt; Tuple[bool, str]:\n    \"\"\"Check the function.\n\n    Parameters\n    ----------\n    code_string : str\n        The code string to check.\n    function_name : str\n        The expected method name.\n    function_args : List[str]\n        The expected method arguments.\n\n    Returns\n    -------\n    Tuple[bool, str]\n        If valid, True and the function body (only), no extra lines.\n        If invalid, False and the error message.\n    \"\"\"\n    error, tree = parse_code_string(code_string)\n    if error is not None or tree is None:\n        return False, error or \"Invalid code\"\n    return _validate_function_body(\n        tree,\n        code_string,\n        function_name,\n        function_args,\n    )\n</code></pre>"},{"location":"reference/python/models/common.html#waldiez.models.common.method_utils.gather_code_imports","title":"<code>gather_code_imports(code_string: str, is_interop: bool) -&gt; Tuple[List[str], List[str]]</code>","text":"<p>Gather the imports from the code string.</p> <p>Parameters:</p> Name Type Description Default <code>code_string</code> <code>str</code> <p>The code string.</p> required <code>is_interop</code> <code>bool</code> <p>If True, make sure the interoperability import is present.</p> required <p>Returns:</p> Type Description <code>Tuple[List[str], List[str]]</code> <p>The standard library imports and the third party imports.</p> Source code in <code>waldiez/models/common/method_utils.py</code> <pre><code>def gather_code_imports(\n    code_string: str,\n    is_interop: bool,\n) -&gt; Tuple[List[str], List[str]]:\n    \"\"\"Gather the imports from the code string.\n\n    Parameters\n    ----------\n    code_string : str\n        The code string.\n    is_interop : bool\n        If True, make sure the interoperability import is present.\n\n    Returns\n    -------\n    Tuple[List[str], List[str]]\n        The standard library imports and the third party imports.\n    \"\"\"\n    standard_lib_imports: List[str] = []\n    third_party_imports: List[str] = []\n    tree = parso.parse(code_string)  # type: ignore\n    for node in tree.iter_imports():\n        if node.type == \"import_name\":\n            full_import_statement = node.get_code().strip()\n            module_name = (\n                node.get_code().replace(\"import\", \"\").strip().split(\" \")[0]\n            )\n            if not module_name:\n                continue\n            if is_standard_library(module_name):\n                standard_lib_imports.append(full_import_statement)\n            else:\n                third_party_imports.append(full_import_statement)\n        elif node.type == \"import_from\":\n            full_import_statement = node.get_code().strip()\n            module_name = (\n                node.get_code().replace(\"from\", \"\").strip().split(\" \")[0]\n            )\n            if not module_name:\n                continue\n            if is_standard_library(module_name):\n                standard_lib_imports.append(full_import_statement)\n            else:\n                third_party_imports.append(full_import_statement)\n    if is_interop and (\n        \"from autogen.interop import Interoperability\"\n        not in third_party_imports\n    ):\n        third_party_imports.append(\n            \"from autogen.interop import Interoperability\"\n        )\n    # sorted_standard_lib_imports =  # first import x, then from a import b\n    sorted_standard_lib_imports = sorted(\n        [stmt for stmt in standard_lib_imports if stmt.startswith(\"import \")]\n    ) + sorted(\n        [stmt for stmt in standard_lib_imports if stmt.startswith(\"from \")]\n    )\n    sorted_third_party_imports = sorted(\n        [stmt for stmt in third_party_imports if stmt.startswith(\"import \")]\n    ) + sorted(\n        [stmt for stmt in third_party_imports if stmt.startswith(\"from \")]\n    )\n    return sorted_standard_lib_imports, sorted_third_party_imports\n</code></pre>"},{"location":"reference/python/models/common.html#waldiez.models.common.method_utils.generate_function","title":"<code>generate_function(function_name: str, function_args: List[str], function_types: Tuple[List[str], str], function_body: str, types_as_comments: bool = False) -&gt; str</code>","text":"<p>Generate a function.</p> <p>Parameters:</p> Name Type Description Default <code>function_name</code> <code>str</code> <p>The function name.</p> required <code>function_args</code> <code>List[str]</code> <p>The function arguments.</p> required <code>function_types</code> <code>Tuple[List[str], str]</code> <p>The function types.</p> required <code>function_body</code> <code>str</code> <p>The function body.</p> required <code>types_as_comments</code> <code>bool</code> <p>Include the type hints as comments (or in the function signature) (default is False).</p> <code>False</code> <p>Returns:</p> Type Description <code>str</code> <p>The generated function.</p> Source code in <code>waldiez/models/common/method_utils.py</code> <pre><code>def generate_function(\n    function_name: str,\n    function_args: List[str],\n    function_types: Tuple[List[str], str],\n    function_body: str,\n    types_as_comments: bool = False,\n) -&gt; str:\n    \"\"\"Generate a function.\n\n    Parameters\n    ----------\n    function_name : str\n        The function name.\n    function_args : List[str]\n        The function arguments.\n    function_types : Tuple[List[str], str]\n        The function types.\n    function_body : str\n        The function body.\n    types_as_comments : bool, optional\n        Include the type hints as comments (or in the function signature)\n        (default is False).\n\n    Returns\n    -------\n    str\n        The generated function.\n    \"\"\"\n    if len(function_name) &gt; MAX_VAR_NAME_LENGTH:\n        function_name = function_name[:MAX_VAR_NAME_LENGTH]\n    function_string = f\"def {function_name}(\"\n    if not function_args:\n        function_string += \")\"\n    else:\n        function_string += \"\\n\"\n        for arg, arg_type in zip(\n            function_args, function_types[0], strict=False\n        ):\n            if types_as_comments:\n                function_string += f\"    {arg},  # type: {arg_type}\" + \"\\n\"\n            else:\n                function_string += f\"    {arg}: {arg_type},\" + \"\\n\"\n        function_string += \")\"\n    if types_as_comments:\n        function_string += \":\\n\"\n        function_string += \"    # type: (...) -&gt; \" + function_types[1]\n    else:\n        function_string += \" -&gt; \" + function_types[1] + \":\"\n    function_string += \"\\n\" if not function_body.startswith(\"\\n\") else \"\"\n    function_string += f\"{function_body}\"\n    if not function_string.endswith(\"\\n\"):\n        function_string += \"\\n\"\n    return function_string\n</code></pre>"},{"location":"reference/python/models/common.html#waldiez.models.common.method_utils.get_function","title":"<code>get_function(code_string: str, function_name: str) -&gt; str</code>","text":"<p>Get the function signature and body.</p> <p>Parameters:</p> Name Type Description Default <code>code_string</code> <code>str</code> <p>The code string.</p> required <code>function_name</code> <code>str</code> <p>The function name.</p> required <p>Returns:</p> Type Description <code>str</code> <p>The function signature and body.</p> Source code in <code>waldiez/models/common/method_utils.py</code> <pre><code>def get_function(\n    code_string: str,\n    function_name: str,\n) -&gt; str:\n    \"\"\"Get the function signature and body.\n\n    Parameters\n    ----------\n    code_string : str\n        The code string.\n    function_name : str\n        The function name.\n\n    Returns\n    -------\n    str\n        The function signature and body.\n    \"\"\"\n    tree = parso.parse(code_string)  # type: ignore\n    for node in tree.iter_funcdefs():\n        if node.name.value == function_name:\n            return node.get_code()\n    return \"\"\n</code></pre>"},{"location":"reference/python/models/common.html#waldiez.models.common.method_utils.is_standard_library","title":"<code>is_standard_library(module_name: str) -&gt; bool</code>","text":"<p>Check if the module is part of the standard library.</p> <p>Parameters:</p> Name Type Description Default <code>module_name</code> <code>str</code> <p>The module name.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if the module is part of the standard library.</p> Source code in <code>waldiez/models/common/method_utils.py</code> <pre><code>def is_standard_library(module_name: str) -&gt; bool:\n    \"\"\"Check if the module is part of the standard library.\n\n    Parameters\n    ----------\n    module_name : str\n        The module name.\n\n    Returns\n    -------\n    bool\n        True if the module is part of the standard library.\n    \"\"\"\n    if module_name in sys.builtin_module_names:\n        return True\n    try:\n        spec = importlib.util.find_spec(module_name)\n    except BaseException:  # pylint: disable=broad-except\n        return False\n    if spec is None or not spec.origin:\n        return False\n    if \"site-packages\" in spec.origin:\n        return False\n    if spec.origin.startswith(sys.prefix) or spec.origin == \"frozen\":\n        return True\n    stdlib_path = str(Path(sysconfig.get_path(\"stdlib\")).resolve())\n    return spec.origin.startswith(stdlib_path)\n</code></pre>"},{"location":"reference/python/models/common.html#waldiez.models.common.method_utils.parse_code_string","title":"<code>parse_code_string(code_string: str) -&gt; Tuple[Optional[str], Optional[ast.Module]]</code>","text":"<p>Parse the code string.</p> <p>Parameters:</p> Name Type Description Default <code>code_string</code> <code>str</code> <p>The code string.</p> required <p>Returns:</p> Type Description <code>Tuple[Optional[str], Optional[Module]]</code> <p>If valid, None and the ast module. If invalid, the error message and None.</p> Source code in <code>waldiez/models/common/method_utils.py</code> <pre><code>def parse_code_string(\n    code_string: str,\n) -&gt; Tuple[Optional[str], Optional[ast.Module]]:\n    \"\"\"Parse the code string.\n\n    Parameters\n    ----------\n    code_string : str\n        The code string.\n\n    Returns\n    -------\n    Tuple[Optional[str], Optional[ast.Module]]\n        If valid, None and the ast module.\n        If invalid, the error message and None.\n    \"\"\"\n    # pylint: disable=broad-except\n    try:\n        tree = ast.parse(code_string)\n    except SyntaxError as e:\n        return f\"SyntaxError: {e}, in \" + \"\\n\" + f\"{code_string}\", None\n    except BaseException as e:  # pragma: no cover\n        return f\"Invalid code: {e}, in \" + \"\\n\" + f\"{code_string}\", None\n    return None, tree\n</code></pre>"},{"location":"reference/python/models/common.html#waldiez.models.common.now","title":"<code>now() -&gt; str</code>","text":"<p>Get the current date and time in UTC.</p> <p>Returns:</p> Type Description <code>str</code> <p>The current date and time in UTC.</p> Source code in <code>waldiez/models/common/date_utils.py</code> <pre><code>def now() -&gt; str:\n    \"\"\"Get the current date and time in UTC.\n\n    Returns\n    -------\n    str\n        The current date and time in UTC.\n    \"\"\"\n    return (\n        datetime.now(tz=timezone.utc)\n        .isoformat(timespec=\"milliseconds\")\n        .replace(\"+00:00\", \"Z\")\n    )\n</code></pre>"},{"location":"reference/python/models/common.html#waldiez.models.common.parse_code_string","title":"<code>parse_code_string(code_string: str) -&gt; Tuple[Optional[str], Optional[ast.Module]]</code>","text":"<p>Parse the code string.</p> <p>Parameters:</p> Name Type Description Default <code>code_string</code> <code>str</code> <p>The code string.</p> required <p>Returns:</p> Type Description <code>Tuple[Optional[str], Optional[Module]]</code> <p>If valid, None and the ast module. If invalid, the error message and None.</p> Source code in <code>waldiez/models/common/method_utils.py</code> <pre><code>def parse_code_string(\n    code_string: str,\n) -&gt; Tuple[Optional[str], Optional[ast.Module]]:\n    \"\"\"Parse the code string.\n\n    Parameters\n    ----------\n    code_string : str\n        The code string.\n\n    Returns\n    -------\n    Tuple[Optional[str], Optional[ast.Module]]\n        If valid, None and the ast module.\n        If invalid, the error message and None.\n    \"\"\"\n    # pylint: disable=broad-except\n    try:\n        tree = ast.parse(code_string)\n    except SyntaxError as e:\n        return f\"SyntaxError: {e}, in \" + \"\\n\" + f\"{code_string}\", None\n    except BaseException as e:  # pragma: no cover\n        return f\"Invalid code: {e}, in \" + \"\\n\" + f\"{code_string}\", None\n    return None, tree\n</code></pre>"},{"location":"reference/python/models/common.html#waldiez.models.common.update_dict","title":"<code>update_dict(original: Dict[str, Any]) -&gt; Dict[str, Any]</code>","text":"<p>Try to determine the type of the dictionary values.</p> <p>Parameters:</p> Name Type Description Default <code>original</code> <code>Dict[str, Any]</code> <p>The original dictionary.</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The updated dictionary with values converted to the detected types.</p> Source code in <code>waldiez/models/common/dict_utils.py</code> <pre><code>def update_dict(original: Dict[str, Any]) -&gt; Dict[str, Any]:\n    \"\"\"\n\n    Try to determine the type of the dictionary values.\n\n    Parameters\n    ----------\n    original : Dict[str, Any]\n        The original dictionary.\n\n    Returns\n    -------\n    Dict[str, Any]\n        The updated dictionary with values converted to the detected types.\n    \"\"\"\n    new_dict: Dict[str, Any] = {}\n    for key, value in original.items():\n        value_lower = str(value).lower()\n        if value_lower in (\"none\", \"null\"):\n            new_dict[key] = None\n        elif value_lower in (\"true\", \"false\"):\n            new_dict[key] = value_lower == \"true\"\n        elif str(value).isdigit():\n            new_dict[key] = int(value)\n        elif str(value).replace(\".\", \"\").isdigit():\n            try:\n                new_dict[key] = float(value)\n            except ValueError:  # pragma: no cover\n                new_dict[key] = value\n        else:\n            new_dict[key] = value\n    return new_dict\n</code></pre>"},{"location":"reference/python/models/flow.html","title":"Flow","text":"<p>Waldiez flow model.</p> <p>Waldiez flow data.</p>"},{"location":"reference/python/models/flow.html#waldiez.models.flow.flow.WaldiezFlow","title":"<code>WaldiezFlow</code>","text":"<p>               Bases: <code>WaldiezBase</code></p> <p>Flow data class.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>str</code> <p>The ID of the flow.</p> <code>type</code> <code>(Literal['flow'], optional)</code> <p>The type of the \"node\" in a graph: \"flow\".</p> <code>name</code> <code>str</code> <p>The name of the flow.</p> <code>description</code> <code>str</code> <p>The description of the flow.</p> <code>tags</code> <code>List[str]</code> <p>The tags of the flow.</p> <code>requirements</code> <code>List[str]</code> <p>The requirements of the flow.</p> <code>storage_id</code> <code>str</code> <p>The storage ID of the flow (ignored, UI related).</p> <code>created_at</code> <code>str</code> <p>The date and time when the flow was created.</p> <code>updated_at</code> <code>str</code> <p>The date and time when the flow was last updated.</p> <code>data</code> <code>WaldiezFlowData</code> <p>The data of the flow. See <code>WaldiezFlowData</code>.</p>"},{"location":"reference/python/models/flow.html#waldiez.models.flow.flow.WaldiezFlow.cache_seed","title":"<code>cache_seed: Optional[int]</code>  <code>property</code>","text":"<p>Check if the flow has caching disabled.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if the flow has caching disabled, False otherwise.</p>"},{"location":"reference/python/models/flow.html#waldiez.models.flow.flow.WaldiezFlow.get_agent_by_id","title":"<code>get_agent_by_id(agent_id: str) -&gt; WaldiezAgent</code>","text":"<p>Get the agent by ID.</p> <p>Parameters:</p> Name Type Description Default <code>agent_id</code> <code>str</code> <p>The ID of the agent.</p> required <p>Returns:</p> Type Description <code>WaldiezAgent</code> <p>The agent.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the agent with the given ID is not found.</p> Source code in <code>waldiez/models/flow/flow.py</code> <pre><code>def get_agent_by_id(self, agent_id: str) -&gt; WaldiezAgent:\n    \"\"\"Get the agent by ID.\n\n    Parameters\n    ----------\n    agent_id : str\n        The ID of the agent.\n\n    Returns\n    -------\n    WaldiezAgent\n        The agent.\n\n    Raises\n    ------\n    ValueError\n        If the agent with the given ID is not found.\n    \"\"\"\n    for agent in self.data.agents.members:\n        if agent.id == agent_id:\n            return agent\n    raise ValueError(f\"Agent with ID {agent_id} not found.\")\n</code></pre>"},{"location":"reference/python/models/flow.html#waldiez.models.flow.flow.WaldiezFlow.get_agent_connections","title":"<code>get_agent_connections(agent_id: str, all_chats: bool = True) -&gt; List[str]</code>","text":"<p>Get the agent connections.</p> <p>Parameters:</p> Name Type Description Default <code>agent_id</code> <code>str</code> <p>The ID of the agent.</p> required <code>all_chats</code> <code>bool</code> <p>If True, get the connections from all the chats, otherwise get the connections from the ordered flow (main chat flow).</p> <code>True</code> <p>Returns:</p> Type Description <code>List[str]</code> <p>The list of agent ids that the agent with the given ID connects to.</p> Source code in <code>waldiez/models/flow/flow.py</code> <pre><code>def get_agent_connections(\n    self, agent_id: str, all_chats: bool = True\n) -&gt; List[str]:\n    \"\"\"Get the agent connections.\n\n    Parameters\n    ----------\n    agent_id : str\n        The ID of the agent.\n    all_chats : bool, optional\n        If True, get the connections from all the chats, otherwise\n        get the connections from the ordered flow (main chat flow).\n\n    Returns\n    -------\n    List[str]\n        The list of agent ids that the agent with the given ID connects to.\n    \"\"\"\n    connections: List[str] = []\n    if all_chats:\n        for chat in self.data.chats:\n            if chat.source == agent_id:\n                connections.append(chat.target)\n            if chat.target == agent_id:\n                connections.append(chat.source)\n    else:\n        for _, source, target in self.ordered_flow:\n            if source.id == agent_id:\n                connections.append(target.id)\n            if target.id == agent_id:\n                connections.append(source.id)\n    return connections\n</code></pre>"},{"location":"reference/python/models/flow.html#waldiez.models.flow.flow.WaldiezFlow.get_group_chat_members","title":"<code>get_group_chat_members(group_manager_id: str) -&gt; List[WaldiezAgent]</code>","text":"<p>Get the group chat members.</p> <p>Parameters:</p> Name Type Description Default <code>group_manager_id</code> <code>str</code> <p>The ID of the group manager.</p> required <p>Returns:</p> Type Description <code>List[WaldiezAgent]</code> <p>The list of group chat</p> Source code in <code>waldiez/models/flow/flow.py</code> <pre><code>def get_group_chat_members(\n    self, group_manager_id: str\n) -&gt; List[WaldiezAgent]:\n    \"\"\"Get the group chat members.\n\n    Parameters\n    ----------\n    group_manager_id : str\n        The ID of the group manager.\n\n    Returns\n    -------\n    List[WaldiezAgent]\n        The list of group chat\n    \"\"\"\n    agent = self.get_agent_by_id(group_manager_id)\n    if agent.agent_type != \"manager\":\n        return []\n    connections = self.get_agent_connections(\n        group_manager_id,\n        all_chats=True,\n    )\n    return [self.get_agent_by_id(member_id) for member_id in connections]\n</code></pre>"},{"location":"reference/python/models/flow.html#waldiez.models.flow.flow.WaldiezFlow.get_initial_swarm_agent","title":"<code>get_initial_swarm_agent() -&gt; Optional[WaldiezAgent]</code>","text":"<p>Get the initial swarm agent.</p> <p>Returns:</p> Type Description <code>Optional[WaldiezAgent]</code> <p>The initial swarm agent if found, None otherwise.</p> Source code in <code>waldiez/models/flow/flow.py</code> <pre><code>def get_initial_swarm_agent(self) -&gt; Optional[WaldiezAgent]:\n    \"\"\"Get the initial swarm agent.\n\n    Returns\n    -------\n    Optional[WaldiezAgent]\n        The initial swarm agent if found, None otherwise.\n    \"\"\"\n    fallback_agent = None\n    for chat in self.data.chats:\n        source_agent = self.get_agent_by_id(chat.source)\n        target_agent = self.get_agent_by_id(chat.target)\n        if (\n            target_agent.agent_type == \"swarm\"\n            and source_agent.agent_type != \"swarm\"\n        ):\n            return target_agent\n        if (\n            source_agent.agent_type == \"swarm\"\n            and target_agent.agent_type == \"swarm\"\n        ):\n            fallback_agent = source_agent\n            break\n    for swarm_agent in self.data.agents.swarm_agents:\n        if swarm_agent.is_initial:\n            return swarm_agent\n    return fallback_agent\n</code></pre>"},{"location":"reference/python/models/flow.html#waldiez.models.flow.flow.WaldiezFlow.get_swarm_chat_members","title":"<code>get_swarm_chat_members(initial_agent: WaldiezAgent) -&gt; Tuple[List[WaldiezAgent], Optional[WaldiezAgent]]</code>","text":"<p>Get the swarm chat members.</p> <p>Parameters:</p> Name Type Description Default <code>initial_agent</code> <code>WaldiezAgent</code> <p>The initial agent.</p> required <p>Returns:</p> Type Description <code>Tuple[List[WaldiezAgent], Optional[WaldiezAgent]]</code> <p>The list of swarm chat members and the user agent if any.</p> Source code in <code>waldiez/models/flow/flow.py</code> <pre><code>def get_swarm_chat_members(\n    self,\n    initial_agent: WaldiezAgent,\n) -&gt; Tuple[List[WaldiezAgent], Optional[WaldiezAgent]]:\n    \"\"\"Get the swarm chat members.\n\n    Parameters\n    ----------\n    initial_agent : WaldiezAgent\n        The initial agent.\n\n    Returns\n    -------\n    Tuple[List[WaldiezAgent], Optional[WaldiezAgent]]\n        The list of swarm chat members and the user agent if any.\n    \"\"\"\n    if initial_agent.agent_type != \"swarm\":\n        return [], None\n    members: List[WaldiezAgent] = [initial_agent]\n    user_agent: Optional[WaldiezAgent] = None\n    visited_agents = set()\n    visited_agents.add(initial_agent.id)\n    connections = self.get_agent_connections(\n        initial_agent.id,\n        all_chats=True,\n    )\n    while connections:\n        agent_id = connections.pop()\n        if agent_id in visited_agents:\n            continue\n        agent = self.get_agent_by_id(agent_id)\n        visited_agents.add(agent_id)\n        if agent.agent_type == \"swarm\":\n            members.append(agent)\n            connections.extend(\n                self.get_agent_connections(agent_id, all_chats=True)\n            )\n        if agent.agent_type in [\"user\", \"rag_user\"] and not user_agent:\n            user_agent = agent\n    return members, user_agent\n</code></pre>"},{"location":"reference/python/models/flow.html#waldiez.models.flow.flow.WaldiezFlow.is_async","title":"<code>is_async: bool</code>  <code>property</code>","text":"<p>Check if the flow is asynchronous.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if the flow is asynchronous, False otherwise.</p>"},{"location":"reference/python/models/flow.html#waldiez.models.flow.flow.WaldiezFlow.is_single_agent_mode","title":"<code>is_single_agent_mode: bool</code>  <code>property</code>","text":"<p>Check if the flow is in single agent mode.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if the flow is in single agent mode, False otherwise.</p>"},{"location":"reference/python/models/flow.html#waldiez.models.flow.flow.WaldiezFlow.is_swarm_flow","title":"<code>is_swarm_flow: bool</code>  <code>property</code>","text":"<p>Check if the flow is a swarm flow.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if the flow is a swarm flow, False otherwise.</p>"},{"location":"reference/python/models/flow.html#waldiez.models.flow.flow.WaldiezFlow.ordered_flow","title":"<code>ordered_flow: List[Tuple[WaldiezChat, WaldiezAgent, WaldiezAgent]]</code>  <code>property</code>","text":"<p>Get the ordered flow.</p>"},{"location":"reference/python/models/flow.html#waldiez.models.flow.flow.WaldiezFlow.validate_flow","title":"<code>validate_flow() -&gt; Self</code>","text":"<p>Flow validation.</p> <ul> <li>unique node ids</li> <li>there are at least two agents     - (or a single agent but not a group manager or a swarm agent)</li> <li>all the agents connect to at least one other agent</li> <li>all the linked agent skills are found in the flow</li> <li>all the linked agent models are found in the flow</li> <li>all the managers have at least one member in the chat group</li> <li>the ordered flow (chats with position &gt;=0) is not empty</li> <li>all agents' code execution config functions exist in the flow skills</li> <li>if swarm flow, there is at least one swarm agent</li> <li>if swarm flow, there is an initial swarm agent</li> </ul> <p>Returns:</p> Type Description <code>WaldiezFlow</code> <p>The validated flow.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the ordered flow is empty. If the model IDs are not unique. If the skill IDs are not unique. If the agents do not connect to any other node. If the manager's group chat has no members.</p> Source code in <code>waldiez/models/flow/flow.py</code> <pre><code>@model_validator(mode=\"after\")\ndef validate_flow(self) -&gt; Self:\n    \"\"\"Flow validation.\n\n    - unique node ids\n    - there are at least two agents\n        - (or a single agent but not a group manager or a swarm agent)\n    - all the agents connect to at least one other agent\n    - all the linked agent skills are found in the flow\n    - all the linked agent models are found in the flow\n    - all the managers have at least one member in the chat group\n    - the ordered flow (chats with position &gt;=0) is not empty\n    - all agents' code execution config functions exist in the flow skills\n    - if swarm flow, there is at least one swarm agent\n    - if swarm flow, there is an initial swarm agent\n\n    Returns\n    -------\n    WaldiezFlow\n        The validated flow.\n\n    Raises\n    ------\n    ValueError\n        If the ordered flow is empty.\n        If the model IDs are not unique.\n        If the skill IDs are not unique.\n        If the agents do not connect to any other node.\n        If the manager's group chat has no members.\n    \"\"\"\n    all_members = list(self.data.agents.members)\n    if len(all_members) == 1:\n        return self.validate_single_agent_mode(all_members[0])\n    if not self.ordered_flow:\n        raise ValueError(\"The ordered flow is empty.\")\n    model_ids = self.validate_flow_models()\n    skills_ids = self.validate_flow_skills()\n    self.data.agents.validate_flow(model_ids, skills_ids)\n    self._validate_agent_connections()\n    if self.is_swarm_flow:\n        for swarm_agent in self.data.agents.swarm_agents:\n            check_handoff_to_nested_chat(\n                swarm_agent,\n                all_agents=list(self.data.agents.members),\n                all_chats=self.data.chats,\n            )\n    return self\n</code></pre>"},{"location":"reference/python/models/flow.html#waldiez.models.flow.flow.WaldiezFlow.validate_flow_models","title":"<code>validate_flow_models() -&gt; List[str]</code>","text":"<p>Validate the flow models.</p> <p>Returns:</p> Type Description <code>List[str]</code> <p>The list of model IDs.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the model IDs are not unique.</p> Source code in <code>waldiez/models/flow/flow.py</code> <pre><code>def validate_flow_models(self) -&gt; List[str]:\n    \"\"\"Validate the flow models.\n\n    Returns\n    -------\n    List[str]\n        The list of model IDs.\n\n    Raises\n    ------\n    ValueError\n        If the model IDs are not unique.\n    \"\"\"\n    model_ids = [model.id for model in self.data.models]\n    if len(model_ids) != len(set(model_ids)):\n        raise ValueError(\"Model IDs must be unique.\")\n    return model_ids\n</code></pre>"},{"location":"reference/python/models/flow.html#waldiez.models.flow.flow.WaldiezFlow.validate_flow_skills","title":"<code>validate_flow_skills() -&gt; List[str]</code>","text":"<p>Validate the flow skills.</p> <p>Returns:</p> Type Description <code>List[str]</code> <p>The list of skill IDs.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the skill IDs are not unique.</p> Source code in <code>waldiez/models/flow/flow.py</code> <pre><code>def validate_flow_skills(self) -&gt; List[str]:\n    \"\"\"Validate the flow skills.\n\n    Returns\n    -------\n    List[str]\n        The list of skill IDs.\n\n    Raises\n    ------\n    ValueError\n        If the skill IDs are not unique.\n    \"\"\"\n    skill_ids = [skill.id for skill in self.data.skills]\n    if len(skill_ids) != len(set(skill_ids)):\n        raise ValueError(\"Skill IDs must be unique.\")\n    return skill_ids\n</code></pre>"},{"location":"reference/python/models/flow.html#waldiez.models.flow.flow.WaldiezFlow.validate_single_agent_mode","title":"<code>validate_single_agent_mode(member: WaldiezAgent) -&gt; Self</code>","text":"<p>Flow validation for single agent mode.</p> <p>Parameters:</p> Name Type Description Default <code>member</code> <code>WaldiezAgent</code> <p>The only agent in the flow</p> required <p>Returns:</p> Type Description <code>WaldiezFlow</code> <p>The validated flow.</p> <p>Raises:</p> Type Description <code>ValueError</code> <ul> <li>If the only agent is a group manager or a swarm agent.</li> <li>If the model IDs are not unique.</li> <li>If the skill IDs are not unique.</li> </ul> Source code in <code>waldiez/models/flow/flow.py</code> <pre><code>def validate_single_agent_mode(self, member: WaldiezAgent) -&gt; Self:\n    \"\"\"Flow validation for single agent mode.\n\n    Parameters\n    ----------\n    member : WaldiezAgent\n        The only agent in the flow\n\n    Returns\n    -------\n    WaldiezFlow\n        The validated flow.\n\n    Raises\n    ------\n    ValueError\n        - If the only agent is a group manager or a swarm agent.\n        - If the model IDs are not unique.\n        - If the skill IDs are not unique.\n    \"\"\"\n    if member.agent_type in [\"manager\", \"swarm\"]:\n        raise ValueError(\n            \"In single agent mode, \"\n            \"the agent must not be a group manager or a swarm agent.\"\n        )\n    model_ids = self.validate_flow_models()\n    skills_ids = self.validate_flow_skills()\n    self.data.agents.validate_flow(model_ids, skills_ids)\n    self._single_agent_mode = True\n    return self\n</code></pre>"},{"location":"reference/python/models/flow.html#waldiez.models.flow.flow_data.WaldiezFlowData","title":"<code>WaldiezFlowData</code>","text":"<p>               Bases: <code>WaldiezBase</code></p> <p>Flow data class.</p> <p>Attributes:</p> Name Type Description <code>nodes</code> <code>List[Dict[str, Any]]</code> <p>The nodes of the flow. We ignore this (UI-related)</p> <code>edges</code> <code>List[Dict[str, Any]]</code> <p>The edges of the flow. We ignore this (UI-related)</p> <code>viewport</code> <code>Dict[str, Any]</code> <p>The viewport of the flow. We ignore this (UI-related)</p> <code>agents</code> <code>WaldiezAgents</code> <p>The agents of the flow: users: List[WaldiezUserProxy] assistants: List[WaldiezAssistant] managers: List[WaldiezGroupManager] rag_users : List[WaldiezRagUser] See <code>WaldiezAgents</code> for more info.</p> <code>models</code> <code>List[WaldiezModel]</code> <p>The models of the flow. See <code>WaldiezModel</code>.</p> <code>skills</code> <code>List[WaldiezSkill]</code> <p>The skills of the flow. See <code>WaldiezSkill</code>.</p> <code>chats</code> <code>List[WaldiezChat]</code> <p>The chats of the flow. See <code>WaldiezChat</code>.</p> <code>is_async</code> <code>bool</code> <p>Whether the flow is asynchronous or not.</p> <code>cache_seed</code> <code>Optional[int]</code> <p>The seed for the cache. If None, the seed is not set. Default is 41.</p>"},{"location":"reference/python/models/flow.html#waldiez.models.flow.flow_data.WaldiezFlowData.validate_flow_chats","title":"<code>validate_flow_chats() -&gt; Self</code>","text":"<p>Validate the flow chats.</p> <p>Returns:</p> Type Description <code>WaldiezFlowData</code> <p>The flow data.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If there is a chat with a prerequisite that does not exist.</p> Source code in <code>waldiez/models/flow/flow_data.py</code> <pre><code>@model_validator(mode=\"after\")\ndef validate_flow_chats(self) -&gt; Self:\n    \"\"\"Validate the flow chats.\n\n    Returns\n    -------\n    WaldiezFlowData\n        The flow data.\n\n    Raises\n    ------\n    ValueError\n        If there is a chat with a prerequisite that does not exist.\n    \"\"\"\n    self.chats = sorted(self.chats, key=lambda x: x.order)\n    # in async, ag2 uses the \"chat_id\" field (and it must be an int):\n    # ```\n    #    prerequisites = []\n    #    for chat_info in chat_queue:\n    #        if \"chat_id\" not in chat_info:\n    #            raise ValueError(\n    #               \"Each chat must have a unique id for \"\n    #               \"async multi-chat execution.\"\n    #            )\n    #     chat_id = chat_info[\"chat_id\"]\n    #     pre_chats = chat_info.get(\"prerequisites\", [])\n    #     for pre_chat_id in pre_chats:\n    #         if not isinstance(pre_chat_id, int):\n    #             raise ValueError(\"Prerequisite chat id is not int.\")\n    #         prerequisites.append((chat_id, pre_chat_id))\n    #    return prerequisites\n    # ```\n    id_to_chat_id: Dict[str, int] = {}\n    for index, chat in enumerate(self.chats):\n        id_to_chat_id[chat.id] = index\n        chat.set_chat_id(index)\n    if not self.is_async:\n        return self\n    # also update the chat prerequisites (if async)\n    #  we have ids(str), not chat_ids(int)\n    for chat in self.chats:\n        chat_prerequisites = []\n        for chat_id in chat.data.prerequisites:\n            if chat_id not in id_to_chat_id:  # pragma: no cover\n                raise ValueError(\n                    f\"Chat with id {chat_id} not found in the flow.\"\n                )\n            chat_prerequisites.append(id_to_chat_id[chat_id])\n        chat.set_prerequisites(chat_prerequisites)\n    return self\n</code></pre>"},{"location":"reference/python/models/model.html","title":"Model","text":"<p>Waldiez model model.</p> <p>Waldiez Model Data.</p>"},{"location":"reference/python/models/model.html#waldiez.models.model.model.WaldiezModel","title":"<code>WaldiezModel</code>","text":"<p>               Bases: <code>WaldiezBase</code></p> <p>Waldiez Model class.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>str</code> <p>The ID of the model.</p> <code>name</code> <code>str</code> <p>The name of the model.</p> <code>description</code> <code>str</code> <p>The description of the model.</p> <code>tags</code> <code>List[str]</code> <p>The tags of the model.</p> <code>requirements</code> <code>List[str]</code> <p>The requirements of the model.</p> <code>created_at</code> <code>str</code> <p>The date and time when the model was created.</p> <code>updated_at</code> <code>str</code> <p>The date and time when the model was last updated.</p> <code>data</code> <code>WaldiezModelData</code> <p>The data of the model. See <code>waldiez.models.model.WaldiezModelData</code> for more information.</p>"},{"location":"reference/python/models/model.html#waldiez.models.model.model.WaldiezModel.api_key","title":"<code>api_key: str</code>  <code>property</code>","text":"<p>Get the model's api key.</p> <p>Either from the model's data or from the environment variables:</p> <pre><code>- openai: 'OPENAI_API_KEY',\n- azure: 'AZURE_API_KEY',\n- deepseek: 'DEEPSEEK_API_KEY',\n- google: 'GOOGLE_GEMINI_API_KEY',\n- anthropic: 'ANTHROPIC_API_KEY',\n- mistral: 'MISTRAL_API_KEY',\n- groq: 'GROQ_API_KEY',\n- together: 'TOGETHER_API_KEY',\n- nim: 'NIM_API_KEY',\n- cohere: 'COHERE_API_KEY',\n- other: 'OPENAI_API_KEY'\n</code></pre>"},{"location":"reference/python/models/model.html#waldiez.models.model.model.WaldiezModel.api_key_env_key","title":"<code>api_key_env_key: str</code>  <code>property</code>","text":"<p>Get the model's api key environment key to check.</p> <ul> <li>openai: 'OPENAI_API_KEY',</li> <li>azure: 'AZURE_API_KEY',</li> <li>deepseek: 'DEEPSEEK_API_KEY',</li> <li>google: 'GOOGLE_GEMINI_API_KEY',</li> <li>anthropic: 'ANTHROPIC_API_KEY',</li> <li>mistral: 'MISTRAL_API_KEY',</li> <li>groq: 'GROQ_API_KEY',</li> <li>together: 'TOGETHER_API_KEY',</li> <li>nim: 'NIM_API_KEY',</li> <li>cohere: 'COHERE_API_KEY',</li> <li>other: 'OPENAI_API_KEY'</li> </ul>"},{"location":"reference/python/models/model.html#waldiez.models.model.model.WaldiezModel.get_llm_config","title":"<code>get_llm_config(skip_price: bool = False) -&gt; Dict[str, Any]</code>","text":"<p>Get the model's llm config.</p> <p>Parameters:</p> Name Type Description Default <code>skip_price</code> <code>bool</code> <p>Whether to skip the price, by default False</p> <code>False</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The model's llm config dictionary.</p> Source code in <code>waldiez/models/model/model.py</code> <pre><code>def get_llm_config(self, skip_price: bool = False) -&gt; Dict[str, Any]:\n    \"\"\"Get the model's llm config.\n\n    Parameters\n    ----------\n    skip_price : bool, optional\n        Whether to skip the price, by default False\n\n    Returns\n    -------\n    Dict[str, Any]\n        The model's llm config dictionary.\n    \"\"\"\n    _llm_config: Dict[str, Any] = {}\n    _llm_config[\"model\"] = self.name\n    for attr, atr_type in [\n        (\"base_url\", str),\n        (\"max_tokens\", int),\n        # (\"temperature\", float),\n        (\"top_p\", float),\n        (\"api_version\", str),\n        (\"default_headers\", dict),\n    ]:\n        value = getattr(self.data, attr)\n        if value and isinstance(value, atr_type):\n            _llm_config[attr] = value\n    if self.data.api_type not in [\"nim\", \"other\"]:\n        _llm_config[\"api_type\"] = self.data.api_type\n    other_attrs = [\"api_key\"] if skip_price else [\"api_key\", \"price\"]\n    for attr in other_attrs:\n        value = getattr(self, attr)\n        if value:\n            _llm_config[attr] = value\n    return set_default_base_url(_llm_config, self.data.api_type)\n</code></pre>"},{"location":"reference/python/models/model.html#waldiez.models.model.model.WaldiezModel.price","title":"<code>price: Optional[List[float]]</code>  <code>property</code>","text":"<p>Get the model's price.</p>"},{"location":"reference/python/models/model.html#waldiez.models.model.model.set_default_base_url","title":"<code>set_default_base_url(llm_config: Dict[str, Any], api_type: WaldiezModelAPIType) -&gt; Dict[str, Any]</code>","text":"<p>Set the default base url if not provided.</p> <p>Parameters:</p> Name Type Description Default <code>llm_config</code> <code>Dict[str, Any]</code> <p>The llm config dictionary.</p> required <code>api_type</code> <code>str</code> <p>The api type.</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The llm config dictionary with the default base url set.</p> Source code in <code>waldiez/models/model/model.py</code> <pre><code>def set_default_base_url(\n    llm_config: Dict[str, Any], api_type: WaldiezModelAPIType\n) -&gt; Dict[str, Any]:\n    \"\"\"Set the default base url if not provided.\n\n    Parameters\n    ----------\n    llm_config : Dict[str, Any]\n        The llm config dictionary.\n    api_type : str\n        The api type.\n\n    Returns\n    -------\n    Dict[str, Any]\n        The llm config dictionary with the default base url set.\n    \"\"\"\n    dict_copy = llm_config.copy()\n    if \"base_url\" not in llm_config or not llm_config[\"base_url\"]:\n        if MODEL_NEEDS_BASE_URL.get(api_type, True):\n            dict_copy[\"base_url\"] = DEFAULT_BASE_URLS.get(api_type, \"\")\n    if (\n        not llm_config.get(\"base_url\", \"\")\n        and MODEL_NEEDS_BASE_URL.get(api_type, True) is False\n    ):\n        dict_copy.pop(\"base_url\", None)\n    return dict_copy\n</code></pre>"},{"location":"reference/python/models/model.html#waldiez.models.model.model_data.WaldiezModelAPIType","title":"<code>WaldiezModelAPIType = Literal['openai', 'azure', 'deepseek', 'google', 'anthropic', 'mistral', 'groq', 'together', 'nim', 'cohere', 'other']</code>  <code>module-attribute</code>","text":"<p>Possible API types for the model.</p>"},{"location":"reference/python/models/model.html#waldiez.models.model.model_data.WaldiezModelData","title":"<code>WaldiezModelData</code>","text":"<p>               Bases: <code>WaldiezBase</code></p> <p>Waldiez Model Data.</p> <p>Attributes:</p> Name Type Description <code>base_url</code> <code>Optional[str]</code> <p>The base url of the model, by default None.</p> <code>api_key</code> <code>Optional[str]</code> <p>The api key to use with the model, by default None.</p> <code>api_type</code> <code>WaldiezModelAPIType</code> <p>The api type of the model.</p> <code>api_version</code> <code>Optional[str]</code> <p>The api version of the model, by default None.</p> <code>temperature</code> <code>Optional[float]</code> <p>The temperature of the model, by default None.</p> <code>top_p</code> <code>Optional[float]</code> <p>The top p of the model, by default None.</p> <code>max_tokens</code> <code>Optional[int]</code> <p>The max tokens of the model, by default None.</p> <code>default_headers</code> <code>Dict[str, str]</code> <p>The default headers of the model.</p> <code>price</code> <code>Optional[WaldiezModelPrice]</code> <p>The price of the model, by default None.</p>"},{"location":"reference/python/models/model.html#waldiez.models.model.model_data.WaldiezModelPrice","title":"<code>WaldiezModelPrice</code>","text":"<p>               Bases: <code>WaldiezBase</code></p> <p>Model Price.</p> <p>Attributes:</p> Name Type Description <code>prompt_price_per_1k</code> <code>float</code> <p>The prompt price per 1k tokens.</p> <code>completion_token_price_per_1k</code> <code>float</code> <p>The completion token price per 1k tokens.</p>"},{"location":"reference/python/models/skill.html","title":"Skill","text":"<p>Waldiez Skill model.</p> <p>Waldiez Skill model.</p> <p>Waldiez Skill types.</p>"},{"location":"reference/python/models/skill.html#waldiez.models.skill.skill.WaldiezSkill","title":"<code>WaldiezSkill</code>","text":"<p>               Bases: <code>WaldiezBase</code></p> <p>Waldiez Skill.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>str</code> <p>The ID of the skill.</p> <code>type</code> <code>Literal['skill']</code> <p>The type of the \"node\" in a graph: \"skill\".</p> <code>name</code> <code>str</code> <p>The name of the skill.</p> <code>description</code> <code>str</code> <p>The description of the skill.</p> <code>tags</code> <code>List[str]</code> <p>The tags of the skill.</p> <code>requirements</code> <code>List[str]</code> <p>The requirements of the skill.</p> <code>created_at</code> <code>str</code> <p>The date and time when the skill was created.</p> <code>updated_at</code> <code>str</code> <p>The date and time when the skill was last updated.</p> <code>data</code> <code>WaldiezSkillData</code> <p>The data of the skill. See <code>WaldiezSkillData</code>.</p>"},{"location":"reference/python/models/skill.html#waldiez.models.skill.skill.WaldiezSkill.content","title":"<code>content: str</code>  <code>property</code>","text":"<p>Get the content (source) of the skill.</p>"},{"location":"reference/python/models/skill.html#waldiez.models.skill.skill.WaldiezSkill.get_content","title":"<code>get_content() -&gt; str</code>","text":"<p>Get the content of the skill.</p> <p>Returns:</p> Type Description <code>str</code> <p>The content of the skill.</p> Source code in <code>waldiez/models/skill/skill.py</code> <pre><code>def get_content(self) -&gt; str:\n    \"\"\"Get the content of the skill.\n\n    Returns\n    -------\n    str\n        The content of the skill.\n    \"\"\"\n    if self.is_shared or self.is_interop:\n        return self.data.content\n    # if custom, only the function content\n    return get_function(self.data.content, self.name)\n</code></pre>"},{"location":"reference/python/models/skill.html#waldiez.models.skill.skill.WaldiezSkill.get_imports","title":"<code>get_imports() -&gt; Tuple[List[str], List[str]]</code>","text":"<p>Get the skill imports.</p> <p>Returns:</p> Type Description <code>Tuple[List[str], List[str]]</code> <p>The builtin and external imports.</p> Source code in <code>waldiez/models/skill/skill.py</code> <pre><code>def get_imports(self) -&gt; Tuple[List[str], List[str]]:\n    \"\"\"Get the skill imports.\n\n    Returns\n    -------\n    Tuple[List[str], List[str]]\n        The builtin and external imports.\n    \"\"\"\n    return self._skill_imports\n</code></pre>"},{"location":"reference/python/models/skill.html#waldiez.models.skill.skill.WaldiezSkill.is_interop","title":"<code>is_interop: bool</code>  <code>property</code>","text":"<p>Check if the skill is interoperability.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if the skill is interoperability, False otherwise.</p>"},{"location":"reference/python/models/skill.html#waldiez.models.skill.skill.WaldiezSkill.is_shared","title":"<code>is_shared: bool</code>  <code>property</code>","text":"<p>Check if the skill is shared.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if the skill is shared, False otherwise.</p>"},{"location":"reference/python/models/skill.html#waldiez.models.skill.skill.WaldiezSkill.load","title":"<code>load(data_or_path: Union[str, Path, Dict[str, Any]]) -&gt; WaldiezSkill</code>  <code>staticmethod</code>","text":"<p>Load a skill from a read-only file.</p> <p>Parameters:</p> Name Type Description Default <code>data_or_path</code> <code>Union[str, Path, Dict[str, Any]]</code> <p>The path to the read-only file or the loaded data.</p> required <p>Returns:</p> Type Description <code>WaldiezSkill</code> <p>The skill.</p> <p>Raises:</p> Type Description <code>FileNotFoundError</code> <p>If the file is not found.</p> <code>ValueError</code> <p>If the JSON is invalid or the data is invalid.</p> Source code in <code>waldiez/models/skill/skill.py</code> <pre><code>@staticmethod\ndef load(data_or_path: Union[str, Path, Dict[str, Any]]) -&gt; \"WaldiezSkill\":\n    \"\"\"Load a skill from a read-only file.\n\n    Parameters\n    ----------\n    data_or_path : Union[str, Path, Dict[str, Any]]\n        The path to the read-only file or the loaded data.\n\n    Returns\n    -------\n    WaldiezSkill\n        The skill.\n\n    Raises\n    ------\n    FileNotFoundError\n        If the file is not found.\n    ValueError\n        If the JSON is invalid or the data is invalid.\n    \"\"\"\n    if isinstance(data_or_path, dict):\n        return WaldiezSkill.model_validate(data_or_path)\n    if not isinstance(data_or_path, Path):\n        data_or_path = Path(data_or_path)\n    resolved = data_or_path.resolve()\n    if not resolved.is_file():\n        raise FileNotFoundError(f\"File not found: {resolved}\")\n    with resolved.open(\"r\", encoding=\"utf-8\") as file:\n        data_string = file.read()\n        try:\n            data_dict = json.loads(data_string)\n        except BaseException as exc:  # pylint: disable=broad-except\n            raise ValueError(f\"Invalid WaldiezSkill/JSON: {exc}\") from exc\n        return WaldiezSkill.model_validate(data_dict)\n</code></pre>"},{"location":"reference/python/models/skill.html#waldiez.models.skill.skill.WaldiezSkill.secrets","title":"<code>secrets: Dict[str, str]</code>  <code>property</code>","text":"<p>Get the secrets (environment variables) of the skill.</p>"},{"location":"reference/python/models/skill.html#waldiez.models.skill.skill.WaldiezSkill.skill_type","title":"<code>skill_type: WaldiezSkillType</code>  <code>property</code>","text":"<p>Get the skill type.</p> <p>Returns:</p> Type Description <code>WaldiezSkillType</code> <p>The type of the skill: [shared, custom, langchain, crewai].</p>"},{"location":"reference/python/models/skill.html#waldiez.models.skill.skill.WaldiezSkill.validate_data","title":"<code>validate_data() -&gt; Self</code>","text":"<p>Validate the data.</p> <p>Returns:</p> Type Description <code>WaldiezSkill</code> <p>The skill.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the skill name is not in the content. If the skill content is invalid.</p> Source code in <code>waldiez/models/skill/skill.py</code> <pre><code>@model_validator(mode=\"after\")\ndef validate_data(self) -&gt; Self:\n    \"\"\"Validate the data.\n\n    Returns\n    -------\n    WaldiezSkill\n        The skill.\n\n    Raises\n    ------\n    ValueError\n        If the skill name is not in the content.\n        If the skill content is invalid.\n    \"\"\"\n    self._validate_custom_skill()\n    self._validate_interop_skill()\n    self._skill_imports = gather_code_imports(\n        self.data.content, self.is_interop\n    )\n    # remove the imports from the content\n    # we 'll place them at the top of the file\n    all_imports = self._skill_imports[0] + self._skill_imports[1]\n    code_lines = self.data.content.splitlines()\n    valid_lines = [\n        line\n        for line in code_lines\n        if not any(line.startswith(imp) for imp in all_imports)\n    ]\n    # remove empty lines at the beginning and end\n    # of the content\n    while valid_lines and not valid_lines[0].strip():\n        valid_lines.pop(0)\n    while valid_lines and not valid_lines[-1].strip():\n        valid_lines.pop()\n    self.data.content = \"\\n\".join(valid_lines)\n    return self\n</code></pre>"},{"location":"reference/python/models/skill.html#waldiez.models.skill.skill_data.WaldiezSkillData","title":"<code>WaldiezSkillData</code>","text":"<p>               Bases: <code>WaldiezBase</code></p> <p>Waldiez Skill Data.</p> <p>Attributes:</p> Name Type Description <code>skill_type</code> <code>WaldiezSkillType</code> <p>The type of the skill: shared, custom, langchain, crewai.</p> <code>content</code> <code>str</code> <p>The content (source code) of the skill.</p> <code>secrets</code> <code>Dict[str, str]</code> <p>The secrets (environment variables) of the skill.</p>"},{"location":"reference/python/models/skill.html#waldiez.models.skill.skill_type.WaldiezSkillType","title":"<code>WaldiezSkillType = Literal['shared', 'custom', 'langchain', 'crewai']</code>  <code>module-attribute</code>","text":"<p>Possible types of a Waldiez Skill.</p>"},{"location":"reference/python/models/agents/index.html","title":"Index","text":"<p>Waldiez agents model.</p>"},{"location":"reference/python/models/agents/index.html#waldiez.models.agents.agents.WaldiezAgents","title":"<code>WaldiezAgents</code>","text":"<p>               Bases: <code>WaldiezBase</code></p> <p>Waldiez agents model.</p> <p>Attributes:</p> Name Type Description <code>users</code> <code>List[WaldiezUserProxy]</code> <p>User proxy agents.</p> <code>assistants</code> <code>List[WaldiezAssistant]</code> <p>Assistant agents.</p> <code>managers</code> <code>List[WaldiezGroupManager]</code> <p>Group chat managers.</p> <code>rag_users</code> <code>List[WaldiezRagUser]</code> <p>RAG user agents.</p>"},{"location":"reference/python/models/agents/index.html#waldiez.models.agents.agents.WaldiezAgents.members","title":"<code>members: Iterator[WaldiezAgent]</code>  <code>property</code>","text":"<p>Get all agents.</p> <p>Yields:</p> Type Description <code>WaldiezAgent</code> <p>The agents.</p>"},{"location":"reference/python/models/agents/index.html#waldiez.models.agents.agents.WaldiezAgents.validate_agents","title":"<code>validate_agents() -&gt; Self</code>","text":"<p>Validate the agents.</p> <ul> <li>At least two agents are required.</li> <li>All the agent IDs must be unique.</li> </ul> <p>Returns:</p> Type Description <code>WaldiezAgents</code> <p>The agents.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the agents are invalid.</p> Source code in <code>waldiez/models/agents/agents.py</code> <pre><code>@model_validator(mode=\"after\")\ndef validate_agents(self) -&gt; Self:\n    \"\"\"Validate the agents.\n\n    - At least two agents are required.\n    - All the agent IDs must be unique.\n\n    Returns\n    -------\n    WaldiezAgents\n        The agents.\n\n    Raises\n    ------\n    ValueError\n        If the agents are invalid.\n    \"\"\"\n    all_agent_ids = [agent.id for agent in self.members]\n    if len(all_agent_ids) &lt; 1:\n        raise ValueError(\"At least one agent is required.\")\n    if len(all_agent_ids) != len(set(all_agent_ids)):\n        raise ValueError(\"Agent IDs must be unique.\")\n    return self\n</code></pre>"},{"location":"reference/python/models/agents/index.html#waldiez.models.agents.agents.WaldiezAgents.validate_flow","title":"<code>validate_flow(model_ids: List[str], skill_ids: List[str]) -&gt; None</code>","text":"<p>Validate the flow of the agents.</p> <ul> <li>Validate the linked models (the referenced model ids must exist).</li> <li>Validate the linked skills (the referenced skill ids must exist).</li> <li>Validate the code execution (the referenced functions must exist).</li> </ul> <p>Parameters:</p> Name Type Description Default <code>model_ids</code> <code>List[str]</code> <p>The list of model IDs.</p> required <code>skill_ids</code> <code>List[str]</code> <p>The list of skill IDs.</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>If the flow is invalid.</p> Source code in <code>waldiez/models/agents/agents.py</code> <pre><code>def validate_flow(self, model_ids: List[str], skill_ids: List[str]) -&gt; None:\n    \"\"\"Validate the flow of the agents.\n\n    - Validate the linked models (the referenced model ids must exist).\n    - Validate the linked skills (the referenced skill ids must exist).\n    - Validate the code execution (the referenced functions must exist).\n\n    Parameters\n    ----------\n    model_ids : List[str]\n        The list of model IDs.\n    skill_ids : List[str]\n        The list of skill IDs.\n\n    Raises\n    ------\n    ValueError\n        If the flow is invalid.\n    \"\"\"\n    all_agent_ids = [agent.id for agent in self.members]\n    for agent in self.members:\n        agent.validate_linked_models(model_ids)\n        agent.validate_linked_skills(skill_ids, agent_ids=all_agent_ids)\n        agent.validate_code_execution(skill_ids=skill_ids)\n        if agent.agent_type == \"manager\" and isinstance(\n            agent, WaldiezGroupManager\n        ):\n            agent.validate_transitions(agent_ids=all_agent_ids)\n</code></pre>"},{"location":"reference/python/models/agents/agent.html","title":"Agent","text":"<p>Base agent class to be inherited by all agents.</p> <p>Common data structures for agents.</p> <p>Waldiez Agent types.</p> <p>Waldiez Agent Code Execution Configuration.</p> <p>Waldiez Agent Skill Model.</p> <p>Waldiez Agent Nested Chat.</p> <p>Waldiez Agent Termination Message Check.</p> <p>Waldiez Agent Teachability.</p>"},{"location":"reference/python/models/agents/agent.html#waldiez.models.agents.agent.agent.WaldiezAgent","title":"<code>WaldiezAgent</code>","text":"<p>               Bases: <code>WaldiezBase</code></p> <p>Waldiez Agent.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>str</code> <p>The ID of the agent.</p> <code>type</code> <code>Literal['agent']</code> <p>The type of the \"node\" in a graph: \"agent\"</p> <code>agent_type</code> <code>WaldiezAgentType</code> <p>The type of the agent</p> <code>name</code> <code>str</code> <p>The name of the agent.</p> <code>description</code> <code>str</code> <p>The description of the agent.</p> <code>tags</code> <code>List[str]</code> <p>Tags for this agent.</p> <code>requirements</code> <code>List[str]</code> <p>Python requirements for the agent.</p> <code>created_at</code> <code>str</code> <p>The date and time when the agent was created.</p> <code>updated_at</code> <code>str</code> <p>The date and time when the agent was last updated.</p> <code>data</code> <code>WaldiezAgentData</code> <p>The data (properties) of this agent. See <code>waldiez.models.agents.WaldiezAgentData</code> for more info.</p> <p>Methods:</p> Name Description <code>validate_linked_skills</code> <p>Validate the skills linked to the agent.</p> <code>validate_linked_models</code> <p>Validate the models linked to the agent.</p>"},{"location":"reference/python/models/agents/agent.html#waldiez.models.agents.agent.agent.WaldiezAgent.ag2_class","title":"<code>ag2_class: str</code>  <code>property</code>","text":"<p>Return the AG2 class of the agent.</p>"},{"location":"reference/python/models/agents/agent.html#waldiez.models.agents.agent.agent.WaldiezAgent.ag2_imports","title":"<code>ag2_imports: Set[str]</code>  <code>property</code>","text":"<p>Return the AG2 imports of the agent.</p>"},{"location":"reference/python/models/agents/agent.html#waldiez.models.agents.agent.agent.WaldiezAgent.validate_code_execution","title":"<code>validate_code_execution(skill_ids: List[str]) -&gt; None</code>","text":"<p>Validate the code execution config.</p> <p>Parameters:</p> Name Type Description Default <code>skill_ids</code> <code>List[str]</code> <p>The list of skill IDs.</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>If a function is not found</p> Source code in <code>waldiez/models/agents/agent/agent.py</code> <pre><code>def validate_code_execution(self, skill_ids: List[str]) -&gt; None:\n    \"\"\"Validate the code execution config.\n\n    Parameters\n    ----------\n    skill_ids : List[str]\n        The list of skill IDs.\n\n    Raises\n    ------\n    ValueError\n        If a function is not found\n    \"\"\"\n    # if the config dict has functions, make sure they can be found\n    if isinstance(\n        self.data.code_execution_config, WaldiezAgentCodeExecutionConfig\n    ):\n        for function in self.data.code_execution_config.functions:\n            if function not in skill_ids:\n                raise ValueError(\n                    f\"Function '{function}' not found in skills\"\n                )\n</code></pre>"},{"location":"reference/python/models/agents/agent.html#waldiez.models.agents.agent.agent.WaldiezAgent.validate_linked_models","title":"<code>validate_linked_models(model_ids: List[str]) -&gt; None</code>","text":"<p>Validate the models.</p> <p>Parameters:</p> Name Type Description Default <code>model_ids</code> <code>List[str]</code> <p>The list of model IDs.</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>If a model is not found</p> Source code in <code>waldiez/models/agents/agent/agent.py</code> <pre><code>def validate_linked_models(self, model_ids: List[str]) -&gt; None:\n    \"\"\"Validate the models.\n\n    Parameters\n    ----------\n    model_ids : List[str]\n        The list of model IDs.\n\n    Raises\n    ------\n    ValueError\n        If a model is not found\n    \"\"\"\n    # if the config dict has models, make sure they can be found\n    for model in self.data.model_ids:\n        if model not in model_ids:\n            raise ValueError(\n                f\"Model '{model}' not found in agent's {self.id} models\"\n            )\n</code></pre>"},{"location":"reference/python/models/agents/agent.html#waldiez.models.agents.agent.agent.WaldiezAgent.validate_linked_skills","title":"<code>validate_linked_skills(skill_ids: List[str], agent_ids: List[str]) -&gt; None</code>","text":"<p>Validate the skills.</p> <p>Parameters:</p> Name Type Description Default <code>skill_ids</code> <code>List[str]</code> <p>The list of skill IDs.</p> required <code>agent_ids</code> <code>List[str]</code> <p>The list of agent IDs.</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>If a skill or agent is not found</p> Source code in <code>waldiez/models/agents/agent/agent.py</code> <pre><code>def validate_linked_skills(\n    self, skill_ids: List[str], agent_ids: List[str]\n) -&gt; None:\n    \"\"\"Validate the skills.\n\n    Parameters\n    ----------\n    skill_ids : List[str]\n        The list of skill IDs.\n    agent_ids : List[str]\n        The list of agent IDs.\n\n    Raises\n    ------\n    ValueError\n        If a skill or agent is not found\n    \"\"\"\n    # if the config dict has skills, make sure they can be found\n    for skill in self.data.skills:\n        if skill.id not in skill_ids:\n            raise ValueError(\n                f\"Skill '{skill.id}' not found in agent's {self.id} skills\"\n            )\n        if skill.executor_id not in agent_ids:\n            raise ValueError(\n                f\"Agent '{skill.executor_id}' not found in agents\"\n            )\n</code></pre>"},{"location":"reference/python/models/agents/agent.html#waldiez.models.agents.agent.agent_data.WaldiezAgentData","title":"<code>WaldiezAgentData</code>","text":"<p>               Bases: <code>WaldiezBase</code></p> <p>Waldiez Agent Data.</p> <p>Attributes:</p> Name Type Description <code>system_message</code> <code>Optional[str]</code> <p>The agent's system message. Default: None (depends on the agent's type)</p> <code>human_input_mode</code> <code>Literal['ALWAYS', 'NEVER', 'TERMINATE']</code> <p>The human input mode to use for the agent.</p> <code>code_execution_config</code> <code>Union[WaldiezAgentCodeExecutionConfig, False]</code> <p>The code execution config. Either False (no execution) or a dict.</p> <code>agent_default_auto_reply</code> <code>Optional[str]</code> <p>The agent's default auto reply when no input is received.</p> <code>max_consecutive_auto_reply</code> <code>Optional[int]</code> <p>The maximum number or consecutive auto replies to use before ending the chat. Default: None (no limit).</p> <code>termination</code> <code>WaldiezAgentTerminationMessage</code> <p>The message termination check to use (keyword, method, none)</p> <code>teachability</code> <code>WaldiezAgentTeachability</code> <p>The agent teachability configuration.</p> <code>model_ids</code> <code>List[str]</code> <p>A list of models (their ids) to link with the agent.</p> <code>skills</code> <code>List[WaldiezAgentLinkedSkill]</code> <p>A list of skills (id and executor) to register.</p> <code>nested_chats</code> <code>List[WaldiezAgentNestedChat]</code> <p>A list of nested chats (triggered_by, messages), to register.</p> <code>is_multimodal</code> <code>bool</code> <p>A flag to indicate if the agent is multimodal.</p>"},{"location":"reference/python/models/agents/agent.html#waldiez.models.agents.agent.agent_type.WaldiezAgentType","title":"<code>WaldiezAgentType = Literal['user', 'assistant', 'manager', 'rag_user', 'swarm', 'reasoning', 'captain']</code>  <code>module-attribute</code>","text":"<p>Possible types of a Waldiez Agent: user, assistant, manager, rag_user, swarm, reasoning, captain.</p>"},{"location":"reference/python/models/agents/agent.html#waldiez.models.agents.agent.code_execution.WaldiezAgentCodeExecutionConfig","title":"<code>WaldiezAgentCodeExecutionConfig</code>","text":"<p>               Bases: <code>WaldiezBase</code></p> <p>Waldiez Agent Code Execution Configuration.</p> <p>Attributes:</p> Name Type Description <code>work_dir</code> <code>Optional[str]</code> <p>The working directory for the code execution.</p> <code>use_docker</code> <code>Optional[bool]</code> <p>Run the code in a docker container.</p> <code>timeout</code> <code>Optional[float]</code> <p>The timeout for the code execution. By default None (no timeout).</p> <code>last_n_messages</code> <code>Optional[int]</code> <p>The chat's last n messages to consider for the code execution.</p> <code>functions</code> <code>Optional[List[str]]</code> <p>If not using docker, a list of function ids to use.</p>"},{"location":"reference/python/models/agents/agent.html#waldiez.models.agents.agent.linked_skill.WaldiezAgentLinkedSkill","title":"<code>WaldiezAgentLinkedSkill</code>","text":"<p>               Bases: <code>WaldiezBase</code></p> <p>Waldiez Agent Linked Skill.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>str</code> <p>The id of the skill to use.</p> <code>executor_id</code> <code>str</code> <p>The id of the agent to use that skill.</p>"},{"location":"reference/python/models/agents/agent.html#waldiez.models.agents.agent.nested_chat.WaldiezAgentNestedChat","title":"<code>WaldiezAgentNestedChat</code>","text":"<p>               Bases: <code>WaldiezBase</code></p> <p>Waldiez Agent Nested Chat.</p> <p>Attributes:</p> Name Type Description <code>triggered_by</code> <code>List[str]</code> <p>A list of agent ids that trigger the nested chat.</p> <code>messages</code> <code>List[WaldiezAgentNestedChatMessage]</code> <p>The list of messages (chat ids and 'is_reply'z) to include the in the nested chat registration.</p>"},{"location":"reference/python/models/agents/agent.html#waldiez.models.agents.agent.nested_chat.WaldiezAgentNestedChatMessage","title":"<code>WaldiezAgentNestedChatMessage</code>","text":"<p>               Bases: <code>WaldiezBase</code></p> <p>Waldiez Agent nested chat message.</p> <p>A reference to a chat's message or reply in a nested chat</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>str</code> <p>The id of the chat.</p> <code>is_reply</code> <code>bool</code> <p>Whether to use the reply in the chat or not.</p>"},{"location":"reference/python/models/agents/agent.html#waldiez.models.agents.agent.termination_message.WaldiezAgentTerminationMessage","title":"<code>WaldiezAgentTerminationMessage</code>","text":"<p>               Bases: <code>WaldiezBase</code></p> <p>Waldiez Agent Termination Message Check.</p> <p>Attributes:</p> Name Type Description <code>type</code> <code>Literal['none', 'keyword', 'method']</code> <p>The type of the termination check to use: \"none\", \"keyword\", \"method\"</p> <code>keywords</code> <code>List[str]</code> <p>If the type is \"keyword\", the keywords to search in the message.</p> <code>criterion</code> <code>Optional[Literal[\"found\", \"ending\", \"exact\"]] = None</code> <p>If the type is \"keyword\", the criterion to use (e.g.: in, endswith, ==)</p> <code>method_content</code> <code>Optional[str]</code> <p>If the type is \"method\", the code of the method to use. The method must be called <code>is_termination_message</code>, have one argument (<code>message</code>) which is a dict, and return a bool (whether the message is a termination message or not.)</p> <code>string</code> <code>str</code> <p>The value of the termination message.</p> <p>Methods:</p> Name Description <code>validate_termination_message</code> <p>Validate the termination message configuration.</p>"},{"location":"reference/python/models/agents/agent.html#waldiez.models.agents.agent.termination_message.WaldiezAgentTerminationMessage.get_termination_function","title":"<code>get_termination_function(name_prefix: Optional[str] = None, name_suffix: Optional[str] = None) -&gt; Tuple[str, str]</code>","text":"<p>Get the termination function.</p> <p>Parameters:</p> Name Type Description Default <code>name_prefix</code> <code>str</code> <p>The function name prefix.</p> <code>None</code> <code>name_suffix</code> <code>str</code> <p>The function name suffix.</p> <code>None</code> <p>Returns:</p> Type Description <code>Tuple[str, str]</code> <p>The termination function and the function name.</p> Source code in <code>waldiez/models/agents/agent/termination_message.py</code> <pre><code>def get_termination_function(\n    self,\n    name_prefix: Optional[str] = None,\n    name_suffix: Optional[str] = None,\n) -&gt; Tuple[str, str]:\n    \"\"\"Get the termination function.\n\n    Parameters\n    ----------\n    name_prefix : str\n        The function name prefix.\n    name_suffix : str\n        The function name suffix.\n\n    Returns\n    -------\n    Tuple[str, str]\n        The termination function and the function name.\n    \"\"\"\n    function_name = \"is_termination_message\"\n    if name_prefix:\n        function_name = f\"{name_prefix}_{function_name}\"\n    if name_suffix:\n        function_name = f\"{function_name}_{name_suffix}\"\n    if self.type in (\"none\", \"keyword\"):\n        return self.string, function_name\n    return (\n        generate_function(\n            function_name=function_name,\n            function_args=IS_TERMINATION_MESSAGE_ARGS,\n            function_types=IS_TERMINATION_MESSAGE_TYPES,\n            function_body=self.string,\n        ),\n        function_name,\n    )\n</code></pre>"},{"location":"reference/python/models/agents/agent.html#waldiez.models.agents.agent.termination_message.WaldiezAgentTerminationMessage.string","title":"<code>string: str</code>  <code>property</code>","text":"<p>Get the value of the termination message.</p> <ul> <li>If the type is \"none\", the value is \"None\".</li> <li>If the type is \"keyword\", the value is a lambda function that checks     if any of the keywords comply with the criterion.</li> <li>If the type is \"method\", the value is the method content.</li> </ul> <p>Returns:</p> Type Description <code>str</code> <p>The value of the termination message.</p>"},{"location":"reference/python/models/agents/agent.html#waldiez.models.agents.agent.termination_message.WaldiezAgentTerminationMessage.validate_termination_message","title":"<code>validate_termination_message() -&gt; Self</code>","text":"<p>Validate the termination message configuration.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the configuration is invalid.</p> <p>Returns:</p> Type Description <code>WaldiezAgentTerminationMessage</code> <p>The validated termination message configuration.</p> Source code in <code>waldiez/models/agents/agent/termination_message.py</code> <pre><code>@model_validator(mode=\"after\")\ndef validate_termination_message(self) -&gt; Self:\n    \"\"\"Validate the termination message configuration.\n\n    Raises\n    ------\n    ValueError\n        If the configuration is invalid.\n\n    Returns\n    -------\n    WaldiezAgentTerminationMessage\n        The validated termination message configuration.\n    \"\"\"\n    if self.type == \"method\":\n        self._validate_method_content()\n    if self.type == \"keyword\":\n        self._validate_keyword()\n    if self.type == \"none\":\n        self._string = \"None\"\n    return self\n</code></pre>"},{"location":"reference/python/models/agents/agent.html#waldiez.models.agents.agent.teachability.WaldiezAgentTeachability","title":"<code>WaldiezAgentTeachability</code>","text":"<p>               Bases: <code>WaldiezBase</code></p> <p>Waldiez Agent Teachability.</p> <p>Attributes:</p> Name Type Description <code>enabled</code> <code>bool</code> <p>Whether the teachability is enabled.</p> <code>verbosity</code> <code>Literal[0, 1, 2, 3]</code> <p>The verbosity level of the teachability. Default: 0</p> <code>reset_db</code> <code>bool</code> <p>Whether to reset the database. Default: False</p> <code>recall_threshold</code> <code>float</code> <p>The recall threshold. Default: 1.5</p> <code>max_num_retrievals</code> <code>int</code> <p>The maximum number of retrievals. Default: 10</p>"},{"location":"reference/python/models/agents/assistant.html","title":"Assistant","text":"<p>Assistant agent model.</p> <p>Assistant agent data model.</p>"},{"location":"reference/python/models/agents/assistant.html#waldiez.models.agents.assistant.assistant.WaldiezAssistant","title":"<code>WaldiezAssistant</code>","text":"<p>               Bases: <code>WaldiezAgent</code></p> <p>Assistant agent model.</p> <p>A <code>WaldiezAgent</code> with agent_type <code>assistant</code> and default <code>human_input_mode</code>: <code>\"NEVER\"</code> See <code>WaldiezAgent</code>,<code>WaldiezAssistantData</code>,<code>WaldiezAgentData</code> for more info.</p> <p>Attributes:</p> Name Type Description <code>agent_type</code> <code>Literal['assistant']</code> <p>The agent type: 'assistant' for an assistant agent</p> <code>data</code> <code>WaldiezAssistantData</code> <p>The assistant agent's data</p>"},{"location":"reference/python/models/agents/assistant.html#waldiez.models.agents.assistant.assistant_data.WaldiezAssistantData","title":"<code>WaldiezAssistantData</code>","text":"<p>               Bases: <code>WaldiezAgentData</code></p> <p>Assistant agent data class.</p> <p>The data for an agent with <code>human_input_mode</code> set to <code>\"ALWAYS\"</code> as default. See the parent's docs (<code>WaldiezAgentData</code>) for the rest of the properties.</p> <p>Attributes:</p> Name Type Description <code>human_input_mode</code> <code>Literal['ALWAYS', 'NEVER', 'TERMINATE']</code> <p>The human input mode, Defaults to <code>NEVER</code></p>"},{"location":"reference/python/models/agents/captain_agent.html","title":"Captain agent","text":"<p>Captain agent model.</p>"},{"location":"reference/python/models/agents/captain_agent.html#waldiez.models.agents.captain_agent.WaldiezCaptainAgent","title":"<code>WaldiezCaptainAgent</code>","text":"<p>               Bases: <code>WaldiezAgent</code></p> <p>Captain agent.</p> <p>A <code>WaldiezAgent</code> with agent_type <code>captain</code> and captain agent's related config for the agent. Also see <code>WaldiezAgent</code>, <code>WaldiezCaptainData</code>, <code>WaldiezAgentData</code></p> <p>Attributes:</p> Name Type Description <code>agent_type</code> <code>Literal['captain']</code> <p>The agent type: 'captain' for a captain agent</p> <code>data</code> <code>WaldiezCaptainAgentData</code> <p>The captain agent's data.</p>"},{"location":"reference/python/models/agents/captain_agent.html#waldiez.models.agents.captain_agent.WaldiezCaptainAgentData","title":"<code>WaldiezCaptainAgentData</code>","text":"<p>               Bases: <code>WaldiezAgentData</code></p> <p>Captain agent data class.</p> <p>The data for a captain agent. Extends <code>WaldiezAgentData</code>. Extra attributes: - <code>agent_lib</code>: Optional list of agent lib entries - <code>tool_lib</code>: - <code>max_round</code>: The maximum number of rounds in a group chat - <code>max_turns</code>: The maximum number of turns for a chat See the parent's docs (<code>WaldiezAgentData</code>) for the rest of the properties.</p>"},{"location":"reference/python/models/agents/captain_agent.html#waldiez.models.agents.captain_agent.WaldiezCaptainAgentLibEntry","title":"<code>WaldiezCaptainAgentLibEntry</code>","text":"<p>               Bases: <code>WaldiezBase</code></p> <p>Captain agent lib entry.</p>"},{"location":"reference/python/models/agents/captain_agent.html#waldiez.models.agents.captain_agent.captain_agent","title":"<code>captain_agent</code>","text":"<p>Waldiez captain agent model.</p>"},{"location":"reference/python/models/agents/captain_agent.html#waldiez.models.agents.captain_agent.captain_agent.WaldiezCaptainAgent","title":"<code>WaldiezCaptainAgent</code>","text":"<p>               Bases: <code>WaldiezAgent</code></p> <p>Captain agent.</p> <p>A <code>WaldiezAgent</code> with agent_type <code>captain</code> and captain agent's related config for the agent. Also see <code>WaldiezAgent</code>, <code>WaldiezCaptainData</code>, <code>WaldiezAgentData</code></p> <p>Attributes:</p> Name Type Description <code>agent_type</code> <code>Literal['captain']</code> <p>The agent type: 'captain' for a captain agent</p> <code>data</code> <code>WaldiezCaptainAgentData</code> <p>The captain agent's data.</p>"},{"location":"reference/python/models/agents/captain_agent.html#waldiez.models.agents.captain_agent.captain_agent_data","title":"<code>captain_agent_data</code>","text":"<p>Waldiez captain agent data.</p>"},{"location":"reference/python/models/agents/captain_agent.html#waldiez.models.agents.captain_agent.captain_agent_data.WaldiezCaptainAgentData","title":"<code>WaldiezCaptainAgentData</code>","text":"<p>               Bases: <code>WaldiezAgentData</code></p> <p>Captain agent data class.</p> <p>The data for a captain agent. Extends <code>WaldiezAgentData</code>. Extra attributes: - <code>agent_lib</code>: Optional list of agent lib entries - <code>tool_lib</code>: - <code>max_round</code>: The maximum number of rounds in a group chat - <code>max_turns</code>: The maximum number of turns for a chat See the parent's docs (<code>WaldiezAgentData</code>) for the rest of the properties.</p>"},{"location":"reference/python/models/agents/captain_agent.html#waldiez.models.agents.captain_agent.captain_agent_lib_entry","title":"<code>captain_agent_lib_entry</code>","text":"<p>Waldiez captain agent lib entry.</p>"},{"location":"reference/python/models/agents/captain_agent.html#waldiez.models.agents.captain_agent.captain_agent_lib_entry.WaldiezCaptainAgentLibEntry","title":"<code>WaldiezCaptainAgentLibEntry</code>","text":"<p>               Bases: <code>WaldiezBase</code></p> <p>Captain agent lib entry.</p>"},{"location":"reference/python/models/agents/group_manager.html","title":"Group manager","text":"<p>Group chat manager agent.</p> <p>Group chat manager data.</p> <p>Group chat speakers.</p>"},{"location":"reference/python/models/agents/group_manager.html#waldiez.models.agents.group_manager.group_manager.WaldiezGroupManager","title":"<code>WaldiezGroupManager</code>","text":"<p>               Bases: <code>WaldiezAgent</code></p> <p>Group chat manager agent.</p> <p>A <code>WaldiezAgent</code> with agent_type <code>manager</code>, <code>human_input_mode</code>: <code>\"NEVER\"</code> and chat group related config for the agent. Also see <code>WaldiezAgent</code>, <code>WaldiezGroupManagerData</code>, <code>WaldiezAgentData</code></p> <p>Attributes:</p> Name Type Description <code>agent_type</code> <code>Literal['manager']</code> <p>The agent type: 'manager' for a group manager agent</p> <code>data</code> <code>WaldiezGroupManagerData</code> <p>The group manager agent's data.</p> <p>Methods:</p> Name Description <code>validate_transitions</code> <p>Validate the transitions.</p>"},{"location":"reference/python/models/agents/group_manager.html#waldiez.models.agents.group_manager.group_manager.WaldiezGroupManager.validate_transitions","title":"<code>validate_transitions(agent_ids: List[str]) -&gt; None</code>","text":"<p>Validate the transitions.</p> <p>If the selection mode is <code>transition</code>:</p> <ul> <li>if <code>allow_repeat</code> is a list of agent_ids,         make sure these ids exist.</li> <li>make sure the <code>allowed_or_disallowed_transitions</code> mapping         has valid agent ids.</li> </ul> <p>Parameters:</p> Name Type Description Default <code>agent_ids</code> <code>List[str]</code> <p>The list of agent IDs.</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>If the transitions are invalid.</p> Source code in <code>waldiez/models/agents/group_manager/group_manager.py</code> <pre><code>def validate_transitions(self, agent_ids: List[str]) -&gt; None:\n    \"\"\"Validate the transitions.\n\n    If the selection mode is `transition`:\n\n    - if `allow_repeat` is a list of agent_ids,\n            make sure these ids exist.\n    - make sure the `allowed_or_disallowed_transitions` mapping\n            has valid agent ids.\n\n    Parameters\n    ----------\n    agent_ids : List[str]\n        The list of agent IDs.\n\n    Raises\n    ------\n    ValueError\n        If the transitions are invalid.\n    \"\"\"\n    speakers: WaldiezGroupManagerSpeakers = self.data.speakers\n    if speakers.selection_mode != \"transition\":\n        return\n    allow_repeat = speakers.allow_repeat\n    if isinstance(allow_repeat, list):\n        for agent_id in allow_repeat:\n            if agent_id not in agent_ids:\n                raise ValueError(f\"Invalid agent id: {agent_id}\")\n    for (\n        agent_id,\n        transitions,\n    ) in speakers.allowed_or_disallowed_transitions.items():\n        if agent_id not in agent_ids:\n            raise ValueError(f\"Invalid agent id: {agent_id}\")\n        for agent_id in transitions:\n            if agent_id not in agent_ids:\n                raise ValueError(f\"Invalid agent id: {agent_id}\")\n</code></pre>"},{"location":"reference/python/models/agents/group_manager.html#waldiez.models.agents.group_manager.group_manager_data.WaldiezGroupManagerData","title":"<code>WaldiezGroupManagerData</code>","text":"<p>               Bases: <code>WaldiezAgentData</code></p> <p>Group chat manager data class.</p> <p>The data for an agent with <code>human_input_mode</code> set to \"NEVER\" as default. and the chat group's related extra properties. See the parent's docs (<code>WaldiezAgentData</code>) for the rest of the properties.</p> <p>Attributes:</p> Name Type Description <code>human_input_mode</code> <code>Literal['ALWAYS', 'NEVER', 'TERMINATE']</code> <p>The human input mode, Defaults to <code>NEVER</code></p> <code>max_round</code> <code>Optional[int]</code> <p>The maximum number of rounds to have in the group.</p> <code>admin_name</code> <code>Optional[str]</code> <p>The name of the group's admin. Make sure you use a name of an agent in the group.</p> <code>speakers</code> <code>WaldiezGroupManagerSpeakers</code> <p>The rules for the speaker selection and repetition</p> <code>enable_clear_history</code> <code>Optional[bool]</code> <p>Enable clearing the history in the chat group.</p> <code>send_introductions</code> <code>bool</code> <p>Send the group members' introductions.</p>"},{"location":"reference/python/models/agents/group_manager.html#waldiez.models.agents.group_manager.speakers.WaldiezGroupManagerSpeakers","title":"<code>WaldiezGroupManagerSpeakers</code>","text":"<p>               Bases: <code>WaldiezBase</code></p> <p>Group chat speakers.</p> <p>If the method for the speaker selection is <code>custom</code> the <code>selection_custom_method</code> contents (source code) will be used. The method must be called <code>custom_speaker_selection</code>, have two arguments:</p> <ul> <li>last_speaker: <code>autogen.ConversableAgent</code></li> <li>groupchat: <code>autogen.GroupChat</code></li> </ul> <p>and return a <code>Union[Agent, str, None]</code></p> Example <pre><code>{\n    \"selectionMethod\": \"custom\",\n    \"selectionCustomMethod\": (\n        \"def custom_speaker_selection(last_speaker, groupchat):\\\\n\"\n        \"    return last_speaker\"\n    ),\n    ...\n}\n</code></pre> <p>Attributes:</p> Name Type Description <code>selection_method</code> <code>WaldiezGroupManagerSpeakersSelectionMethod</code> <p>The next speaker selection method.</p> <code>selection_custom_method</code> <code>Optional[str]</code> <p>Method for custom selection.</p> <code>max_retries_for_selecting</code> <code>Optional[int]</code> <p>Max retries for selecting a speaker.</p> <code>selection_mode</code> <code>WaldiezGroupManagerSpeakersSelectionMode</code> <p>Selection mode.</p> <code>allow_repeat</code> <code>Union[bool, List[str]]</code> <p>Allow repeat.</p> <code>allowed_or_disallowed_transitions</code> <code>Dict[str, List[str]]</code> <p>Allowed or disallowed transitions.</p> <code>transitions_type</code> <code>WaldiezGroupManagerSpeakersTransitionsType</code> <p>The type of transition rules to use if if a mapping (agent =&gt; List[agents]) is used: <code>allowed</code> (default) or <code>disallowed</code></p> <code>custom_method_string</code> <code>Optional[str]</code> <p>The custom method string.</p> <p>Methods:</p> Name Description <code>validate_group_speakers_config</code> <p>Validate the speakers config.</p>"},{"location":"reference/python/models/agents/group_manager.html#waldiez.models.agents.group_manager.speakers.WaldiezGroupManagerSpeakers.custom_method_string","title":"<code>custom_method_string: Optional[str]</code>  <code>property</code>","text":"<p>Get the custom method string.</p> <p>Returns:</p> Type Description <code>str</code> <p>The custom method string.</p>"},{"location":"reference/python/models/agents/group_manager.html#waldiez.models.agents.group_manager.speakers.WaldiezGroupManagerSpeakers.get_custom_method_function","title":"<code>get_custom_method_function(name_prefix: Optional[str] = None, name_suffix: Optional[str] = None) -&gt; Tuple[str, str]</code>","text":"<p>Get the custom method function.</p> <p>Parameters:</p> Name Type Description Default <code>name_prefix</code> <code>str</code> <p>The function name prefix.</p> <code>None</code> <code>name_suffix</code> <code>str</code> <p>The function name suffix.</p> <code>None</code> <p>Returns:</p> Type Description <code>Tuple[str, str]</code> <p>The custom method function and the function name.</p> Source code in <code>waldiez/models/agents/group_manager/speakers.py</code> <pre><code>def get_custom_method_function(\n    self,\n    name_prefix: Optional[str] = None,\n    name_suffix: Optional[str] = None,\n) -&gt; Tuple[str, str]:\n    \"\"\"Get the custom method function.\n\n    Parameters\n    ----------\n    name_prefix : str\n        The function name prefix.\n    name_suffix : str\n        The function name suffix.\n\n    Returns\n    -------\n    Tuple[str, str]\n        The custom method function and the function name.\n    \"\"\"\n    function_name = CUSTOM_SPEAKER_SELECTION\n    if name_prefix:\n        function_name = f\"{name_prefix}_{function_name}\"\n    if name_suffix:\n        function_name = f\"{function_name}_{name_suffix}\"\n    return (\n        generate_function(\n            function_name=function_name,\n            function_args=CUSTOM_SPEAKER_SELECTION_ARGS,\n            function_types=CUSTOM_SPEAKER_SELECTION_TYPES,\n            function_body=self.custom_method_string or \"\",\n        ),\n        function_name,\n    )\n</code></pre>"},{"location":"reference/python/models/agents/group_manager.html#waldiez.models.agents.group_manager.speakers.WaldiezGroupManagerSpeakers.validate_group_speakers_config","title":"<code>validate_group_speakers_config() -&gt; Self</code>","text":"<p>Validate the speakers config.</p> <p>Returns:</p> Type Description <code>GroupManagerSpeakers</code> <p>The group manager speakers config.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the custom method is invalid.</p> Source code in <code>waldiez/models/agents/group_manager/speakers.py</code> <pre><code>@model_validator(mode=\"after\")\ndef validate_group_speakers_config(self) -&gt; Self:\n    \"\"\"Validate the speakers config.\n\n    Returns\n    -------\n    GroupManagerSpeakers\n        The group manager speakers config.\n\n    Raises\n    ------\n    ValueError\n        If the custom method is invalid.\n    \"\"\"\n    if self.selection_method == \"custom\":\n        if not self.selection_custom_method:\n            raise ValueError(\"No custom method provided.\")\n        is_valid, error_or_body = check_function(\n            code_string=self.selection_custom_method,\n            function_name=CUSTOM_SPEAKER_SELECTION,\n            function_args=CUSTOM_SPEAKER_SELECTION_ARGS,\n        )\n        if not is_valid or not error_or_body:\n            # pylint: disable=inconsistent-quotes\n            raise ValueError(\n                f\"Invalid custom method: {error_or_body or 'no content'}\"\n            )\n        self._custom_method_string = error_or_body\n    return self\n</code></pre>"},{"location":"reference/python/models/agents/group_manager.html#waldiez.models.agents.group_manager.speakers.WaldiezGroupManagerSpeakersSelectionMethod","title":"<code>WaldiezGroupManagerSpeakersSelectionMethod = Literal['auto', 'manual', 'random', 'round_robin', 'custom']</code>  <code>module-attribute</code>","text":"<p>Possible methods for the speaker selection.</p>"},{"location":"reference/python/models/agents/group_manager.html#waldiez.models.agents.group_manager.speakers.WaldiezGroupManagerSpeakersSelectionMode","title":"<code>WaldiezGroupManagerSpeakersSelectionMode = Literal['repeat', 'transition']</code>  <code>module-attribute</code>","text":"<p>Possible selection modes: repeat, transition.</p>"},{"location":"reference/python/models/agents/group_manager.html#waldiez.models.agents.group_manager.speakers.WaldiezGroupManagerSpeakersTransitionsType","title":"<code>WaldiezGroupManagerSpeakersTransitionsType = Literal['allowed', 'disallowed']</code>  <code>module-attribute</code>","text":"<p>Possible transitions types: allowed, disallowed.</p>"},{"location":"reference/python/models/agents/rag_user.html","title":"Rag user","text":"<p>RAG user agent.</p> <p>It extends a user agent and has RAG related parameters (<code>retrieve_config</code>).</p> <p>Waldiez RAG user agent data.</p> <p>RAG user agent retrieve config.</p> <p>The vector db config for the RAG user agent.</p>"},{"location":"reference/python/models/agents/rag_user.html#waldiez.models.agents.rag_user.rag_user.WaldiezRagUser","title":"<code>WaldiezRagUser</code>","text":"<p>               Bases: <code>WaldiezAgent</code></p> <p>RAG user agent.</p> <p>It extends a user agent and has RAG related parameters.</p> <p>Attributes:</p> Name Type Description <code>agent_type</code> <code>Literal['rag_user']</code> <p>The agent type: 'rag_user' for a RAG user agent.</p> <code>data</code> <code>WaldiezRagUserData</code> <p>The RAG user agent's data. See <code>WaldiezRagUserData</code> for more info.</p> <code>retrieve_config</code> <code>WaldiezRagUserRetrieveConfig</code> <p>The RAG user agent's retrieve config.</p>"},{"location":"reference/python/models/agents/rag_user.html#waldiez.models.agents.rag_user.rag_user.WaldiezRagUser.retrieve_config","title":"<code>retrieve_config: WaldiezRagUserRetrieveConfig</code>  <code>property</code>","text":"<p>Get the retrieve config.</p> <p>Returns:</p> Type Description <code>WaldiezRagUserRetrieveConfig</code> <p>The RAG user agent's retrieve config.</p>"},{"location":"reference/python/models/agents/rag_user.html#waldiez.models.agents.rag_user.rag_user_data.WaldiezRagUserData","title":"<code>WaldiezRagUserData</code>","text":"<p>               Bases: <code>WaldiezUserProxyData</code></p> <p>RAG user agent data.</p> <p>The data for a RAG user agent.</p> <p>Attributes:</p> Name Type Description <code>use_message_generator</code> <code>bool</code> <p>Whether to use the message generator in user's chats. Defaults to False.</p> <code>retrieve_config</code> <code>WaldiezRagUserRetrieveConfig</code> <p>The RAG user agent's retrieve config.</p>"},{"location":"reference/python/models/agents/rag_user.html#waldiez.models.agents.rag_user.retrieve_config.WaldiezRagUserChunkMode","title":"<code>WaldiezRagUserChunkMode = Literal['multi_lines', 'one_line']</code>  <code>module-attribute</code>","text":"<p>Possible chunk modes for the retrieve chat.</p>"},{"location":"reference/python/models/agents/rag_user.html#waldiez.models.agents.rag_user.retrieve_config.WaldiezRagUserRetrieveConfig","title":"<code>WaldiezRagUserRetrieveConfig</code>","text":"<p>               Bases: <code>WaldiezBase</code></p> <p>RAG user agent.</p> <p>Attributes:</p> Name Type Description <code>task</code> <code>Literal['code', 'qa', 'default']</code> <p>The task of the retrieve chat. Possible values are 'code', 'qa' and 'default'. System prompt will be different for different tasks. The default value is default, which supports both code and qa, and provides source information in the end of the response.</p> <code>vector_db</code> <code>Literal['chroma', 'pgvector', 'mongodb', 'qdrant']</code> <p>The vector db for the retrieve chat.</p> <code>db_config</code> <code>Annotated[WaldiezVectorDbConfig, Field]</code> <p>The config for the selected vector db.</p> <code>docs_path</code> <code>Optional[Union[str, List[str]]]</code> <p>The path to the docs directory. It can also be the path to a single file, the url to a single file or a list of directories, files and urls. Default is None, which works only if the collection is already created.</p> <code>new_docs</code> <code>bool</code> <p>When True, only adds new documents to the collection; when False, updates existing documents and adds new ones. Default is True. Document id is used to determine if a document is new or existing. By default, the id is the hash value of the content.</p> <code>model</code> <code>Optional[str]</code> <p>The model to use for the retrieve chat. If key not provided, a default model gpt-4 will be used.</p> <code>chunk_token_size</code> <code>Optional[int]</code> <p>The chunk token size for the retrieve chat. If key not provided, a default size max_tokens * 0.4 will be used.</p> <code>context_max_tokens</code> <code>Optional[int]</code> <p>The context max token size for the retrieve chat. If key not provided, a default size max_tokens * 0.8 will be used.</p> <code>chunk_mode</code> <code>Optional[str]</code> <p>The chunk mode for the retrieve chat. Possible values are 'multi_lines' and 'one_line'. If key not provided, a default mode multi_lines will be used.</p> <code>must_break_at_empty_line</code> <code>bool</code> <p>Chunk will only break at empty line if True. Default is True. If chunk_mode is 'one_line', this parameter will be ignored.</p> <code>use_custom_embedding</code> <code>bool</code> <p>Whether to use custom embedding for the retrieve chat. Default is False. If True, the embedding_function should be provided.</p> <code>embedding_function</code> <code>Optional[str]</code> <p>The embedding function for creating the vector db. Default is None, SentenceTransformer with the given embedding_model will be used. If you want to use OpenAI, Cohere, HuggingFace or other embedding functions, you can pass it here, follow the examples in https://docs.trychroma.com/guides/embeddings.</p> <code>customized_prompt</code> <code>Optional[str]</code> <p>The customized prompt for the retrieve chat. Default is None.</p> <code>customized_answer_prefix</code> <code>Optional[str]</code> <p>The customized answer prefix for the retrieve chat. Default is ''. If not '' and the customized_answer_prefix is not in the answer, Update Context will be triggered.</p> <code>update_context</code> <code>bool</code> <p>If False, will not apply Update Context for interactive retrieval. Default is True.</p> <code>collection_name</code> <code>Optional[str]</code> <p>The name of the collection. If key not provided, a default name autogen-docs will be used.</p> <code>get_or_create</code> <code>bool</code> <p>Whether to get the collection if it exists. Default is False.</p> <code>overwrite</code> <code>bool</code> <p>Whether to overwrite the collection if it exists. Default is False. Case 1. if the collection does not exist, create the collection. Case 2. the collection exists, if overwrite is True, it will overwrite the collection. Case 3. the collection exists and overwrite is False, if get_or_create is True, it will get the collection, otherwise it raise a ValueError.</p> <code>use_custom_token_count</code> <code>bool</code> <p>Whether to use custom token count function for the retrieve chat. Default is False. If True, the custom_token_count_function should be provided.</p> <code>custom_token_count_function</code> <code>Optional[str]</code> <p>A custom function to count the number of tokens in a string. The function should take (text:str, model:str) as input and return the token_count(int). the retrieve_config['model'] will be passed in the function. Default is autogen.token_count_utils.count_token that uses tiktoken, which may not be accurate for non-OpenAI models.</p> <code>use_custom_text_split</code> <code>bool</code> <p>Whether to use custom text split function for the retrieve chat. Default is False. If True, the custom_text_split_function should be provided.</p> <code>custom_text_split_function</code> <code>Optional[str]</code> <p>A custom function to split a string into a list of strings. Default is None, will use the default function in autogen.retrieve_utils. split_text_to_chunks.</p> <code>custom_text_types</code> <code>Optional[List[str]]</code> <p>A list of file types to be processed. Default is autogen.retrieve_utils. TEXT_FORMATS. This only applies to files under the directories in docs_path. Explicitly included files and urls will be chunked regardless of their types.</p> <code>recursive</code> <code>bool</code> <p>Whether to search documents recursively in the docs_path. Default is True.</p> <code>distance_threshold</code> <code>float</code> <p>The threshold for the distance score, only distance smaller than it will be returned. Will be ignored if &lt; 0. Default is -1.</p> <code>embedding_function_string</code> <code>Optional[str]</code> <p>The embedding function string (if use_custom_embedding is True).</p> <code>token_count_function_string</code> <code>Optional[str]</code> <p>The token count function string (if use_custom_token_count is True).</p> <code>text_split_function_string</code> <code>Optional[str]</code> <p>The text split function string (if use_custom_text_split is True).</p> <code>n_results</code> <code>Optional[int]</code> <p>The number of results to return. Default is None, which will return all</p> <p>Methods:</p> Name Description <code>validate_custom_embedding_function</code> <p>Validate the custom embedding function.</p> <code>validate_custom_token_count_function</code> <p>Validate the custom token count function.</p> <code>validate_custom_text_split_function</code> <p>Validate the custom text split function.</p> <code>validate_rag_user_data</code> <p>Validate the RAG user data.</p>"},{"location":"reference/python/models/agents/rag_user.html#waldiez.models.agents.rag_user.retrieve_config.WaldiezRagUserRetrieveConfig.embedding_function_string","title":"<code>embedding_function_string: Optional[str]</code>  <code>property</code>","text":"<p>Get the embedding function string.</p> <p>Returns:</p> Type Description <code>Optional[str]</code> <p>The embedding function string.</p>"},{"location":"reference/python/models/agents/rag_user.html#waldiez.models.agents.rag_user.retrieve_config.WaldiezRagUserRetrieveConfig.get_custom_embedding_function","title":"<code>get_custom_embedding_function(name_prefix: Optional[str] = None, name_suffix: Optional[str] = None) -&gt; Tuple[str, str]</code>","text":"<p>Generate the custom embedding function.</p> <p>Parameters:</p> Name Type Description Default <code>name_prefix</code> <code>str</code> <p>The function name prefix.</p> <code>None</code> <code>name_suffix</code> <code>str</code> <p>The function name suffix.</p> <code>None</code> <p>Returns:</p> Type Description <code>Tuple[str, str]</code> <p>The custom embedding function and the function name.</p> Source code in <code>waldiez/models/agents/rag_user/retrieve_config.py</code> <pre><code>def get_custom_embedding_function(\n    self,\n    name_prefix: Optional[str] = None,\n    name_suffix: Optional[str] = None,\n) -&gt; Tuple[str, str]:\n    \"\"\"Generate the custom embedding function.\n\n    Parameters\n    ----------\n    name_prefix : str\n        The function name prefix.\n    name_suffix : str\n        The function name suffix.\n\n    Returns\n    -------\n    Tuple[str, str]\n        The custom embedding function and the function name.\n    \"\"\"\n    function_name = CUSTOM_EMBEDDING_FUNCTION\n    if name_prefix:\n        function_name = f\"{name_prefix}_{function_name}\"\n    if name_suffix:\n        function_name = f\"{function_name}_{name_suffix}\"\n    return (\n        generate_function(\n            function_name=function_name,\n            function_args=CUSTOM_EMBEDDING_FUNCTION_ARGS,\n            function_types=CUSTOM_EMBEDDING_FUNCTION_TYPES,\n            function_body=self.embedding_function_string or \"\",\n        ),\n        function_name,\n    )\n</code></pre>"},{"location":"reference/python/models/agents/rag_user.html#waldiez.models.agents.rag_user.retrieve_config.WaldiezRagUserRetrieveConfig.get_custom_text_split_function","title":"<code>get_custom_text_split_function(name_prefix: Optional[str] = None, name_suffix: Optional[str] = None) -&gt; Tuple[str, str]</code>","text":"<p>Generate the custom text split function.</p> <p>Parameters:</p> Name Type Description Default <code>name_prefix</code> <code>str</code> <p>The function name prefix.</p> <code>None</code> <code>name_suffix</code> <code>str</code> <p>The function name suffix.</p> <code>None</code> <p>Returns:</p> Type Description <code>Tuple[str, str]</code> <p>The custom text split function and the function name.</p> Source code in <code>waldiez/models/agents/rag_user/retrieve_config.py</code> <pre><code>def get_custom_text_split_function(\n    self,\n    name_prefix: Optional[str] = None,\n    name_suffix: Optional[str] = None,\n) -&gt; Tuple[str, str]:\n    \"\"\"Generate the custom text split function.\n\n    Parameters\n    ----------\n    name_prefix : str\n        The function name prefix.\n    name_suffix : str\n        The function name suffix.\n\n    Returns\n    -------\n    Tuple[str, str]\n        The custom text split function and the function name.\n    \"\"\"\n    function_name = CUSTOM_TEXT_SPLIT_FUNCTION\n    if name_prefix:\n        function_name = f\"{name_prefix}_{function_name}\"\n    if name_suffix:\n        function_name = f\"{function_name}_{name_suffix}\"\n    return (\n        generate_function(\n            function_name=function_name,\n            function_args=CUSTOM_TEXT_SPLIT_FUNCTION_ARGS,\n            function_types=CUSTOM_TEXT_SPLIT_FUNCTION_TYPES,\n            function_body=self.text_split_function_string or \"\",\n        ),\n        function_name,\n    )\n</code></pre>"},{"location":"reference/python/models/agents/rag_user.html#waldiez.models.agents.rag_user.retrieve_config.WaldiezRagUserRetrieveConfig.get_custom_token_count_function","title":"<code>get_custom_token_count_function(name_prefix: Optional[str] = None, name_suffix: Optional[str] = None) -&gt; Tuple[str, str]</code>","text":"<p>Generate the custom token count function.</p> <p>Parameters:</p> Name Type Description Default <code>name_prefix</code> <code>str</code> <p>The function name prefix.</p> <code>None</code> <code>name_suffix</code> <code>str</code> <p>The function name suffix.</p> <code>None</code> <p>Returns:</p> Type Description <code>Tuple[str, str]</code> <p>The custom token count function and the function name.</p> Source code in <code>waldiez/models/agents/rag_user/retrieve_config.py</code> <pre><code>def get_custom_token_count_function(\n    self,\n    name_prefix: Optional[str] = None,\n    name_suffix: Optional[str] = None,\n) -&gt; Tuple[str, str]:\n    \"\"\"Generate the custom token count function.\n\n    Parameters\n    ----------\n    name_prefix : str\n        The function name prefix.\n    name_suffix : str\n        The function name suffix.\n\n    Returns\n    -------\n    Tuple[str, str]\n        The custom token count function and the function name.\n    \"\"\"\n    function_name = CUSTOM_TOKEN_COUNT_FUNCTION\n    if name_prefix:\n        function_name = f\"{name_prefix}_{function_name}\"\n    if name_suffix:\n        function_name = f\"{function_name}_{name_suffix}\"\n    return (\n        generate_function(\n            function_name=function_name,\n            function_args=CUSTOM_TOKEN_COUNT_FUNCTION_ARGS,\n            function_types=CUSTOM_TOKEN_COUNT_FUNCTION_TYPES,\n            function_body=self.token_count_function_string or \"\",\n        ),\n        function_name,\n    )\n</code></pre>"},{"location":"reference/python/models/agents/rag_user.html#waldiez.models.agents.rag_user.retrieve_config.WaldiezRagUserRetrieveConfig.text_split_function_string","title":"<code>text_split_function_string: Optional[str]</code>  <code>property</code>","text":"<p>Get the text split function string.</p> <p>Returns:</p> Type Description <code>Optional[str]</code> <p>The text split function string.</p>"},{"location":"reference/python/models/agents/rag_user.html#waldiez.models.agents.rag_user.retrieve_config.WaldiezRagUserRetrieveConfig.token_count_function_string","title":"<code>token_count_function_string: Optional[str]</code>  <code>property</code>","text":"<p>Get the token count function string.</p> <p>Returns:</p> Type Description <code>Optional[str]</code> <p>The token count function string.</p>"},{"location":"reference/python/models/agents/rag_user.html#waldiez.models.agents.rag_user.retrieve_config.WaldiezRagUserRetrieveConfig.validate_custom_embedding_function","title":"<code>validate_custom_embedding_function() -&gt; None</code>","text":"<p>Validate the custom embedding function.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the validation fails.</p> Source code in <code>waldiez/models/agents/rag_user/retrieve_config.py</code> <pre><code>def validate_custom_embedding_function(self) -&gt; None:\n    \"\"\"Validate the custom embedding function.\n\n    Raises\n    ------\n    ValueError\n        If the validation fails.\n    \"\"\"\n    if self.use_custom_embedding:\n        if not self.embedding_function:\n            raise ValueError(\n                \"The embedding_function is required \"\n                \"if use_custom_embedding is True.\"\n            )\n        valid, error_or_content = check_function(\n            code_string=self.embedding_function,\n            function_name=CUSTOM_EMBEDDING_FUNCTION,\n            function_args=CUSTOM_EMBEDDING_FUNCTION_ARGS,\n        )\n        if not valid:\n            raise ValueError(error_or_content)\n        self._embedding_function_string = error_or_content\n</code></pre>"},{"location":"reference/python/models/agents/rag_user.html#waldiez.models.agents.rag_user.retrieve_config.WaldiezRagUserRetrieveConfig.validate_custom_text_split_function","title":"<code>validate_custom_text_split_function() -&gt; None</code>","text":"<p>Validate the custom text split function.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the validation fails.</p> Source code in <code>waldiez/models/agents/rag_user/retrieve_config.py</code> <pre><code>def validate_custom_text_split_function(self) -&gt; None:\n    \"\"\"Validate the custom text split function.\n\n    Raises\n    ------\n    ValueError\n        If the validation fails.\n    \"\"\"\n    if self.use_custom_text_split:\n        if not self.custom_text_split_function:\n            raise ValueError(\n                \"The custom_text_split_function is required \"\n                \"if use_custom_text_split is True.\"\n            )\n        valid, error_or_content = check_function(\n            code_string=self.custom_text_split_function,\n            function_name=CUSTOM_TEXT_SPLIT_FUNCTION,\n            function_args=CUSTOM_TEXT_SPLIT_FUNCTION_ARGS,\n        )\n        if not valid:\n            raise ValueError(error_or_content)\n        self._text_split_function_string = error_or_content\n</code></pre>"},{"location":"reference/python/models/agents/rag_user.html#waldiez.models.agents.rag_user.retrieve_config.WaldiezRagUserRetrieveConfig.validate_custom_token_count_function","title":"<code>validate_custom_token_count_function() -&gt; None</code>","text":"<p>Validate the custom token count function.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the validation fails.</p> Source code in <code>waldiez/models/agents/rag_user/retrieve_config.py</code> <pre><code>def validate_custom_token_count_function(self) -&gt; None:\n    \"\"\"Validate the custom token count function.\n\n    Raises\n    ------\n    ValueError\n        If the validation fails.\n    \"\"\"\n    if self.use_custom_token_count:\n        if not self.custom_token_count_function:\n            raise ValueError(\n                \"The custom_token_count_function is required \"\n                \"if use_custom_token_count is True.\"\n            )\n        valid, error_or_content = check_function(\n            code_string=self.custom_token_count_function,\n            function_name=CUSTOM_TOKEN_COUNT_FUNCTION,\n            function_args=CUSTOM_TOKEN_COUNT_FUNCTION_ARGS,\n        )\n        if not valid:\n            raise ValueError(error_or_content)\n        self._token_count_function_string = error_or_content\n</code></pre>"},{"location":"reference/python/models/agents/rag_user.html#waldiez.models.agents.rag_user.retrieve_config.WaldiezRagUserRetrieveConfig.validate_docs_path","title":"<code>validate_docs_path() -&gt; None</code>","text":"<p>Validate the docs path.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the validation fails.</p> Source code in <code>waldiez/models/agents/rag_user/retrieve_config.py</code> <pre><code>def validate_docs_path(self) -&gt; None:\n    \"\"\"Validate the docs path.\n\n    Raises\n    ------\n    ValueError\n        If the validation fails.\n    \"\"\"\n    if not self.docs_path:\n        return\n    # if urls or directories ok, if files they should resolve\n    doc_paths = (\n        [self.docs_path]\n        if isinstance(self.docs_path, str)\n        else self.docs_path\n    )\n    paths: List[str] = []\n    for path in doc_paths:\n        resolved = path\n        is_remote, is_raw = is_remote_path(resolved)\n        if is_remote:\n            if not is_raw:\n                resolved = f'r\"{resolved}\"'\n            if resolved not in paths:\n                paths.append(resolved)\n            continue\n        resolved = remove_file_scheme(resolved)\n        is_raw = resolved.startswith((\"r'\", 'r\"'))\n        maybe_folder = string_represents_folder(resolved)\n        if maybe_folder:\n            if not is_raw:\n                resolved = f'r\"{resolved}\"'\n            if resolved not in paths:\n                paths.append(resolved)\n            continue\n        resolved = resolve_path(resolved, is_raw, not maybe_folder)\n        if resolved not in paths:\n            paths.append(resolved)\n    self.docs_path = paths\n</code></pre>"},{"location":"reference/python/models/agents/rag_user.html#waldiez.models.agents.rag_user.retrieve_config.WaldiezRagUserRetrieveConfig.validate_rag_user_data","title":"<code>validate_rag_user_data() -&gt; Self</code>","text":"<p>Validate the RAG user data.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the validation fails.</p> <p>Returns:</p> Type Description <code>WaldiezRagUserData</code> <p>The validated RAG user data.</p> Source code in <code>waldiez/models/agents/rag_user/retrieve_config.py</code> <pre><code>@model_validator(mode=\"after\")\ndef validate_rag_user_data(self) -&gt; Self:\n    \"\"\"Validate the RAG user data.\n\n    Raises\n    ------\n    ValueError\n        If the validation fails.\n\n    Returns\n    -------\n    WaldiezRagUserData\n        The validated RAG user data.\n    \"\"\"\n    self.validate_custom_embedding_function()\n    self.validate_custom_token_count_function()\n    self.validate_custom_text_split_function()\n    self.validate_docs_path()\n    if not self.db_config.model:\n        self.db_config.model = WaldiezRagUserModels[self.vector_db]\n    if isinstance(self.n_results, int) and self.n_results &lt; 1:\n        self.n_results = None\n    return self\n</code></pre>"},{"location":"reference/python/models/agents/rag_user.html#waldiez.models.agents.rag_user.retrieve_config.WaldiezRagUserTask","title":"<code>WaldiezRagUserTask = Literal['code', 'qa', 'default']</code>  <code>module-attribute</code>","text":"<p>Possible tasks for the retrieve chat.</p>"},{"location":"reference/python/models/agents/rag_user.html#waldiez.models.agents.rag_user.retrieve_config.WaldiezRagUserVectorDb","title":"<code>WaldiezRagUserVectorDb = Literal['chroma', 'pgvector', 'mongodb', 'qdrant']</code>  <code>module-attribute</code>","text":"<p>Possible vector dbs for the retrieve chat.</p>"},{"location":"reference/python/models/agents/rag_user.html#waldiez.models.agents.rag_user.retrieve_config.is_remote_path","title":"<code>is_remote_path(path: str) -&gt; Tuple[bool, bool]</code>","text":"<p>Check if a path is a remote path.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to check.</p> required <p>Returns:</p> Type Description <code>Tuple[bool, bool]</code> <p>If the path is a remote path and if it's a raw string.</p> Source code in <code>waldiez/models/agents/rag_user/retrieve_config.py</code> <pre><code>def is_remote_path(path: str) -&gt; Tuple[bool, bool]:\n    \"\"\"Check if a path is a remote path.\n\n    Parameters\n    ----------\n    path : str\n        The path to check.\n\n    Returns\n    -------\n    Tuple[bool, bool]\n        If the path is a remote path and if it's a raw string.\n    \"\"\"\n    is_raw = path.startswith((\"r'\", 'r\"'))\n    for not_local in NOT_LOCAL:\n        if path.startswith((not_local, f'r\"{not_local}', f\"r'{not_local}\")):\n            return True, is_raw\n    return False, is_raw\n</code></pre>"},{"location":"reference/python/models/agents/rag_user.html#waldiez.models.agents.rag_user.retrieve_config.remove_file_scheme","title":"<code>remove_file_scheme(path: str) -&gt; str</code>","text":"<p>Remove the file:// scheme from a path.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to remove the scheme from.</p> required <p>Returns:</p> Type Description <code>str</code> <p>The path without the scheme.</p> Source code in <code>waldiez/models/agents/rag_user/retrieve_config.py</code> <pre><code>def remove_file_scheme(path: str) -&gt; str:\n    \"\"\"Remove the file:// scheme from a path.\n\n    Parameters\n    ----------\n    path : str\n        The path to remove the scheme from.\n\n    Returns\n    -------\n    str\n        The path without the scheme.\n    \"\"\"\n    resolved = str(path)\n    while resolved.startswith('r\"file://') and resolved.endswith('\"'):\n        resolved = resolved[len('r\"file://') : -1]\n    while resolved.startswith(\"r'file://\") and resolved.endswith(\"'\"):\n        resolved = resolved[len(\"r'file://\") : -1]\n    while resolved.startswith(\"file://\"):\n        resolved = resolved[len(\"file://\") :]\n    return resolved\n</code></pre>"},{"location":"reference/python/models/agents/rag_user.html#waldiez.models.agents.rag_user.retrieve_config.resolve_path","title":"<code>resolve_path(path: str, is_raw: bool, must_exist: bool) -&gt; str</code>","text":"<p>Try to resolve a path.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to resolve.</p> required <code>is_raw</code> <code>bool</code> <p>If the path is a raw string.</p> required <code>must_exist</code> <code>bool</code> <p>If the path must exist.</p> required <p>Returns:</p> Type Description <code>Path</code> <p>The resolved path.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the path is not a valid local path.</p> Source code in <code>waldiez/models/agents/rag_user/retrieve_config.py</code> <pre><code>def resolve_path(path: str, is_raw: bool, must_exist: bool) -&gt; str:\n    \"\"\"Try to resolve a path.\n\n    Parameters\n    ----------\n    path : str\n        The path to resolve.\n    is_raw : bool\n        If the path is a raw string.\n    must_exist : bool\n        If the path must exist.\n\n    Returns\n    -------\n    Path\n        The resolved path.\n\n    Raises\n    ------\n    ValueError\n        If the path is not a valid local path.\n    \"\"\"\n    # pylint: disable=broad-except\n    path_string = path\n    if is_raw:\n        path_string = path[2:-1]\n    try:\n        resolved = Path(path_string).resolve()\n    except BaseException as error:  # pragma: no cover\n        # check if 'r'... is needed\n        raw_string = f'r\"{path}\"'\n        try:\n            Path(raw_string).resolve()\n        except BaseException:\n            raise ValueError(\n                f\"Path {path} is not a valid local path.\"\n            ) from error\n        return raw_string\n    if not resolved.exists() and must_exist:\n        raise ValueError(f\"Path {path} does not exist.\")\n    return f'r\"{resolved}\"'\n</code></pre>"},{"location":"reference/python/models/agents/rag_user.html#waldiez.models.agents.rag_user.retrieve_config.string_represents_folder","title":"<code>string_represents_folder(path: str) -&gt; bool</code>","text":"<p>Check if a string represents a folder.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The string to check (does not need to exist).</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if the path is likely a folder, False if it's likely a file.</p> Source code in <code>waldiez/models/agents/rag_user/retrieve_config.py</code> <pre><code>def string_represents_folder(path: str) -&gt; bool:\n    \"\"\"Check if a string represents a folder.\n\n    Parameters\n    ----------\n    path : str\n        The string to check (does not need to exist).\n\n    Returns\n    -------\n    bool\n        True if the path is likely a folder, False if it's likely a file.\n    \"\"\"\n    if path.endswith(os.path.sep):\n        return True\n    if os.path.isdir(path):\n        return True\n    return not os.path.splitext(path)[1]\n</code></pre>"},{"location":"reference/python/models/agents/rag_user.html#waldiez.models.agents.rag_user.vector_db_config.WaldiezRagUserVectorDbConfig","title":"<code>WaldiezRagUserVectorDbConfig</code>","text":"<p>               Bases: <code>WaldiezBase</code></p> <p>The config for the vector db.</p> <p>Attributes:</p> Name Type Description <code>model</code> <code>str</code> <p>The model to use for the vector db embeddings.</p> <code>use_memory</code> <code>bool</code> <p>Whether to use memory for the vector db (if <code>qdrant</code> is used).</p> <code>use_local_storage</code> <code>bool</code> <p>Whether to use local storage for the db (if <code>qdrant</code> or <code>chroma</code> is used).</p> <code>local_storage_path</code> <code>Optional[str]</code> <p>The path to the local storage for the vector db (if <code>qdrant</code> or <code>chroma</code> is used).</p> <code>connection_url</code> <code>Optional[str]</code> <p>The connection url for the vector db.</p> <code>wait_until_index_ready</code> <code>Optional[float]</code> <p>Blocking call to wait until the database indexes are ready (if <code>mongodb</code> is used). None, the default, means no wait.</p> <code>wait_until_document_ready</code> <code>Optional[float]</code> <p>Blocking call to wait until the database documents are ready (if <code>mongodb</code> is used). None, the default, means no wait.</p> <code>metadata</code> <code>Optional[Dict[str, Any]]</code> <p>The metadata to use for the vector db. Example: {\"hnsw:space\": \"ip\", \"hnsw:construction_ef\": 30, \"hnsw:M\": 32}</p> <p>Methods:</p> Name Description <code>validate_vector_db_config</code> <p>Validate the vector db config.</p>"},{"location":"reference/python/models/agents/rag_user.html#waldiez.models.agents.rag_user.vector_db_config.WaldiezRagUserVectorDbConfig.validate_vector_db_config","title":"<code>validate_vector_db_config() -&gt; Self</code>","text":"<p>Validate the vector db config.</p> <p>if local storage is used, make sure the path is provided, and make it absolute if not already.</p> <p>Returns:</p> Type Description <code>WaldiezRagUserVectorDbConfig</code> <p>The vector db config.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the validation fails.</p> Source code in <code>waldiez/models/agents/rag_user/vector_db_config.py</code> <pre><code>@model_validator(mode=\"after\")\ndef validate_vector_db_config(self) -&gt; Self:\n    \"\"\"Validate the vector db config.\n\n    if local storage is used, make sure the path is provided,\n    and make it absolute if not already.\n\n    Returns\n    -------\n    WaldiezRagUserVectorDbConfig\n        The vector db config.\n\n    Raises\n    ------\n    ValueError\n        If the validation fails.\n    \"\"\"\n    if self.use_local_storage:\n        if self.local_storage_path is None:\n            raise ValueError(\n                \"The local storage path must be provided if local storage is used.\"\n            )\n        as_path = Path(self.local_storage_path)\n        if not as_path.is_absolute():\n            self.local_storage_path = str(as_path.resolve())\n    return self\n</code></pre>"},{"location":"reference/python/models/agents/swarm_agent.html","title":"Swarm agent","text":"<p>Swarm agent.</p> <p>Swarm agent data.</p> <p>Swarm condition model for handoff.</p> <p>Swarm after work model.</p> <p>Handles the next step in the conversation when an agent doesn't suggest a tool call or a handoff.</p> <p>Update the agent's system message before they reply.</p>"},{"location":"reference/python/models/agents/swarm_agent.html#waldiez.models.agents.swarm_agent.swarm_agent.WaldiezSwarmAgent","title":"<code>WaldiezSwarmAgent</code>","text":"<p>               Bases: <code>WaldiezAgent</code></p> <p>Swarm agent.</p> <p>It extends a user agent and has swarm related parameters.</p> <p>Attributes:</p> Name Type Description <code>agent_type</code> <code>Literal['swarm']</code> <p>The agent type: 'swarm' for a swarm agent.</p> <code>data</code> <code>WaldiezSwarmAgentData</code> <p>The swarm agent's data. See <code>WaldiezSwarmAgentData</code> for more info.</p>"},{"location":"reference/python/models/agents/swarm_agent.html#waldiez.models.agents.swarm_agent.swarm_agent.WaldiezSwarmAgent.functions","title":"<code>functions: List[str]</code>  <code>property</code>","text":"<p>Get the functions that the agent can use.</p> <p>Returns:</p> Type Description <code>List[str]</code> <p>The functions that the agent can use.</p>"},{"location":"reference/python/models/agents/swarm_agent.html#waldiez.models.agents.swarm_agent.swarm_agent.WaldiezSwarmAgent.handoffs","title":"<code>handoffs: List[Union[WaldiezSwarmOnCondition, WaldiezSwarmAfterWork]]</code>  <code>property</code>","text":"<p>Get the hand offs to register.</p> <p>Returns:</p> Type Description <code>List[str]</code> <p>The hand offs to register.</p>"},{"location":"reference/python/models/agents/swarm_agent.html#waldiez.models.agents.swarm_agent.swarm_agent.WaldiezSwarmAgent.is_initial","title":"<code>is_initial: bool</code>  <code>property</code>","text":"<p>Check if the agent is the initial agent.</p> <p>Returns:</p> Type Description <code>bool</code> <p>Whether the agent is the initial agent.</p>"},{"location":"reference/python/models/agents/swarm_agent.html#waldiez.models.agents.swarm_agent.swarm_agent.WaldiezSwarmAgent.nested_chats","title":"<code>nested_chats: List[WaldiezAgentNestedChat]</code>  <code>property</code>","text":"<p>Get the nested chats.</p> <p>Returns:</p> Type Description <code>List[WaldiezChat]</code> <p>The nested chats.</p>"},{"location":"reference/python/models/agents/swarm_agent.html#waldiez.models.agents.swarm_agent.swarm_agent.WaldiezSwarmAgent.update_agent_state_before_reply","title":"<code>update_agent_state_before_reply: List[Union[str, WaldiezSwarmUpdateSystemMessage]]</code>  <code>property</code>","text":"<p>Get the functions that update the agent's state before it replies.</p> <p>Returns:</p> Type Description <code>List[str]</code> <p>The functions that update the agent's state before it replies.</p>"},{"location":"reference/python/models/agents/swarm_agent.html#waldiez.models.agents.swarm_agent.swarm_agent_data.WaldiezSwarmAgentData","title":"<code>WaldiezSwarmAgentData</code>","text":"<p>               Bases: <code>WaldiezAgentData</code></p> <p>Swarm agent data.</p> <p>Attributes:</p> Name Type Description <code>is_initial</code> <code>bool</code> <p>Whether the agent is the initial agent.</p> <code>functions</code> <code>List[str]</code> <p>A list of functions (skill ids) to register with the agent.</p> <code>update_agent_state_before_reply</code> <code>List[str]</code> <p>A list of functions, including <code>UpdateSystemMessage</code>, called to update the agent's state before it replies. Each function is called when the agent is selected and before it speaks.</p> <code>handoffs</code> <code>List[Union[WaldiezSwarmOnCondition, WaldiezSwarmAfterWork]]</code> <p>A list of hand offs to register.</p> Notes <p>Each agent should have at most one <code>AfterWork</code> and (if any) it should be at the end the list of hand offs.</p>"},{"location":"reference/python/models/agents/swarm_agent.html#waldiez.models.agents.swarm_agent.swarm_agent_data.WaldiezSwarmAgentData.validate_handoffs","title":"<code>validate_handoffs() -&gt; Self</code>","text":"<p>Validate the hand offs.</p> <p>Returns:</p> Type Description <code>Self</code> <p>The swarm agent data.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If there are more than one <code>AfterWork</code>s.</p> Source code in <code>waldiez/models/agents/swarm_agent/swarm_agent_data.py</code> <pre><code>@model_validator(mode=\"after\")\ndef validate_handoffs(self) -&gt; Self:\n    \"\"\"Validate the hand offs.\n\n    Returns\n    -------\n    Self\n        The swarm agent data.\n\n    Raises\n    ------\n    ValueError\n        If there are more than one `AfterWork`s.\n    \"\"\"\n    after_works: List[WaldiezSwarmAfterWork] = [\n        hand_off\n        for hand_off in self.handoffs\n        if isinstance(hand_off, WaldiezSwarmAfterWork)\n    ]\n    if len(after_works) &gt; 1:\n        raise ValueError(\n            \"Each agent should have at most one `AfterWork` \"\n            \"and (if any) it should be at the end of the list.\"\n        )\n    on_conditions: List[WaldiezSwarmOnCondition] = [\n        hand_off\n        for hand_off in self.handoffs\n        if isinstance(hand_off, WaldiezSwarmOnCondition)\n    ]\n    on_conditions = sorted(on_conditions, key=lambda x: x.target.order)\n    handoffs = on_conditions + after_works\n    self.handoffs = handoffs\n    return self\n</code></pre>"},{"location":"reference/python/models/agents/swarm_agent.html#waldiez.models.agents.swarm_agent.on_condition.WaldiezSwarmOnCondition","title":"<code>WaldiezSwarmOnCondition</code>","text":"<p>               Bases: <code>WaldiezBase</code></p> <p>Swarm condition to handle handoff.</p> <p>Attributes:</p> Name Type Description <code>target</code> <code>WaldiezSwarmOnConditionTarget</code> <p>The agent or nested chat configuration to hand off to.</p> <code>target_type</code> <code>Literal['agent', 'nested_chat']</code> <p>The type of the target. Can be either 'agent' or 'nested_chat'. Default is 'agent'.</p> <code>condition</code> <code>str</code> <p>The condition for transitioning to the target agent</p> <code>available</code> <code>(str, optional)</code> <p>Optional condition to determine if this OnCondition is available. Can be a Callable or a string.  If a string, it will look up the value of the context variable with that name, which should be a bool.</p> <code>available_check_type</code> <code>Literal['string', 'callable', 'none']</code> <p>The type of the <code>available</code> property to check. Default is \"none\".</p>"},{"location":"reference/python/models/agents/swarm_agent.html#waldiez.models.agents.swarm_agent.on_condition.WaldiezSwarmOnCondition.get_available","title":"<code>get_available(name_prefix: Optional[str] = None, name_suffix: Optional[str] = None) -&gt; Tuple[str, str]</code>","text":"<p>Get the available string.</p> <p>Parameters:</p> Name Type Description Default <code>name_prefix</code> <code>str</code> <p>The prefix to add to the function name. Default is None.</p> <code>None</code> <code>name_suffix</code> <code>str</code> <p>The suffix to add to the function name. Default is None.</p> <code>None</code> <p>Returns:</p> Type Description <code>Tuple[str, str]</code> <p>The available string or function name and code if available.</p> Source code in <code>waldiez/models/agents/swarm_agent/on_condition.py</code> <pre><code>def get_available(\n    self,\n    name_prefix: Optional[str] = None,\n    name_suffix: Optional[str] = None,\n) -&gt; Tuple[str, str]:\n    \"\"\"Get the available string.\n\n    Parameters\n    ----------\n    name_prefix : str, optional\n        The prefix to add to the function name. Default is None.\n    name_suffix : str, optional\n        The suffix to add to the function name. Default is None.\n\n    Returns\n    -------\n    Tuple[str, str]\n        The available string or function name and code if available.\n    \"\"\"\n    return self.available.get_available(\n        name_prefix,\n        name_suffix,\n    )\n</code></pre>"},{"location":"reference/python/models/agents/swarm_agent.html#waldiez.models.agents.swarm_agent.on_condition.WaldiezSwarmOnConditionTargetType","title":"<code>WaldiezSwarmOnConditionTargetType = Literal['agent', 'nested_chat']</code>  <code>module-attribute</code>","text":"<p>Possible types for the target of the OnCondition.</p>"},{"location":"reference/python/models/agents/swarm_agent.html#waldiez.models.agents.swarm_agent.after_work.WaldiezSwarmAfterWork","title":"<code>WaldiezSwarmAfterWork</code>","text":"<p>               Bases: <code>WaldiezBase</code></p> <p>Swarm after work.</p> <p>Attributes:</p> Name Type Description <code>recipient</code> <code>str</code> <p>The agent_id to hand off to, an AfterWork option, or the custom after work method. If it is an AfterWork option, it can be one of ('TERMINATE', 'REVERT_TO_USER', 'STAY', 'SWARM_MANAGER').</p> <code>recipient_type</code> <code>WaldiezSwarmAfterWorkRecipientType</code> <p>The type of recipient. Can be 'agent', 'option', or 'callable'. If 'agent', the recipient is a Swarm Agent. If 'option', the recipient is an AfterWorkOption :     ('TERMINATE', 'REVERT_TO_USER', 'STAY', 'SWARM_MANAGER'). If 'callable', it should have the signature: def custom_after_work(     last_speaker: ConversableAgent,     messages: List[dict],     groupchat: GroupChat, ) -&gt; Union[AfterWorkOption, ConversableAgent, str]:</p>"},{"location":"reference/python/models/agents/swarm_agent.html#waldiez.models.agents.swarm_agent.after_work.WaldiezSwarmAfterWork.get_recipient","title":"<code>get_recipient(agent_names: Dict[str, str], name_prefix: Optional[str] = None, name_suffix: Optional[str] = None) -&gt; Tuple[str, str]</code>","text":"<p>Get the recipient string.</p> <p>Parameters:</p> Name Type Description Default <code>agent_names</code> <code>Dict[str, str]</code> <p>A mapping of agent id to agent name.</p> required <code>name_prefix</code> <code>Optional[str]</code> <p>The prefix for the function name, by default None.</p> <code>None</code> <code>name_suffix</code> <code>Optional[str]</code> <p>The suffix for the function name, by default None.</p> <code>None</code> <p>Returns:</p> Type Description <code>Tuple[str, str]</code> <p>The recipient string and the function content if applicable.</p> Source code in <code>waldiez/models/agents/swarm_agent/after_work.py</code> <pre><code>def get_recipient(\n    self,\n    agent_names: Dict[str, str],\n    name_prefix: Optional[str] = None,\n    name_suffix: Optional[str] = None,\n) -&gt; Tuple[str, str]:\n    \"\"\"Get the recipient string.\n\n    Parameters\n    ----------\n    agent_names : Dict[str, str]\n        A mapping of agent id to agent name.\n    name_prefix : Optional[str], optional\n        The prefix for the function name, by default None.\n    name_suffix : Optional[str], optional\n        The suffix for the function name, by default None.\n\n    Returns\n    -------\n    Tuple[str, str]\n        The recipient string and the function content if applicable.\n    \"\"\"\n    if self.recipient_type == \"option\":\n        return f\"AfterWork(AfterWorkOption.{self.recipient})\", \"\"\n    if self.recipient_type == \"agent\":\n        # the the recipient is passed as the agent name\n        # (and not its id), care should be taken to ensure\n        # the all the agents in the flow have unique names\n        agent_instance = agent_names.get(self.recipient, self.recipient)\n        return f\"AfterWork({agent_instance})\", \"\"\n\n    function_name = CUSTOM_AFTER_WORK\n    if name_prefix:\n        function_name = f\"{name_prefix}_{function_name}\"\n    if name_suffix:\n        function_name = f\"{function_name}_{name_suffix}\"\n    return (\n        f\"AfterWork({function_name})\",\n        generate_function(\n            function_name=function_name,\n            function_args=CUSTOM_AFTER_WORK_ARGS,\n            function_body=self._recipient_string,\n            function_types=CUSTOM_AFTER_WORK_TYPES,\n        ),\n    )\n</code></pre>"},{"location":"reference/python/models/agents/swarm_agent.html#waldiez.models.agents.swarm_agent.after_work.WaldiezSwarmAfterWork.validate_recipient","title":"<code>validate_recipient() -&gt; Self</code>","text":"<p>Validate the recipient.</p> <p>Returns:</p> Type Description <code>WaldiezSwarmAfterWork</code> <p>The validated after work model.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the validation fails.</p> Source code in <code>waldiez/models/agents/swarm_agent/after_work.py</code> <pre><code>@model_validator(mode=\"after\")\ndef validate_recipient(self) -&gt; Self:\n    \"\"\"Validate the recipient.\n\n    Returns\n    -------\n    WaldiezSwarmAfterWork\n        The validated after work model.\n\n    Raises\n    ------\n    ValueError\n        If the validation fails.\n    \"\"\"\n    self._recipient_string = self.recipient\n    if self.recipient_type == \"callable\":\n        is_valid, error_or_body = check_function(\n            code_string=self.recipient,\n            function_name=CUSTOM_AFTER_WORK,\n            function_args=CUSTOM_AFTER_WORK_ARGS,\n        )\n        if not is_valid or not error_or_body:\n            # pylint: disable=inconsistent-quotes\n            raise ValueError(\n                f\"Invalid custom method: {error_or_body or 'no content'}\"\n            )\n        self._recipient_string = error_or_body\n    elif self.recipient_type == \"option\":\n        if self.recipient not in [\n            \"TERMINATE\",\n            \"REVERT_TO_USER\",\n            \"STAY\",\n            \"SWARM_MANAGER\",\n        ]:\n            raise ValueError(\"Invalid option.\")\n    return self\n</code></pre>"},{"location":"reference/python/models/agents/swarm_agent.html#waldiez.models.agents.swarm_agent.after_work.WaldiezSwarmAfterWorkOption","title":"<code>WaldiezSwarmAfterWorkOption = Literal['TERMINATE', 'REVERT_TO_USER', 'STAY', 'SWARM_MANAGER']</code>  <code>module-attribute</code>","text":"<p>The possible AfterWork options.</p>"},{"location":"reference/python/models/agents/swarm_agent.html#waldiez.models.agents.swarm_agent.after_work.WaldiezSwarmAfterWorkRecipientType","title":"<code>WaldiezSwarmAfterWorkRecipientType = Literal['agent', 'option', 'callable']</code>  <code>module-attribute</code>","text":"<p>The possible AfterWork recipient types.</p>"},{"location":"reference/python/models/agents/swarm_agent.html#waldiez.models.agents.swarm_agent.update_system_message.WaldiezSwarmUpdateFunctionType","title":"<code>WaldiezSwarmUpdateFunctionType = Literal['string', 'callable']</code>  <code>module-attribute</code>","text":"<p>Possible types for the update function.</p>"},{"location":"reference/python/models/agents/swarm_agent.html#waldiez.models.agents.swarm_agent.update_system_message.WaldiezSwarmUpdateSystemMessage","title":"<code>WaldiezSwarmUpdateSystemMessage</code>","text":"<p>               Bases: <code>WaldiezBase</code></p> <p>Update the agent's system message before they reply.</p> <p>Attributes:</p> Name Type Description <code>update_function_type</code> <code>Literal['string', 'callable']</code> <p>The type of the update function. Can be either a string or a callable.</p> <code>update_function</code> <code>str</code> <p>The string template or function definition to update the agent's system message. Can be a string or a Callable. If the <code>function_type</code> is 'string' it will be used as a template and substitute the context variables. If the <code>function_type</code> is 'callable', it should have the signature: <pre><code>def custom_update_system_message(\n    agent: ConversableAgent,\n    messages: List[Dict[str, Any]]\n) -&gt; str:\n</code></pre></p>"},{"location":"reference/python/models/agents/swarm_agent.html#waldiez.models.agents.swarm_agent.update_system_message.WaldiezSwarmUpdateSystemMessage.get_update_function","title":"<code>get_update_function(name_prefix: Optional[str] = None, name_suffix: Optional[str] = None) -&gt; Tuple[str, str]</code>","text":"<p>Get the update function.</p> <p>Parameters:</p> Name Type Description Default <code>name_prefix</code> <code>str</code> <p>The prefix of the name, by default None</p> <code>None</code> <code>name_suffix</code> <code>str</code> <p>The suffix of the name, by default None</p> <code>None</code> <p>Returns:</p> Type Description <code>Tuple[str, str]</code> <p>The update function and the function name.</p> Source code in <code>waldiez/models/agents/swarm_agent/update_system_message.py</code> <pre><code>def get_update_function(\n    self,\n    name_prefix: Optional[str] = None,\n    name_suffix: Optional[str] = None,\n) -&gt; Tuple[str, str]:\n    \"\"\"Get the update function.\n\n    Parameters\n    ----------\n    name_prefix : str, optional\n        The prefix of the name, by default None\n    name_suffix : str, optional\n        The suffix of the name, by default None\n\n    Returns\n    -------\n    Tuple[str, str]\n        The update function and the function name.\n\n    \"\"\"\n    function_name = CUSTOM_UPDATE_SYSTEM_MESSAGE\n    if name_prefix:\n        function_name = f\"{name_prefix}_{function_name}\"\n    if name_suffix:\n        function_name = f\"{function_name}_{name_suffix}\"\n    return (\n        generate_function(\n            function_name=function_name,\n            function_args=CUSTOM_UPDATE_SYSTEM_MESSAGE_ARGS,\n            function_types=CUSTOM_UPDATE_SYSTEM_MESSAGE_TYPES,\n            function_body=self._update_function,\n        ),\n        function_name,\n    )\n</code></pre>"},{"location":"reference/python/models/agents/swarm_agent.html#waldiez.models.agents.swarm_agent.update_system_message.WaldiezSwarmUpdateSystemMessage.validate_update_system_message","title":"<code>validate_update_system_message() -&gt; Self</code>","text":"<p>Validate the update system message function.</p> <p>Returns:</p> Type Description <code>UpdateSystemMessage</code> <p>The validated update system message.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the type is callable and the function is invalid. or if the function type is not 'string' or 'callable'.</p> Source code in <code>waldiez/models/agents/swarm_agent/update_system_message.py</code> <pre><code>@model_validator(mode=\"after\")\ndef validate_update_system_message(self) -&gt; Self:\n    \"\"\"Validate the update system message function.\n\n    Returns\n    -------\n    UpdateSystemMessage\n        The validated update system message.\n\n    Raises\n    ------\n    ValueError\n        If the type is callable and the function is invalid.\n        or if the function type is not 'string' or 'callable'.\n\n    \"\"\"\n    self._update_function = self.update_function\n    if self.update_function_type == \"callable\":\n        valid, error_or_body = check_function(\n            code_string=self.update_function,\n            function_name=CUSTOM_UPDATE_SYSTEM_MESSAGE,\n            function_args=CUSTOM_UPDATE_SYSTEM_MESSAGE_ARGS,\n        )\n        if not valid or not error_or_body:\n            # pylint: disable=inconsistent-quotes\n            raise ValueError(\n                f\"Invalid custom method: {error_or_body or 'no content'}\"\n            )\n        self._update_function = error_or_body\n    return self\n</code></pre>"},{"location":"reference/python/models/agents/user_proxy.html","title":"User proxy","text":"<p>User proxy agent model.</p> <p>User proxy agent data module.</p>"},{"location":"reference/python/models/agents/user_proxy.html#waldiez.models.agents.user_proxy.user_proxy.WaldiezUserProxy","title":"<code>WaldiezUserProxy</code>","text":"<p>               Bases: <code>WaldiezAgent</code></p> <p>User proxy agent model.</p> <p>A <code>WaldiezAgent</code> with agent_type <code>user</code> and default <code>human_input_mode</code>: <code>\"ALWAYS\"</code> See <code>WaldiezAgent</code>,<code>WaldiezUserProxyData</code>,<code>WaldiezAgentData</code> for more info.</p> <p>Attributes:</p> Name Type Description <code>agent_type</code> <code>Literal['user']</code> <p>The agent type: 'user' for a user proxy agent</p> <code>data</code> <code>WaldiezUserProxyData</code> <p>The user proxy agent's data</p>"},{"location":"reference/python/models/agents/user_proxy.html#waldiez.models.agents.user_proxy.user_proxy_data.WaldiezUserProxyData","title":"<code>WaldiezUserProxyData</code>","text":"<p>               Bases: <code>WaldiezAgentData</code></p> <p>User proxy agent data class.</p> <p>The data for an agent with <code>human_input_mode</code> set to <code>\"ALWAYS\"</code> as default. See the parent's docs (<code>WaldiezAgentData</code>) for the rest of the properties.</p> <p>Attributes:</p> Name Type Description <code>human_input_mode</code> <code>Literal['ALWAYS', 'NEVER', 'TERMINATE']</code> <p>The human input mode, Defaults to <code>ALWAYS</code></p>"},{"location":"reference/react/index.html","title":"Index","text":"<p>@waldiez/react v0.4.5</p>"},{"location":"reference/react/index.html#waldiez-react","title":"Waldiez React","text":""},{"location":"reference/react/index.html#installation-from-npm-registry","title":"Installation from npm registry","text":"<pre><code># any of the following\nnpm install @waldiez/react\nyarn add @waldiez/react\npnpm add @waldiez/react\nbun add @waldiez/react\n</code></pre>"},{"location":"reference/react/index.html#requirements-for-development","title":"Requirements for development","text":"<ul> <li>Node.js (version 22.x or later)</li> <li>bun@1.2.10</li> </ul>"},{"location":"reference/react/index.html#libraries","title":"Libraries","text":"<pre><code>{\n    \"@monaco-editor/react\": \"^4.7.0\",\n    \"@xyflow/react\": \"^12.5.6\",\n    \"jszip\": \"^3.10.1\",\n    \"microdiff\": \"^1.5.0\",\n    \"nanoid\": \"^5.1.5\",\n    \"rc-slider\": \"^11.1.8\",\n    \"react-error-boundary\": \"^5.0.0\",\n    \"react-fast-compare\": \"^3.2.2\",\n    \"react-hotkeys-hook\": \"^5.0.1\",\n    \"react-icons\": \"^5.5.0\",\n    \"react-select\": \"^5.10.1\",\n    \"zundo\": \"^2.3.0\",\n    \"zustand\": \"^5.0.3\"\n}\n</code></pre>"},{"location":"reference/react/index.html#usage","title":"Usage","text":"<pre><code>// npm|yarn|pnpm|bun|whatever add|install @waldiez/react\nimport React from \"react\";\nimport ReactDOM from \"react-dom/client\";\n\nimport { Waldiez } from \"@waldiez/react\";\nimport \"@waldiez/react/dist/@waldiez.css\";\n\nconst isProd = import.meta.env.PROD;\n\n// the actions should be handled by other components\n// that use `Waldiez` as a child component\n/**\n *OnChange\n */\nconst onChange = null;\n// const onChange = (flowJson: any) =&gt; {\n//   console.info(JSON.stringify(JSON.parse(flowJson), null, 2));\n// };\n\n/**\n * OnSave\n * if enabled, add a listener for the key combination (ctrl+s/mod+s)\n * to save the flow\n * the flow string is the JSON stringified flow\n * the action should be handled by the parent component\n */\nconst onSaveDev = (flowString: string) =&gt; {\n    console.info(\"saving\", flowString);\n};\nconst onSave = isProd ? null : onSaveDev;\n/**\n * UserInput\n */\n// to check/test the user input, use `onUserInput` and `inputPrompt`\n// reset `inputPrompt` to `null` to remove/hide the modal\n// these two props are used to show a modal to the user\n// and get the user input\n// Example:\n//\n// const [ inputPrompt, setInputPrompt ] = useState&lt;{\n//   previousMessages: string[];\n//   prompt: string;\n// } | null&gt;(null);\n//\n// const onUserInput = (input: string) =&gt; {\n//   const allMessages = input.split('\\n');\n//   const previousMessages = allMessages.slice(0, allMessages.length - 1);\n//   const prompt = allMessages[allMessages.length - 1];\n//   setInputPrompt({ previousMessages, prompt });\n// };\n\n// const inputPrompt = {\n//   previousMessages: ['Hello, World!', 'How\\n are you?'],\n//   prompt: 'What is your name?'\n// };\n// const onUserInput = (input: string) =&gt; {\n//   console.info(input);\n// };\nconst inputPrompt = null;\nconst onUserInput = null;\n\n/**\n * OnRun\n * adds a button to the main panel, to run the code.\n * The action should be handled by the parent component\n * \"running\" the flow happens in the python part / backend\n * the flow string is the JSON stringified flow\n */\nconst onRunDev = (flowString: string) =&gt; {\n    console.info(flowString);\n};\nconst onRun = isProd ? null : onRunDev;\n\n/**\n * OnConvert\n * adds two buttons to the main panel, to convert the flow to python or jupyter notebook\n * The action should be handled by the parent component\n * the flow string is the JSON stringified flow\n * the `to` parameter is either 'py' or 'ipynb'\n * the conversion happens in the python part / backend\n */\n\nconst onConvertDev = (_flowString: string, to: \"py\" | \"ipynb\") =&gt; {\n    console.info(\"converting to\", to);\n};\nconst onConvert = isProd ? null : onConvertDev;\n/**\n * readOnly\n * if true, only the theme button is shown\n * only zoom and viewport are enabled, no further actions are allowed\n */\nconst readOnly: boolean | undefined | null = undefined;\n\n/**\n * skipImport and skipExport\n * if true, the import and export buttons are not added to the main panel\n */\nconst skipImport = false;\nconst skipExport = false;\n/**\n * OnUpload\n * on RAG user: adds a dropzone to upload files\n * when triggered, the files are sent to the backend,\n * returning the paths of the uploaded files\n * and the 'docsPath' in RAG retrieveConfig is updated.\n * the paths can be either relative or absolute,\n * this depends on how we run the flow\n * (the docsPath will have to be updated accordingly if needed on the backend)\n */\nconst onUploadDev = (files: File[]) =&gt; {\n    return new Promise&lt;string[]&gt;(resolve =&gt; {\n        const uploadedFiles: string[] = [];\n        const promises = files.map(file =&gt; {\n            // simulate uploading files\n            return new Promise&lt;string&gt;(resolve =&gt; {\n                setTimeout(() =&gt; {\n                    uploadedFiles.push(`path/to/${file.name}`);\n                    resolve(`path/to/${file.name}`);\n                }, 2000);\n            });\n        });\n        Promise.all(promises).then(() =&gt; {\n            resolve(uploadedFiles);\n        });\n    });\n};\nconst onUpload = isProd ? null : onUploadDev;\n\n/**\n * Monaco Editor\n */\n// DEV: downloaded in `public/vs` folder (.gitignored)\n// PROD:\n//  either served and `VITE_VS_PATH` is set to the path, or\n//  use the default cdn (jsdelivr) that monaco loader uses\n// make sure the csp allows the cdn\nlet vsPath = !isProd ? \"vs\" : (import.meta.env.VITE_VS_PATH ?? null);\nif (!vsPath) {\n    // if set to empty string, make it null\n    vsPath = null;\n}\n/**\n  Other props:\n   we can use:\n  `import { importFlow } from '@waldiez/react';`\n   to import an existing flow from a waldiez/json file\n   import { ReactFlowJsonObject } from \"@xyflow/react\";\n    // ReactFlowJsonObject: nodes: NodeType[]; edges: EdgeType[]; viewport: Viewport;\n\n   // all the props:\n   type WaldiezFlowProps = ReactFlowJsonObject &amp; {\n        flowId: string;\n        isAsync?: boolean;\n        cacheSeed?: number | null;\n        storageId: string;\n        name: string;\n        description: string;\n        tags: string[];\n        requirements: string[];\n        viewport?: Viewport;\n        createdAt?: string;\n        updatedAt?: string;\n    };\n    type WaldiezProps = WaldiezFlowProps &amp; {\n        nodes: Node[];\n        edges: Edge[];\n        viewport?: Viewport;\n        monacoVsPath?: string | null;\n        inputPrompt?: {\n            previousMessages: string[];\n            prompt: string;\n        } | null;\n        readOnly?: boolean | null;\n        skipImport?: boolean | null;\n        skipExport?: boolean | null;\n        onUpload?: ((files: File[]) =&gt; Promise&lt;string[]&gt;) | null;\n        onChange?: ((flow: string) =&gt; void) | null;\n        onRun?: ((flow: string) =&gt; void) | null;\n        onUserInput?: ((input: string) =&gt; void) | null;\n        onConvert?: ((flow: string, to: \"py\" | \"ipynb\") =&gt; void) | null;\n        onSave?: ((flow: string) =&gt; void) | null;\n    };\n\n    // Alternative:\n    // use the ones we want to override\n    const overrides: Partial&lt;WaldiezProps&gt; = {\n        monacoVsPath: vsPath,\n        onUserInput,\n        flowId: \"flow-0\",\n        storageId: \"storage-0\",\n        inputPrompt,\n        onRun,\n        onConvert,\n        onChange,\n        onUpload,\n        onSave,\n        readOnly,\n        skipImport,\n        skipExport,\n    }\n    const imported = importFlow(\"path/to/flow.json\");\n    &lt;Waldiez {...imported} {...overrides} /&gt;\n    // example:\n    &lt;Waldiez {...imported} readOnly={readOnly} skipExport={skipExport} skipImport={skipImport} /&gt;\n */\n\nconst startApp = () =&gt; {\n    ReactDOM.createRoot(document.getElementById(\"root\")!).render(\n        &lt;React.StrictMode&gt;\n            &lt;Waldiez\n                monacoVsPath={vsPath}\n                onUserInput={onUserInput}\n                flowId=\"flow-0\"\n                storageId=\"storage-0\"\n                inputPrompt={inputPrompt}\n                onRun={onRun}\n                onConvert={onConvert}\n                onChange={onChange}\n                onUpload={onUpload}\n                onSave={onSave}\n                readOnly={readOnly}\n                skipImport={skipImport}\n                skipExport={skipExport}\n            /&gt;\n        &lt;/React.StrictMode&gt;,\n    );\n};\n\nstartApp();\n</code></pre>"},{"location":"reference/react/index.html#license","title":"License","text":"<p>This project is licensed under the Apache License, Version 2.0 (Apache-2.0).</p>"},{"location":"reference/react/globals.html","title":"Globals","text":"<p>@waldiez/react v0.4.5</p>"},{"location":"reference/react/globals.html#classes","title":"Classes","text":"<ul> <li>WaldiezAgent</li> <li>WaldiezAgentAssistant</li> <li>WaldiezAgentAssistantData</li> <li>WaldiezAgentCaptain</li> <li>WaldiezAgentCaptainData</li> <li>WaldiezAgentData</li> <li>WaldiezAgentGroupManager</li> <li>WaldiezAgentGroupManagerData</li> <li>WaldiezAgentGroupManagerSpeakers</li> <li>WaldiezAgentRagUser</li> <li>WaldiezAgentRagUserData</li> <li>WaldiezAgentReasoning</li> <li>WaldiezAgentReasoningData</li> <li>WaldiezAgentSwarm</li> <li>WaldiezAgentSwarmContainer</li> <li>WaldiezAgentSwarmContainerData</li> <li>WaldiezAgentSwarmData</li> <li>WaldiezAgentUserProxy</li> <li>WaldiezAgentUserProxyData</li> <li>WaldiezChat</li> <li>WaldiezChatData</li> <li>WaldiezFlow</li> <li>WaldiezFlowData</li> <li>WaldiezMessage</li> <li>WaldiezModel</li> <li>WaldiezModelData</li> <li>WaldiezSkill</li> <li>WaldiezSkillData</li> <li>WaldiezSwarmAfterWork</li> <li>WaldiezSwarmOnCondition</li> <li>WaldiezSwarmUpdateSystemMessage</li> </ul>"},{"location":"reference/react/globals.html#interfaces","title":"Interfaces","text":"<ul> <li>IWaldiezAgentStore</li> <li>IWaldiezEdgeStore</li> <li>IWaldiezFlowStore</li> <li>IWaldiezModelStore</li> <li>IWaldiezNodeStore</li> <li>IWaldiezSkillStore</li> </ul>"},{"location":"reference/react/globals.html#type-aliases","title":"Type Aliases","text":"<ul> <li>GroupChatSpeakerSelectionMethodOption</li> <li>GroupChatSpeakerSelectionMode</li> <li>GroupChatSpeakerTransitionsType</li> <li>ImportedFlow</li> <li>ReasoningConfigAnswerApproach</li> <li>ReasoningConfigMethod</li> <li>ThingsToImport</li> <li>typeOfGet</li> <li>typeOfSet</li> <li>WaldiezAgentCodeExecutionConfig</li> <li>WaldiezAgentCodeExecutionConfigDict</li> <li>WaldiezAgentCommonData</li> <li>WaldiezAgentHumanInputMode</li> <li>WaldiezAgentLinkedSkill</li> <li>WaldiezAgentNestedChat</li> <li>WaldiezAgentTerminationCriterionOption</li> <li>WaldiezAgentTerminationMessageCheck</li> <li>WaldiezAgentType</li> <li>WaldiezAgentTypeTerminationTypeOption</li> <li>WaldiezCaptainAgentLibEntry</li> <li>WaldiezChatDataCommon</li> <li>WaldiezChatLlmSummaryMethod</li> <li>WaldiezChatSummary</li> <li>WaldiezEdge</li> <li>WaldiezEdgeData</li> <li>WaldiezEdgeType</li> <li>WaldiezFlowInfo</li> <li>WaldiezFlowProps</li> <li>WaldiezMessageType</li> <li>WaldiezModelAPIType</li> <li>WaldiezModelDataCommon</li> <li>WaldiezModelPrice</li> <li>WaldiezNestedChat</li> <li>WaldiezNodeAgent</li> <li>WaldiezNodeAgentAssistant</li> <li>WaldiezNodeAgentAssistantData</li> <li>WaldiezNodeAgentCaptain</li> <li>WaldiezNodeAgentCaptainData</li> <li>WaldiezNodeAgentData</li> <li>WaldiezNodeAgentGroupManager</li> <li>WaldiezNodeAgentGroupManagerData</li> <li>WaldiezNodeAgentRagUser</li> <li>WaldiezNodeAgentRagUserData</li> <li>WaldiezNodeAgentReasoning</li> <li>WaldiezNodeAgentReasoningData</li> <li>WaldiezNodeAgentSwarm</li> <li>WaldiezNodeAgentSwarmContainer</li> <li>WaldiezNodeAgentSwarmContainerData</li> <li>WaldiezNodeAgentSwarmData</li> <li>WaldiezNodeAgentType</li> <li>WaldiezNodeAgentUserProxy</li> <li>WaldiezNodeAgentUserProxyData</li> <li>WaldiezNodeModel</li> <li>WaldiezNodeModelData</li> <li>WaldiezNodeSkill</li> <li>WaldiezNodeSkillData</li> <li>WaldiezNodeType</li> <li>WaldiezProps</li> <li>WaldiezProviderProps</li> <li>WaldiezRagUserRetrieveConfig</li> <li>WaldiezReasoningAgentReasonConfig</li> <li>WaldiezSkillDataCommon</li> <li>WaldiezSkillType</li> <li>WaldiezState</li> <li>WaldiezStore</li> <li>WaldiezStoreProps</li> <li>WaldiezSwarmAfterWorkOption</li> <li>WaldiezSwarmAfterWorkRecipientType</li> <li>WaldiezSwarmHandoff</li> <li>WaldiezSwarmOnConditionAvailable</li> <li>WaldiezSwarmOnConditionAvailableCheckType</li> <li>WaldiezSwarmOnConditionTargetType</li> <li>WaldiezSwarmUpdateSystemMessageType</li> <li>WaldiezVectorDbConfig</li> </ul>"},{"location":"reference/react/globals.html#variables","title":"Variables","text":"<ul> <li>agentMapper</li> <li>chatMapper</li> <li>DEFAULT_CREWAI_SKILL_CONTENT</li> <li>DEFAULT_CUSTOM_SKILL_CONTENT</li> <li>DEFAULT_LANGCHAIN_SKILL_CONTENT</li> <li>DEFAULT_SHARED_SKILL_CONTENT</li> <li>DEFAULT_SKILL_CONTENT_MAP</li> <li>defaultReasonConfig</li> <li>defaultRetrieveConfig</li> <li>emptyFlow</li> <li>flowMapper</li> <li>modelMapper</li> <li>skillMapper</li> </ul>"},{"location":"reference/react/globals.html#functions","title":"Functions","text":"<ul> <li>createWaldiezStore</li> <li>useWaldiez</li> <li>useWaldiezHistory</li> <li>WaldiezProvider</li> </ul>"},{"location":"reference/react/classes/WaldiezAgent.html","title":"WaldiezAgent","text":"<p>@waldiez/react v0.4.5</p> <p>Defined in: src/waldiez/models/Agent/Common/Agent.ts:22</p> <p>Waldiez Agent.</p>"},{"location":"reference/react/classes/WaldiezAgent.html#param","title":"Param","text":"<p>The id of the agent</p>"},{"location":"reference/react/classes/WaldiezAgent.html#param_1","title":"Param","text":"<p>The type of the node in a graph (agent)</p>"},{"location":"reference/react/classes/WaldiezAgent.html#param_2","title":"Param","text":"<p>The type of the agent (\"user\" | \"assistant\" | \"manager\" | \"rag_user\" | \"swarm\" | \"reasoning\" | \"captain\")</p>"},{"location":"reference/react/classes/WaldiezAgent.html#param_3","title":"Param","text":"<p>The name of the agent</p>"},{"location":"reference/react/classes/WaldiezAgent.html#param_4","title":"Param","text":"<p>The description of the agent</p>"},{"location":"reference/react/classes/WaldiezAgent.html#param_5","title":"Param","text":"<p>The tags of the agent</p>"},{"location":"reference/react/classes/WaldiezAgent.html#param_6","title":"Param","text":"<p>The requirements of the agent</p>"},{"location":"reference/react/classes/WaldiezAgent.html#param_7","title":"Param","text":"<p>The creation date of the agent</p>"},{"location":"reference/react/classes/WaldiezAgent.html#param_8","title":"Param","text":"<p>The update date of the agent</p>"},{"location":"reference/react/classes/WaldiezAgent.html#param_9","title":"Param","text":"<p>The data of the agent. See WaldiezAgentData</p>"},{"location":"reference/react/classes/WaldiezAgent.html#extended-by","title":"Extended by","text":"<ul> <li><code>WaldiezAgentAssistant</code></li> <li><code>WaldiezAgentCaptain</code></li> <li><code>WaldiezAgentGroupManager</code></li> <li><code>WaldiezAgentRagUser</code></li> <li><code>WaldiezAgentReasoning</code></li> <li><code>WaldiezAgentSwarm</code></li> <li><code>WaldiezAgentSwarmContainer</code></li> <li><code>WaldiezAgentUserProxy</code></li> </ul>"},{"location":"reference/react/classes/WaldiezAgent.html#constructors","title":"Constructors","text":""},{"location":"reference/react/classes/WaldiezAgent.html#constructor","title":"Constructor","text":"<p>new WaldiezAgent(<code>props</code>): <code>WaldiezAgent</code></p> <p>Defined in: src/waldiez/models/Agent/Common/Agent.ts:35</p>"},{"location":"reference/react/classes/WaldiezAgent.html#parameters","title":"Parameters","text":""},{"location":"reference/react/classes/WaldiezAgent.html#props","title":"props","text":""},{"location":"reference/react/classes/WaldiezAgent.html#agenttype","title":"agentType","text":"<p><code>WaldiezNodeAgentType</code></p>"},{"location":"reference/react/classes/WaldiezAgent.html#createdat","title":"createdAt","text":"<p><code>string</code></p>"},{"location":"reference/react/classes/WaldiezAgent.html#data","title":"data","text":"<p><code>WaldiezAgentData</code></p>"},{"location":"reference/react/classes/WaldiezAgent.html#description","title":"description","text":"<p><code>string</code></p>"},{"location":"reference/react/classes/WaldiezAgent.html#id","title":"id","text":"<p><code>string</code></p>"},{"location":"reference/react/classes/WaldiezAgent.html#name","title":"name","text":"<p><code>string</code></p>"},{"location":"reference/react/classes/WaldiezAgent.html#requirements","title":"requirements","text":"<p><code>string</code>[]</p>"},{"location":"reference/react/classes/WaldiezAgent.html#rest","title":"rest?","text":"<p>{[<code>key</code>: <code>string</code>]: <code>unknown</code>; }</p>"},{"location":"reference/react/classes/WaldiezAgent.html#tags","title":"tags","text":"<p><code>string</code>[]</p>"},{"location":"reference/react/classes/WaldiezAgent.html#updatedat","title":"updatedAt","text":"<p><code>string</code></p>"},{"location":"reference/react/classes/WaldiezAgent.html#returns","title":"Returns","text":"<p><code>WaldiezAgent</code></p>"},{"location":"reference/react/classes/WaldiezAgent.html#properties","title":"Properties","text":""},{"location":"reference/react/classes/WaldiezAgent.html#agenttype_1","title":"agentType","text":"<p>agentType: <code>WaldiezNodeAgentType</code></p> <p>Defined in: src/waldiez/models/Agent/Common/Agent.ts:25</p>"},{"location":"reference/react/classes/WaldiezAgent.html#createdat_1","title":"createdAt","text":"<p>createdAt: <code>string</code></p> <p>Defined in: src/waldiez/models/Agent/Common/Agent.ts:30</p>"},{"location":"reference/react/classes/WaldiezAgent.html#data_1","title":"data","text":"<p>data: <code>WaldiezAgentData</code></p> <p>Defined in: src/waldiez/models/Agent/Common/Agent.ts:32</p>"},{"location":"reference/react/classes/WaldiezAgent.html#description_1","title":"description","text":"<p>description: <code>string</code></p> <p>Defined in: src/waldiez/models/Agent/Common/Agent.ts:27</p>"},{"location":"reference/react/classes/WaldiezAgent.html#id_1","title":"id","text":"<p>id: <code>string</code></p> <p>Defined in: src/waldiez/models/Agent/Common/Agent.ts:23</p>"},{"location":"reference/react/classes/WaldiezAgent.html#name_1","title":"name","text":"<p>name: <code>string</code></p> <p>Defined in: src/waldiez/models/Agent/Common/Agent.ts:26</p>"},{"location":"reference/react/classes/WaldiezAgent.html#requirements_1","title":"requirements","text":"<p>requirements: <code>string</code>[]</p> <p>Defined in: src/waldiez/models/Agent/Common/Agent.ts:29</p>"},{"location":"reference/react/classes/WaldiezAgent.html#rest_1","title":"rest?","text":"<p><code>optional</code> rest: <code>object</code></p> <p>Defined in: src/waldiez/models/Agent/Common/Agent.ts:33</p>"},{"location":"reference/react/classes/WaldiezAgent.html#index-signature","title":"Index Signature","text":"<p>[<code>key</code>: <code>string</code>]: <code>unknown</code></p>"},{"location":"reference/react/classes/WaldiezAgent.html#tags_1","title":"tags","text":"<p>tags: <code>string</code>[]</p> <p>Defined in: src/waldiez/models/Agent/Common/Agent.ts:28</p>"},{"location":"reference/react/classes/WaldiezAgent.html#type","title":"type","text":"<p>type: <code>string</code> = <code>\"agent\"</code></p> <p>Defined in: src/waldiez/models/Agent/Common/Agent.ts:24</p>"},{"location":"reference/react/classes/WaldiezAgent.html#updatedat_1","title":"updatedAt","text":"<p>updatedAt: <code>string</code></p> <p>Defined in: src/waldiez/models/Agent/Common/Agent.ts:31</p>"},{"location":"reference/react/classes/WaldiezAgent.html#methods","title":"Methods","text":""},{"location":"reference/react/classes/WaldiezAgent.html#create","title":"create()","text":"<p><code>static</code> create(<code>agentType</code>): <code>WaldiezAgent</code></p> <p>Defined in: src/waldiez/models/Agent/Common/Agent.ts:59</p>"},{"location":"reference/react/classes/WaldiezAgent.html#parameters_1","title":"Parameters","text":""},{"location":"reference/react/classes/WaldiezAgent.html#agenttype_2","title":"agentType","text":"<p><code>WaldiezAgentType</code> | <code>\"swarm_container\"</code></p>"},{"location":"reference/react/classes/WaldiezAgent.html#returns_1","title":"Returns","text":"<p><code>WaldiezAgent</code></p>"},{"location":"reference/react/classes/WaldiezAgentAssistant.html","title":"WaldiezAgentAssistant","text":"<p>@waldiez/react v0.4.5</p> <p>Defined in: src/waldiez/models/Agent/Assistant/Assistant.ts:23</p> <p>Waldiez Agent Assistant.</p>"},{"location":"reference/react/classes/WaldiezAgentAssistant.html#param","title":"Param","text":"<p>The id of the agent</p>"},{"location":"reference/react/classes/WaldiezAgentAssistant.html#param_1","title":"Param","text":"<p>The type of the node in a graph (agent)</p>"},{"location":"reference/react/classes/WaldiezAgentAssistant.html#param_2","title":"Param","text":"<p>The type of the agent (\"assistant\")</p>"},{"location":"reference/react/classes/WaldiezAgentAssistant.html#param_3","title":"Param","text":"<p>The name of the agent</p>"},{"location":"reference/react/classes/WaldiezAgentAssistant.html#param_4","title":"Param","text":"<p>The description of the agent</p>"},{"location":"reference/react/classes/WaldiezAgentAssistant.html#param_5","title":"Param","text":"<p>The tags of the agent</p>"},{"location":"reference/react/classes/WaldiezAgentAssistant.html#param_6","title":"Param","text":"<p>The requirements of the agent</p>"},{"location":"reference/react/classes/WaldiezAgentAssistant.html#param_7","title":"Param","text":"<p>The creation date of the agent</p>"},{"location":"reference/react/classes/WaldiezAgentAssistant.html#param_8","title":"Param","text":"<p>The update date of the agent</p>"},{"location":"reference/react/classes/WaldiezAgentAssistant.html#param_9","title":"Param","text":"<p>The data of the agent. See WaldiezAgentAssistantData</p>"},{"location":"reference/react/classes/WaldiezAgentAssistant.html#param_10","title":"Param","text":"<p>Any other data</p>"},{"location":"reference/react/classes/WaldiezAgentAssistant.html#see","title":"See","text":"<p>WaldiezAgent</p>"},{"location":"reference/react/classes/WaldiezAgentAssistant.html#extends","title":"Extends","text":"<ul> <li><code>WaldiezAgent</code></li> </ul>"},{"location":"reference/react/classes/WaldiezAgentAssistant.html#constructors","title":"Constructors","text":""},{"location":"reference/react/classes/WaldiezAgentAssistant.html#constructor","title":"Constructor","text":"<p>new WaldiezAgentAssistant(<code>props</code>): <code>WaldiezAgentAssistant</code></p> <p>Defined in: src/waldiez/models/Agent/Assistant/Assistant.ts:26</p>"},{"location":"reference/react/classes/WaldiezAgentAssistant.html#parameters","title":"Parameters","text":""},{"location":"reference/react/classes/WaldiezAgentAssistant.html#props","title":"props","text":""},{"location":"reference/react/classes/WaldiezAgentAssistant.html#agenttype","title":"agentType","text":"<p><code>WaldiezNodeAgentType</code></p>"},{"location":"reference/react/classes/WaldiezAgentAssistant.html#createdat","title":"createdAt","text":"<p><code>string</code></p>"},{"location":"reference/react/classes/WaldiezAgentAssistant.html#data","title":"data","text":"<p><code>WaldiezAgentAssistantData</code></p>"},{"location":"reference/react/classes/WaldiezAgentAssistant.html#description","title":"description","text":"<p><code>string</code></p>"},{"location":"reference/react/classes/WaldiezAgentAssistant.html#id","title":"id","text":"<p><code>string</code></p>"},{"location":"reference/react/classes/WaldiezAgentAssistant.html#name","title":"name","text":"<p><code>string</code></p>"},{"location":"reference/react/classes/WaldiezAgentAssistant.html#requirements","title":"requirements","text":"<p><code>string</code>[]</p>"},{"location":"reference/react/classes/WaldiezAgentAssistant.html#rest","title":"rest?","text":"<p>{[<code>key</code>: <code>string</code>]: <code>unknown</code>; }</p>"},{"location":"reference/react/classes/WaldiezAgentAssistant.html#tags","title":"tags","text":"<p><code>string</code>[]</p>"},{"location":"reference/react/classes/WaldiezAgentAssistant.html#updatedat","title":"updatedAt","text":"<p><code>string</code></p>"},{"location":"reference/react/classes/WaldiezAgentAssistant.html#returns","title":"Returns","text":"<p><code>WaldiezAgentAssistant</code></p>"},{"location":"reference/react/classes/WaldiezAgentAssistant.html#overrides","title":"Overrides","text":"<p><code>WaldiezAgent</code>.<code>constructor</code></p>"},{"location":"reference/react/classes/WaldiezAgentAssistant.html#properties","title":"Properties","text":""},{"location":"reference/react/classes/WaldiezAgentAssistant.html#agenttype_1","title":"agentType","text":"<p>agentType: <code>WaldiezNodeAgentType</code> = <code>\"assistant\"</code></p> <p>Defined in: src/waldiez/models/Agent/Assistant/Assistant.ts:25</p>"},{"location":"reference/react/classes/WaldiezAgentAssistant.html#overrides_1","title":"Overrides","text":"<p><code>WaldiezAgent</code>.<code>agentType</code></p>"},{"location":"reference/react/classes/WaldiezAgentAssistant.html#createdat_1","title":"createdAt","text":"<p>createdAt: <code>string</code></p> <p>Defined in: src/waldiez/models/Agent/Common/Agent.ts:30</p>"},{"location":"reference/react/classes/WaldiezAgentAssistant.html#inherited-from","title":"Inherited from","text":"<p><code>WaldiezAgent</code>.<code>createdAt</code></p>"},{"location":"reference/react/classes/WaldiezAgentAssistant.html#data_1","title":"data","text":"<p>data: <code>WaldiezAgentAssistantData</code></p> <p>Defined in: src/waldiez/models/Agent/Assistant/Assistant.ts:24</p>"},{"location":"reference/react/classes/WaldiezAgentAssistant.html#overrides_2","title":"Overrides","text":"<p><code>WaldiezAgent</code>.<code>data</code></p>"},{"location":"reference/react/classes/WaldiezAgentAssistant.html#description_1","title":"description","text":"<p>description: <code>string</code></p> <p>Defined in: src/waldiez/models/Agent/Common/Agent.ts:27</p>"},{"location":"reference/react/classes/WaldiezAgentAssistant.html#inherited-from_1","title":"Inherited from","text":"<p><code>WaldiezAgent</code>.<code>description</code></p>"},{"location":"reference/react/classes/WaldiezAgentAssistant.html#id_1","title":"id","text":"<p>id: <code>string</code></p> <p>Defined in: src/waldiez/models/Agent/Common/Agent.ts:23</p>"},{"location":"reference/react/classes/WaldiezAgentAssistant.html#inherited-from_2","title":"Inherited from","text":"<p><code>WaldiezAgent</code>.<code>id</code></p>"},{"location":"reference/react/classes/WaldiezAgentAssistant.html#name_1","title":"name","text":"<p>name: <code>string</code></p> <p>Defined in: src/waldiez/models/Agent/Common/Agent.ts:26</p>"},{"location":"reference/react/classes/WaldiezAgentAssistant.html#inherited-from_3","title":"Inherited from","text":"<p><code>WaldiezAgent</code>.<code>name</code></p>"},{"location":"reference/react/classes/WaldiezAgentAssistant.html#requirements_1","title":"requirements","text":"<p>requirements: <code>string</code>[]</p> <p>Defined in: src/waldiez/models/Agent/Common/Agent.ts:29</p>"},{"location":"reference/react/classes/WaldiezAgentAssistant.html#inherited-from_4","title":"Inherited from","text":"<p><code>WaldiezAgent</code>.<code>requirements</code></p>"},{"location":"reference/react/classes/WaldiezAgentAssistant.html#rest_1","title":"rest?","text":"<p><code>optional</code> rest: <code>object</code></p> <p>Defined in: src/waldiez/models/Agent/Common/Agent.ts:33</p>"},{"location":"reference/react/classes/WaldiezAgentAssistant.html#index-signature","title":"Index Signature","text":"<p>[<code>key</code>: <code>string</code>]: <code>unknown</code></p>"},{"location":"reference/react/classes/WaldiezAgentAssistant.html#inherited-from_5","title":"Inherited from","text":"<p><code>WaldiezAgent</code>.<code>rest</code></p>"},{"location":"reference/react/classes/WaldiezAgentAssistant.html#tags_1","title":"tags","text":"<p>tags: <code>string</code>[]</p> <p>Defined in: src/waldiez/models/Agent/Common/Agent.ts:28</p>"},{"location":"reference/react/classes/WaldiezAgentAssistant.html#inherited-from_6","title":"Inherited from","text":"<p><code>WaldiezAgent</code>.<code>tags</code></p>"},{"location":"reference/react/classes/WaldiezAgentAssistant.html#type","title":"type","text":"<p>type: <code>string</code> = <code>\"agent\"</code></p> <p>Defined in: src/waldiez/models/Agent/Common/Agent.ts:24</p>"},{"location":"reference/react/classes/WaldiezAgentAssistant.html#inherited-from_7","title":"Inherited from","text":"<p><code>WaldiezAgent</code>.<code>type</code></p>"},{"location":"reference/react/classes/WaldiezAgentAssistant.html#updatedat_1","title":"updatedAt","text":"<p>updatedAt: <code>string</code></p> <p>Defined in: src/waldiez/models/Agent/Common/Agent.ts:31</p>"},{"location":"reference/react/classes/WaldiezAgentAssistant.html#inherited-from_8","title":"Inherited from","text":"<p><code>WaldiezAgent</code>.<code>updatedAt</code></p>"},{"location":"reference/react/classes/WaldiezAgentAssistant.html#methods","title":"Methods","text":""},{"location":"reference/react/classes/WaldiezAgentAssistant.html#create","title":"create()","text":"<p><code>static</code> create(<code>agentType</code>): <code>WaldiezAgent</code></p> <p>Defined in: src/waldiez/models/Agent/Common/Agent.ts:59</p>"},{"location":"reference/react/classes/WaldiezAgentAssistant.html#parameters_1","title":"Parameters","text":""},{"location":"reference/react/classes/WaldiezAgentAssistant.html#agenttype_2","title":"agentType","text":"<p><code>WaldiezAgentType</code> | <code>\"swarm_container\"</code></p>"},{"location":"reference/react/classes/WaldiezAgentAssistant.html#returns_1","title":"Returns","text":"<p><code>WaldiezAgent</code></p>"},{"location":"reference/react/classes/WaldiezAgentAssistant.html#inherited-from_9","title":"Inherited from","text":"<p><code>WaldiezAgent</code>.<code>create</code></p>"},{"location":"reference/react/classes/WaldiezAgentAssistantData.html","title":"WaldiezAgentAssistantData","text":"<p>@waldiez/react v0.4.5</p> <p>Defined in: src/waldiez/models/Agent/Assistant/AssistantData.ts:33</p> <p>Waldiez Assistant Agent Data.</p>"},{"location":"reference/react/classes/WaldiezAgentAssistantData.html#param","title":"Param","text":"<p>The human input mode of the agent (\"NEVER\" | \"ALWAYS\" | \"SOMETIMES\")</p>"},{"location":"reference/react/classes/WaldiezAgentAssistantData.html#param_1","title":"Param","text":"<p>The system message of the agent</p>"},{"location":"reference/react/classes/WaldiezAgentAssistantData.html#param_2","title":"Param","text":"<p>The code execution configuration of the agent</p>"},{"location":"reference/react/classes/WaldiezAgentAssistantData.html#param_3","title":"Param","text":"<p>The default auto reply of the agent</p>"},{"location":"reference/react/classes/WaldiezAgentAssistantData.html#param_4","title":"Param","text":"<p>The maximum consecutive auto reply of the agent</p>"},{"location":"reference/react/classes/WaldiezAgentAssistantData.html#param_5","title":"Param","text":"<p>The termination message check of the agent</p>"},{"location":"reference/react/classes/WaldiezAgentAssistantData.html#param_6","title":"Param","text":"<p>The model ids of the agent</p>"},{"location":"reference/react/classes/WaldiezAgentAssistantData.html#param_7","title":"Param","text":"<p>The linked skills of the agent</p>"},{"location":"reference/react/classes/WaldiezAgentAssistantData.html#param_8","title":"Param","text":"<p>The parent id of the agent</p>"},{"location":"reference/react/classes/WaldiezAgentAssistantData.html#param_9","title":"Param","text":"<p>The nested chats of the agent</p>"},{"location":"reference/react/classes/WaldiezAgentAssistantData.html#see","title":"See","text":"<ul> <li>WaldiezAgentData</li> <li>WaldiezAgentLinkedSkill</li> <li>WaldiezAgentNestedChat</li> <li>WaldiezAgentTerminationMessageCheck</li> <li>WaldiezAgentHumanInputMode</li> <li>WaldiezAgentCodeExecutionConfig</li> </ul>"},{"location":"reference/react/classes/WaldiezAgentAssistantData.html#extends","title":"Extends","text":"<ul> <li><code>WaldiezAgentData</code></li> </ul>"},{"location":"reference/react/classes/WaldiezAgentAssistantData.html#constructors","title":"Constructors","text":""},{"location":"reference/react/classes/WaldiezAgentAssistantData.html#constructor","title":"Constructor","text":"<p>new WaldiezAgentAssistantData(<code>props</code>): <code>WaldiezAgentAssistantData</code></p> <p>Defined in: src/waldiez/models/Agent/Assistant/AssistantData.ts:34</p>"},{"location":"reference/react/classes/WaldiezAgentAssistantData.html#parameters","title":"Parameters","text":""},{"location":"reference/react/classes/WaldiezAgentAssistantData.html#props","title":"props","text":""},{"location":"reference/react/classes/WaldiezAgentAssistantData.html#agentdefaultautoreply","title":"agentDefaultAutoReply","text":"<p><code>null</code> | <code>string</code></p>"},{"location":"reference/react/classes/WaldiezAgentAssistantData.html#codeexecutionconfig","title":"codeExecutionConfig","text":"<p><code>WaldiezAgentCodeExecutionConfig</code></p>"},{"location":"reference/react/classes/WaldiezAgentAssistantData.html#humaninputmode","title":"humanInputMode","text":"<p><code>WaldiezAgentHumanInputMode</code></p>"},{"location":"reference/react/classes/WaldiezAgentAssistantData.html#maxconsecutiveautoreply","title":"maxConsecutiveAutoReply","text":"<p><code>null</code> | <code>number</code></p>"},{"location":"reference/react/classes/WaldiezAgentAssistantData.html#modelids","title":"modelIds","text":"<p><code>string</code>[]</p>"},{"location":"reference/react/classes/WaldiezAgentAssistantData.html#nestedchats","title":"nestedChats","text":"<p><code>WaldiezAgentNestedChat</code>[]</p>"},{"location":"reference/react/classes/WaldiezAgentAssistantData.html#parentid","title":"parentId","text":"<p><code>null</code> | <code>string</code></p>"},{"location":"reference/react/classes/WaldiezAgentAssistantData.html#skills","title":"skills","text":"<p><code>WaldiezAgentLinkedSkill</code>[]</p>"},{"location":"reference/react/classes/WaldiezAgentAssistantData.html#systemmessage","title":"systemMessage","text":"<p><code>null</code> | <code>string</code></p>"},{"location":"reference/react/classes/WaldiezAgentAssistantData.html#termination","title":"termination","text":"<p><code>WaldiezAgentTerminationMessageCheck</code></p>"},{"location":"reference/react/classes/WaldiezAgentAssistantData.html#returns","title":"Returns","text":"<p><code>WaldiezAgentAssistantData</code></p>"},{"location":"reference/react/classes/WaldiezAgentAssistantData.html#overrides","title":"Overrides","text":"<p><code>WaldiezAgentData</code>.<code>constructor</code></p>"},{"location":"reference/react/classes/WaldiezAgentAssistantData.html#properties","title":"Properties","text":""},{"location":"reference/react/classes/WaldiezAgentAssistantData.html#agentdefaultautoreply_1","title":"agentDefaultAutoReply","text":"<p>agentDefaultAutoReply: <code>null</code> | <code>string</code></p> <p>Defined in: src/waldiez/models/Agent/Common/AgentData.ts:35</p>"},{"location":"reference/react/classes/WaldiezAgentAssistantData.html#inherited-from","title":"Inherited from","text":"<p><code>WaldiezAgentData</code>.<code>agentDefaultAutoReply</code></p>"},{"location":"reference/react/classes/WaldiezAgentAssistantData.html#codeexecutionconfig_1","title":"codeExecutionConfig","text":"<p>codeExecutionConfig: <code>WaldiezAgentCodeExecutionConfig</code></p> <p>Defined in: src/waldiez/models/Agent/Common/AgentData.ts:34</p>"},{"location":"reference/react/classes/WaldiezAgentAssistantData.html#inherited-from_1","title":"Inherited from","text":"<p><code>WaldiezAgentData</code>.<code>codeExecutionConfig</code></p>"},{"location":"reference/react/classes/WaldiezAgentAssistantData.html#humaninputmode_1","title":"humanInputMode","text":"<p>humanInputMode: <code>WaldiezAgentHumanInputMode</code></p> <p>Defined in: src/waldiez/models/Agent/Common/AgentData.ts:33</p>"},{"location":"reference/react/classes/WaldiezAgentAssistantData.html#inherited-from_2","title":"Inherited from","text":"<p><code>WaldiezAgentData</code>.<code>humanInputMode</code></p>"},{"location":"reference/react/classes/WaldiezAgentAssistantData.html#maxconsecutiveautoreply_1","title":"maxConsecutiveAutoReply","text":"<p>maxConsecutiveAutoReply: <code>null</code> | <code>number</code></p> <p>Defined in: src/waldiez/models/Agent/Common/AgentData.ts:36</p>"},{"location":"reference/react/classes/WaldiezAgentAssistantData.html#inherited-from_3","title":"Inherited from","text":"<p><code>WaldiezAgentData</code>.<code>maxConsecutiveAutoReply</code></p>"},{"location":"reference/react/classes/WaldiezAgentAssistantData.html#modelids_1","title":"modelIds","text":"<p>modelIds: <code>string</code>[]</p> <p>Defined in: src/waldiez/models/Agent/Common/AgentData.ts:39</p>"},{"location":"reference/react/classes/WaldiezAgentAssistantData.html#inherited-from_4","title":"Inherited from","text":"<p><code>WaldiezAgentData</code>.<code>modelIds</code></p>"},{"location":"reference/react/classes/WaldiezAgentAssistantData.html#nestedchats_1","title":"nestedChats","text":"<p>nestedChats: <code>WaldiezAgentNestedChat</code>[]</p> <p>Defined in: src/waldiez/models/Agent/Common/AgentData.ts:42</p>"},{"location":"reference/react/classes/WaldiezAgentAssistantData.html#inherited-from_5","title":"Inherited from","text":"<p><code>WaldiezAgentData</code>.<code>nestedChats</code></p>"},{"location":"reference/react/classes/WaldiezAgentAssistantData.html#parentid_1","title":"parentId","text":"<p>parentId: <code>null</code> | <code>string</code></p> <p>Defined in: src/waldiez/models/Agent/Common/AgentData.ts:41</p>"},{"location":"reference/react/classes/WaldiezAgentAssistantData.html#inherited-from_6","title":"Inherited from","text":"<p><code>WaldiezAgentData</code>.<code>parentId</code></p>"},{"location":"reference/react/classes/WaldiezAgentAssistantData.html#skills_1","title":"skills","text":"<p>skills: <code>WaldiezAgentLinkedSkill</code>[]</p> <p>Defined in: src/waldiez/models/Agent/Common/AgentData.ts:40</p>"},{"location":"reference/react/classes/WaldiezAgentAssistantData.html#inherited-from_7","title":"Inherited from","text":"<p><code>WaldiezAgentData</code>.<code>skills</code></p>"},{"location":"reference/react/classes/WaldiezAgentAssistantData.html#systemmessage_1","title":"systemMessage","text":"<p>systemMessage: <code>null</code> | <code>string</code></p> <p>Defined in: src/waldiez/models/Agent/Common/AgentData.ts:32</p>"},{"location":"reference/react/classes/WaldiezAgentAssistantData.html#inherited-from_8","title":"Inherited from","text":"<p><code>WaldiezAgentData</code>.<code>systemMessage</code></p>"},{"location":"reference/react/classes/WaldiezAgentAssistantData.html#termination_1","title":"termination","text":"<p>termination: <code>WaldiezAgentTerminationMessageCheck</code></p> <p>Defined in: src/waldiez/models/Agent/Common/AgentData.ts:37</p>"},{"location":"reference/react/classes/WaldiezAgentAssistantData.html#inherited-from_9","title":"Inherited from","text":"<p><code>WaldiezAgentData</code>.<code>termination</code></p>"},{"location":"reference/react/classes/WaldiezAgentCaptain.html","title":"WaldiezAgentCaptain","text":"<p>@waldiez/react v0.4.5</p> <p>Defined in: src/waldiez/models/Agent/Captain/CaptainAgent.ts:22</p> <p>WaldiezAgentCaptain</p>"},{"location":"reference/react/classes/WaldiezAgentCaptain.html#param","title":"Param","text":"<p>The id of the captain agent</p>"},{"location":"reference/react/classes/WaldiezAgentCaptain.html#param_1","title":"Param","text":"<p>The type of the node in a graph (agent)</p>"},{"location":"reference/react/classes/WaldiezAgentCaptain.html#param_2","title":"Param","text":"<p>The type of the node in a graph (captain)</p>"},{"location":"reference/react/classes/WaldiezAgentCaptain.html#param_3","title":"Param","text":"<p>The name of the agent</p>"},{"location":"reference/react/classes/WaldiezAgentCaptain.html#param_4","title":"Param","text":"<p>The description of the agent</p>"},{"location":"reference/react/classes/WaldiezAgentCaptain.html#param_5","title":"Param","text":"<p>The tags of the agent</p>"},{"location":"reference/react/classes/WaldiezAgentCaptain.html#param_6","title":"Param","text":"<p>The requirements of the agent</p>"},{"location":"reference/react/classes/WaldiezAgentCaptain.html#param_7","title":"Param","text":"<p>The creation date of the agent</p>"},{"location":"reference/react/classes/WaldiezAgentCaptain.html#param_8","title":"Param","text":"<p>The update date of the agent</p>"},{"location":"reference/react/classes/WaldiezAgentCaptain.html#param_9","title":"Param","text":"<p>The data of the agent. See WaldiezAgentCaptainData</p>"},{"location":"reference/react/classes/WaldiezAgentCaptain.html#param_10","title":"Param","text":"<p>Any other data</p>"},{"location":"reference/react/classes/WaldiezAgentCaptain.html#extends","title":"Extends","text":"<ul> <li><code>WaldiezAgent</code></li> </ul>"},{"location":"reference/react/classes/WaldiezAgentCaptain.html#constructors","title":"Constructors","text":""},{"location":"reference/react/classes/WaldiezAgentCaptain.html#constructor","title":"Constructor","text":"<p>new WaldiezAgentCaptain(<code>props</code>): <code>WaldiezAgentCaptain</code></p> <p>Defined in: src/waldiez/models/Agent/Captain/CaptainAgent.ts:26</p>"},{"location":"reference/react/classes/WaldiezAgentCaptain.html#parameters","title":"Parameters","text":""},{"location":"reference/react/classes/WaldiezAgentCaptain.html#props","title":"props","text":""},{"location":"reference/react/classes/WaldiezAgentCaptain.html#agenttype","title":"agentType","text":"<p><code>WaldiezNodeAgentType</code></p>"},{"location":"reference/react/classes/WaldiezAgentCaptain.html#createdat","title":"createdAt","text":"<p><code>string</code></p>"},{"location":"reference/react/classes/WaldiezAgentCaptain.html#data","title":"data","text":"<p><code>WaldiezAgentCaptainData</code></p>"},{"location":"reference/react/classes/WaldiezAgentCaptain.html#description","title":"description","text":"<p><code>string</code></p>"},{"location":"reference/react/classes/WaldiezAgentCaptain.html#id","title":"id","text":"<p><code>string</code></p>"},{"location":"reference/react/classes/WaldiezAgentCaptain.html#name","title":"name","text":"<p><code>string</code></p>"},{"location":"reference/react/classes/WaldiezAgentCaptain.html#requirements","title":"requirements","text":"<p><code>string</code>[]</p>"},{"location":"reference/react/classes/WaldiezAgentCaptain.html#rest","title":"rest?","text":"<p>{[<code>key</code>: <code>string</code>]: <code>unknown</code>; }</p>"},{"location":"reference/react/classes/WaldiezAgentCaptain.html#tags","title":"tags","text":"<p><code>string</code>[]</p>"},{"location":"reference/react/classes/WaldiezAgentCaptain.html#updatedat","title":"updatedAt","text":"<p><code>string</code></p>"},{"location":"reference/react/classes/WaldiezAgentCaptain.html#returns","title":"Returns","text":"<p><code>WaldiezAgentCaptain</code></p>"},{"location":"reference/react/classes/WaldiezAgentCaptain.html#overrides","title":"Overrides","text":"<p><code>WaldiezAgent</code>.<code>constructor</code></p>"},{"location":"reference/react/classes/WaldiezAgentCaptain.html#properties","title":"Properties","text":""},{"location":"reference/react/classes/WaldiezAgentCaptain.html#agenttype_1","title":"agentType","text":"<p>agentType: <code>WaldiezNodeAgentType</code> = <code>\"captain\"</code></p> <p>Defined in: src/waldiez/models/Agent/Captain/CaptainAgent.ts:24</p>"},{"location":"reference/react/classes/WaldiezAgentCaptain.html#overrides_1","title":"Overrides","text":"<p><code>WaldiezAgent</code>.<code>agentType</code></p>"},{"location":"reference/react/classes/WaldiezAgentCaptain.html#createdat_1","title":"createdAt","text":"<p>createdAt: <code>string</code></p> <p>Defined in: src/waldiez/models/Agent/Common/Agent.ts:30</p>"},{"location":"reference/react/classes/WaldiezAgentCaptain.html#inherited-from","title":"Inherited from","text":"<p><code>WaldiezAgent</code>.<code>createdAt</code></p>"},{"location":"reference/react/classes/WaldiezAgentCaptain.html#data_1","title":"data","text":"<p>data: <code>WaldiezAgentCaptainData</code></p> <p>Defined in: src/waldiez/models/Agent/Captain/CaptainAgent.ts:23</p>"},{"location":"reference/react/classes/WaldiezAgentCaptain.html#overrides_2","title":"Overrides","text":"<p><code>WaldiezAgent</code>.<code>data</code></p>"},{"location":"reference/react/classes/WaldiezAgentCaptain.html#description_1","title":"description","text":"<p>description: <code>string</code></p> <p>Defined in: src/waldiez/models/Agent/Common/Agent.ts:27</p>"},{"location":"reference/react/classes/WaldiezAgentCaptain.html#inherited-from_1","title":"Inherited from","text":"<p><code>WaldiezAgent</code>.<code>description</code></p>"},{"location":"reference/react/classes/WaldiezAgentCaptain.html#id_1","title":"id","text":"<p>id: <code>string</code></p> <p>Defined in: src/waldiez/models/Agent/Common/Agent.ts:23</p>"},{"location":"reference/react/classes/WaldiezAgentCaptain.html#inherited-from_2","title":"Inherited from","text":"<p><code>WaldiezAgent</code>.<code>id</code></p>"},{"location":"reference/react/classes/WaldiezAgentCaptain.html#name_1","title":"name","text":"<p>name: <code>string</code></p> <p>Defined in: src/waldiez/models/Agent/Common/Agent.ts:26</p>"},{"location":"reference/react/classes/WaldiezAgentCaptain.html#inherited-from_3","title":"Inherited from","text":"<p><code>WaldiezAgent</code>.<code>name</code></p>"},{"location":"reference/react/classes/WaldiezAgentCaptain.html#requirements_1","title":"requirements","text":"<p>requirements: <code>string</code>[]</p> <p>Defined in: src/waldiez/models/Agent/Common/Agent.ts:29</p>"},{"location":"reference/react/classes/WaldiezAgentCaptain.html#inherited-from_4","title":"Inherited from","text":"<p><code>WaldiezAgent</code>.<code>requirements</code></p>"},{"location":"reference/react/classes/WaldiezAgentCaptain.html#rest_1","title":"rest?","text":"<p><code>optional</code> rest: <code>object</code></p> <p>Defined in: src/waldiez/models/Agent/Common/Agent.ts:33</p>"},{"location":"reference/react/classes/WaldiezAgentCaptain.html#index-signature","title":"Index Signature","text":"<p>[<code>key</code>: <code>string</code>]: <code>unknown</code></p>"},{"location":"reference/react/classes/WaldiezAgentCaptain.html#inherited-from_5","title":"Inherited from","text":"<p><code>WaldiezAgent</code>.<code>rest</code></p>"},{"location":"reference/react/classes/WaldiezAgentCaptain.html#tags_1","title":"tags","text":"<p>tags: <code>string</code>[]</p> <p>Defined in: src/waldiez/models/Agent/Common/Agent.ts:28</p>"},{"location":"reference/react/classes/WaldiezAgentCaptain.html#inherited-from_6","title":"Inherited from","text":"<p><code>WaldiezAgent</code>.<code>tags</code></p>"},{"location":"reference/react/classes/WaldiezAgentCaptain.html#type","title":"type","text":"<p>type: <code>string</code> = <code>\"agent\"</code></p> <p>Defined in: src/waldiez/models/Agent/Common/Agent.ts:24</p>"},{"location":"reference/react/classes/WaldiezAgentCaptain.html#inherited-from_7","title":"Inherited from","text":"<p><code>WaldiezAgent</code>.<code>type</code></p>"},{"location":"reference/react/classes/WaldiezAgentCaptain.html#updatedat_1","title":"updatedAt","text":"<p>updatedAt: <code>string</code></p> <p>Defined in: src/waldiez/models/Agent/Common/Agent.ts:31</p>"},{"location":"reference/react/classes/WaldiezAgentCaptain.html#inherited-from_8","title":"Inherited from","text":"<p><code>WaldiezAgent</code>.<code>updatedAt</code></p>"},{"location":"reference/react/classes/WaldiezAgentCaptain.html#methods","title":"Methods","text":""},{"location":"reference/react/classes/WaldiezAgentCaptain.html#create","title":"create()","text":"<p><code>static</code> create(<code>agentType</code>): <code>WaldiezAgent</code></p> <p>Defined in: src/waldiez/models/Agent/Common/Agent.ts:59</p>"},{"location":"reference/react/classes/WaldiezAgentCaptain.html#parameters_1","title":"Parameters","text":""},{"location":"reference/react/classes/WaldiezAgentCaptain.html#agenttype_2","title":"agentType","text":"<p><code>WaldiezAgentType</code> | <code>\"swarm_container\"</code></p>"},{"location":"reference/react/classes/WaldiezAgentCaptain.html#returns_1","title":"Returns","text":"<p><code>WaldiezAgent</code></p>"},{"location":"reference/react/classes/WaldiezAgentCaptain.html#inherited-from_9","title":"Inherited from","text":"<p><code>WaldiezAgent</code>.<code>create</code></p>"},{"location":"reference/react/classes/WaldiezAgentCaptainData.html","title":"WaldiezAgentCaptainData","text":"<p>@waldiez/react v0.4.5</p> <p>Defined in: src/waldiez/models/Agent/Captain/CaptainAgentData.ts:15</p> <p>Waldiez Agent data</p>"},{"location":"reference/react/classes/WaldiezAgentCaptainData.html#param","title":"Param","text":"<p>System message</p>"},{"location":"reference/react/classes/WaldiezAgentCaptainData.html#param_1","title":"Param","text":"<p>Human input mode</p>"},{"location":"reference/react/classes/WaldiezAgentCaptainData.html#param_2","title":"Param","text":"<p>Code execution configuration</p>"},{"location":"reference/react/classes/WaldiezAgentCaptainData.html#param_3","title":"Param","text":"<p>Default auto reply</p>"},{"location":"reference/react/classes/WaldiezAgentCaptainData.html#param_4","title":"Param","text":"<p>Maximum consecutive auto reply</p>"},{"location":"reference/react/classes/WaldiezAgentCaptainData.html#param_5","title":"Param","text":"<p>Termination message check</p>"},{"location":"reference/react/classes/WaldiezAgentCaptainData.html#param_6","title":"Param","text":"<p>Model ids</p>"},{"location":"reference/react/classes/WaldiezAgentCaptainData.html#param_7","title":"Param","text":"<p>Linked skills</p>"},{"location":"reference/react/classes/WaldiezAgentCaptainData.html#param_8","title":"Param","text":"<p>Parent id</p>"},{"location":"reference/react/classes/WaldiezAgentCaptainData.html#param_9","title":"Param","text":"<p>Nested chats</p>"},{"location":"reference/react/classes/WaldiezAgentCaptainData.html#see","title":"See","text":"<ul> <li>WaldiezAgentHumanInputMode</li> <li>WaldiezAgentCodeExecutionConfig</li> <li>WaldiezAgentTerminationMessageCheck</li> <li>WaldiezAgentLinkedSkill</li> <li>WaldiezAgentNestedChat</li> </ul>"},{"location":"reference/react/classes/WaldiezAgentCaptainData.html#extends","title":"Extends","text":"<ul> <li><code>WaldiezAgentData</code></li> </ul>"},{"location":"reference/react/classes/WaldiezAgentCaptainData.html#constructors","title":"Constructors","text":""},{"location":"reference/react/classes/WaldiezAgentCaptainData.html#constructor","title":"Constructor","text":"<p>new WaldiezAgentCaptainData(<code>props</code>): <code>WaldiezAgentCaptainData</code></p> <p>Defined in: src/waldiez/models/Agent/Captain/CaptainAgentData.ts:21</p>"},{"location":"reference/react/classes/WaldiezAgentCaptainData.html#parameters","title":"Parameters","text":""},{"location":"reference/react/classes/WaldiezAgentCaptainData.html#props","title":"props","text":""},{"location":"reference/react/classes/WaldiezAgentCaptainData.html#agentdefaultautoreply","title":"agentDefaultAutoReply","text":"<p><code>null</code> | <code>string</code></p>"},{"location":"reference/react/classes/WaldiezAgentCaptainData.html#agentlib","title":"agentLib","text":"<p><code>WaldiezCaptainAgentLibEntry</code>[]</p>"},{"location":"reference/react/classes/WaldiezAgentCaptainData.html#codeexecutionconfig","title":"codeExecutionConfig","text":"<p><code>WaldiezAgentCodeExecutionConfig</code></p>"},{"location":"reference/react/classes/WaldiezAgentCaptainData.html#humaninputmode","title":"humanInputMode","text":"<p><code>WaldiezAgentHumanInputMode</code></p>"},{"location":"reference/react/classes/WaldiezAgentCaptainData.html#maxconsecutiveautoreply","title":"maxConsecutiveAutoReply","text":"<p><code>null</code> | <code>number</code></p>"},{"location":"reference/react/classes/WaldiezAgentCaptainData.html#maxround","title":"maxRound","text":"<p><code>number</code></p>"},{"location":"reference/react/classes/WaldiezAgentCaptainData.html#maxturns","title":"maxTurns","text":"<p><code>number</code></p>"},{"location":"reference/react/classes/WaldiezAgentCaptainData.html#modelids","title":"modelIds","text":"<p><code>string</code>[]</p>"},{"location":"reference/react/classes/WaldiezAgentCaptainData.html#nestedchats","title":"nestedChats","text":"<p><code>WaldiezAgentNestedChat</code>[]</p>"},{"location":"reference/react/classes/WaldiezAgentCaptainData.html#parentid","title":"parentId","text":"<p><code>null</code> | <code>string</code></p>"},{"location":"reference/react/classes/WaldiezAgentCaptainData.html#skills","title":"skills","text":"<p><code>WaldiezAgentLinkedSkill</code>[]</p>"},{"location":"reference/react/classes/WaldiezAgentCaptainData.html#systemmessage","title":"systemMessage","text":"<p><code>null</code> | <code>string</code></p>"},{"location":"reference/react/classes/WaldiezAgentCaptainData.html#termination","title":"termination","text":"<p><code>WaldiezAgentTerminationMessageCheck</code></p>"},{"location":"reference/react/classes/WaldiezAgentCaptainData.html#toollib","title":"toolLib","text":"<p><code>null</code> | <code>\"default\"</code></p>"},{"location":"reference/react/classes/WaldiezAgentCaptainData.html#returns","title":"Returns","text":"<p><code>WaldiezAgentCaptainData</code></p>"},{"location":"reference/react/classes/WaldiezAgentCaptainData.html#overrides","title":"Overrides","text":"<p><code>WaldiezAgentData</code>.<code>constructor</code></p>"},{"location":"reference/react/classes/WaldiezAgentCaptainData.html#properties","title":"Properties","text":""},{"location":"reference/react/classes/WaldiezAgentCaptainData.html#agentdefaultautoreply_1","title":"agentDefaultAutoReply","text":"<p>agentDefaultAutoReply: <code>null</code> | <code>string</code></p> <p>Defined in: src/waldiez/models/Agent/Common/AgentData.ts:35</p>"},{"location":"reference/react/classes/WaldiezAgentCaptainData.html#inherited-from","title":"Inherited from","text":"<p><code>WaldiezAgentData</code>.<code>agentDefaultAutoReply</code></p>"},{"location":"reference/react/classes/WaldiezAgentCaptainData.html#agentlib_1","title":"agentLib","text":"<p>agentLib: <code>WaldiezCaptainAgentLibEntry</code>[]</p> <p>Defined in: src/waldiez/models/Agent/Captain/CaptainAgentData.ts:16</p>"},{"location":"reference/react/classes/WaldiezAgentCaptainData.html#codeexecutionconfig_1","title":"codeExecutionConfig","text":"<p>codeExecutionConfig: <code>WaldiezAgentCodeExecutionConfig</code></p> <p>Defined in: src/waldiez/models/Agent/Common/AgentData.ts:34</p>"},{"location":"reference/react/classes/WaldiezAgentCaptainData.html#inherited-from_1","title":"Inherited from","text":"<p><code>WaldiezAgentData</code>.<code>codeExecutionConfig</code></p>"},{"location":"reference/react/classes/WaldiezAgentCaptainData.html#humaninputmode_1","title":"humanInputMode","text":"<p>humanInputMode: <code>WaldiezAgentHumanInputMode</code></p> <p>Defined in: src/waldiez/models/Agent/Common/AgentData.ts:33</p>"},{"location":"reference/react/classes/WaldiezAgentCaptainData.html#inherited-from_2","title":"Inherited from","text":"<p><code>WaldiezAgentData</code>.<code>humanInputMode</code></p>"},{"location":"reference/react/classes/WaldiezAgentCaptainData.html#maxconsecutiveautoreply_1","title":"maxConsecutiveAutoReply","text":"<p>maxConsecutiveAutoReply: <code>null</code> | <code>number</code></p> <p>Defined in: src/waldiez/models/Agent/Common/AgentData.ts:36</p>"},{"location":"reference/react/classes/WaldiezAgentCaptainData.html#inherited-from_3","title":"Inherited from","text":"<p><code>WaldiezAgentData</code>.<code>maxConsecutiveAutoReply</code></p>"},{"location":"reference/react/classes/WaldiezAgentCaptainData.html#maxround_1","title":"maxRound","text":"<p>maxRound: <code>number</code></p> <p>Defined in: src/waldiez/models/Agent/Captain/CaptainAgentData.ts:18</p>"},{"location":"reference/react/classes/WaldiezAgentCaptainData.html#maxturns_1","title":"maxTurns","text":"<p>maxTurns: <code>number</code></p> <p>Defined in: src/waldiez/models/Agent/Captain/CaptainAgentData.ts:19</p>"},{"location":"reference/react/classes/WaldiezAgentCaptainData.html#modelids_1","title":"modelIds","text":"<p>modelIds: <code>string</code>[]</p> <p>Defined in: src/waldiez/models/Agent/Common/AgentData.ts:39</p>"},{"location":"reference/react/classes/WaldiezAgentCaptainData.html#inherited-from_4","title":"Inherited from","text":"<p><code>WaldiezAgentData</code>.<code>modelIds</code></p>"},{"location":"reference/react/classes/WaldiezAgentCaptainData.html#nestedchats_1","title":"nestedChats","text":"<p>nestedChats: <code>WaldiezAgentNestedChat</code>[]</p> <p>Defined in: src/waldiez/models/Agent/Common/AgentData.ts:42</p>"},{"location":"reference/react/classes/WaldiezAgentCaptainData.html#inherited-from_5","title":"Inherited from","text":"<p><code>WaldiezAgentData</code>.<code>nestedChats</code></p>"},{"location":"reference/react/classes/WaldiezAgentCaptainData.html#parentid_1","title":"parentId","text":"<p>parentId: <code>null</code> | <code>string</code></p> <p>Defined in: src/waldiez/models/Agent/Common/AgentData.ts:41</p>"},{"location":"reference/react/classes/WaldiezAgentCaptainData.html#inherited-from_6","title":"Inherited from","text":"<p><code>WaldiezAgentData</code>.<code>parentId</code></p>"},{"location":"reference/react/classes/WaldiezAgentCaptainData.html#skills_1","title":"skills","text":"<p>skills: <code>WaldiezAgentLinkedSkill</code>[]</p> <p>Defined in: src/waldiez/models/Agent/Common/AgentData.ts:40</p>"},{"location":"reference/react/classes/WaldiezAgentCaptainData.html#inherited-from_7","title":"Inherited from","text":"<p><code>WaldiezAgentData</code>.<code>skills</code></p>"},{"location":"reference/react/classes/WaldiezAgentCaptainData.html#systemmessage_1","title":"systemMessage","text":"<p>systemMessage: <code>null</code> | <code>string</code></p> <p>Defined in: src/waldiez/models/Agent/Common/AgentData.ts:32</p>"},{"location":"reference/react/classes/WaldiezAgentCaptainData.html#inherited-from_8","title":"Inherited from","text":"<p><code>WaldiezAgentData</code>.<code>systemMessage</code></p>"},{"location":"reference/react/classes/WaldiezAgentCaptainData.html#termination_1","title":"termination","text":"<p>termination: <code>WaldiezAgentTerminationMessageCheck</code></p> <p>Defined in: src/waldiez/models/Agent/Common/AgentData.ts:37</p>"},{"location":"reference/react/classes/WaldiezAgentCaptainData.html#inherited-from_9","title":"Inherited from","text":"<p><code>WaldiezAgentData</code>.<code>termination</code></p>"},{"location":"reference/react/classes/WaldiezAgentCaptainData.html#toollib_1","title":"toolLib","text":"<p>toolLib: <code>null</code> | <code>\"default\"</code></p> <p>Defined in: src/waldiez/models/Agent/Captain/CaptainAgentData.ts:17</p>"},{"location":"reference/react/classes/WaldiezAgentData.html","title":"WaldiezAgentData","text":"<p>@waldiez/react v0.4.5</p> <p>Defined in: src/waldiez/models/Agent/Common/AgentData.ts:31</p> <p>Waldiez Agent data</p>"},{"location":"reference/react/classes/WaldiezAgentData.html#param","title":"Param","text":"<p>System message</p>"},{"location":"reference/react/classes/WaldiezAgentData.html#param_1","title":"Param","text":"<p>Human input mode</p>"},{"location":"reference/react/classes/WaldiezAgentData.html#param_2","title":"Param","text":"<p>Code execution configuration</p>"},{"location":"reference/react/classes/WaldiezAgentData.html#param_3","title":"Param","text":"<p>Default auto reply</p>"},{"location":"reference/react/classes/WaldiezAgentData.html#param_4","title":"Param","text":"<p>Maximum consecutive auto reply</p>"},{"location":"reference/react/classes/WaldiezAgentData.html#param_5","title":"Param","text":"<p>Termination message check</p>"},{"location":"reference/react/classes/WaldiezAgentData.html#param_6","title":"Param","text":"<p>Model ids</p>"},{"location":"reference/react/classes/WaldiezAgentData.html#param_7","title":"Param","text":"<p>Linked skills</p>"},{"location":"reference/react/classes/WaldiezAgentData.html#param_8","title":"Param","text":"<p>Parent id</p>"},{"location":"reference/react/classes/WaldiezAgentData.html#param_9","title":"Param","text":"<p>Nested chats</p>"},{"location":"reference/react/classes/WaldiezAgentData.html#see","title":"See","text":"<ul> <li>WaldiezAgentHumanInputMode</li> <li>WaldiezAgentCodeExecutionConfig</li> <li>WaldiezAgentTerminationMessageCheck</li> <li>WaldiezAgentLinkedSkill</li> <li>WaldiezAgentNestedChat</li> </ul>"},{"location":"reference/react/classes/WaldiezAgentData.html#extended-by","title":"Extended by","text":"<ul> <li><code>WaldiezAgentAssistantData</code></li> <li><code>WaldiezAgentCaptainData</code></li> <li><code>WaldiezAgentGroupManagerData</code></li> <li><code>WaldiezAgentRagUserData</code></li> <li><code>WaldiezAgentReasoningData</code></li> <li><code>WaldiezAgentSwarmData</code></li> <li><code>WaldiezAgentSwarmContainerData</code></li> <li><code>WaldiezAgentUserProxyData</code></li> </ul>"},{"location":"reference/react/classes/WaldiezAgentData.html#constructors","title":"Constructors","text":""},{"location":"reference/react/classes/WaldiezAgentData.html#constructor","title":"Constructor","text":"<p>new WaldiezAgentData(<code>props</code>): <code>WaldiezAgentData</code></p> <p>Defined in: src/waldiez/models/Agent/Common/AgentData.ts:43</p>"},{"location":"reference/react/classes/WaldiezAgentData.html#parameters","title":"Parameters","text":""},{"location":"reference/react/classes/WaldiezAgentData.html#props","title":"props","text":""},{"location":"reference/react/classes/WaldiezAgentData.html#agentdefaultautoreply","title":"agentDefaultAutoReply","text":"<p><code>null</code> | <code>string</code></p>"},{"location":"reference/react/classes/WaldiezAgentData.html#codeexecutionconfig","title":"codeExecutionConfig","text":"<p><code>WaldiezAgentCodeExecutionConfig</code></p>"},{"location":"reference/react/classes/WaldiezAgentData.html#humaninputmode","title":"humanInputMode","text":"<p><code>WaldiezAgentHumanInputMode</code></p>"},{"location":"reference/react/classes/WaldiezAgentData.html#maxconsecutiveautoreply","title":"maxConsecutiveAutoReply","text":"<p><code>null</code> | <code>number</code></p>"},{"location":"reference/react/classes/WaldiezAgentData.html#modelids","title":"modelIds","text":"<p><code>string</code>[]</p>"},{"location":"reference/react/classes/WaldiezAgentData.html#nestedchats","title":"nestedChats","text":"<p><code>WaldiezAgentNestedChat</code>[]</p>"},{"location":"reference/react/classes/WaldiezAgentData.html#parentid","title":"parentId","text":"<p><code>null</code> | <code>string</code></p>"},{"location":"reference/react/classes/WaldiezAgentData.html#skills","title":"skills","text":"<p><code>WaldiezAgentLinkedSkill</code>[]</p>"},{"location":"reference/react/classes/WaldiezAgentData.html#systemmessage","title":"systemMessage","text":"<p><code>null</code> | <code>string</code></p>"},{"location":"reference/react/classes/WaldiezAgentData.html#termination","title":"termination","text":"<p><code>WaldiezAgentTerminationMessageCheck</code></p>"},{"location":"reference/react/classes/WaldiezAgentData.html#returns","title":"Returns","text":"<p><code>WaldiezAgentData</code></p>"},{"location":"reference/react/classes/WaldiezAgentData.html#properties","title":"Properties","text":""},{"location":"reference/react/classes/WaldiezAgentData.html#agentdefaultautoreply_1","title":"agentDefaultAutoReply","text":"<p>agentDefaultAutoReply: <code>null</code> | <code>string</code></p> <p>Defined in: src/waldiez/models/Agent/Common/AgentData.ts:35</p>"},{"location":"reference/react/classes/WaldiezAgentData.html#codeexecutionconfig_1","title":"codeExecutionConfig","text":"<p>codeExecutionConfig: <code>WaldiezAgentCodeExecutionConfig</code></p> <p>Defined in: src/waldiez/models/Agent/Common/AgentData.ts:34</p>"},{"location":"reference/react/classes/WaldiezAgentData.html#humaninputmode_1","title":"humanInputMode","text":"<p>humanInputMode: <code>WaldiezAgentHumanInputMode</code></p> <p>Defined in: src/waldiez/models/Agent/Common/AgentData.ts:33</p>"},{"location":"reference/react/classes/WaldiezAgentData.html#maxconsecutiveautoreply_1","title":"maxConsecutiveAutoReply","text":"<p>maxConsecutiveAutoReply: <code>null</code> | <code>number</code></p> <p>Defined in: src/waldiez/models/Agent/Common/AgentData.ts:36</p>"},{"location":"reference/react/classes/WaldiezAgentData.html#modelids_1","title":"modelIds","text":"<p>modelIds: <code>string</code>[]</p> <p>Defined in: src/waldiez/models/Agent/Common/AgentData.ts:39</p>"},{"location":"reference/react/classes/WaldiezAgentData.html#nestedchats_1","title":"nestedChats","text":"<p>nestedChats: <code>WaldiezAgentNestedChat</code>[]</p> <p>Defined in: src/waldiez/models/Agent/Common/AgentData.ts:42</p>"},{"location":"reference/react/classes/WaldiezAgentData.html#parentid_1","title":"parentId","text":"<p>parentId: <code>null</code> | <code>string</code></p> <p>Defined in: src/waldiez/models/Agent/Common/AgentData.ts:41</p>"},{"location":"reference/react/classes/WaldiezAgentData.html#skills_1","title":"skills","text":"<p>skills: <code>WaldiezAgentLinkedSkill</code>[]</p> <p>Defined in: src/waldiez/models/Agent/Common/AgentData.ts:40</p>"},{"location":"reference/react/classes/WaldiezAgentData.html#systemmessage_1","title":"systemMessage","text":"<p>systemMessage: <code>null</code> | <code>string</code></p> <p>Defined in: src/waldiez/models/Agent/Common/AgentData.ts:32</p>"},{"location":"reference/react/classes/WaldiezAgentData.html#termination_1","title":"termination","text":"<p>termination: <code>WaldiezAgentTerminationMessageCheck</code></p> <p>Defined in: src/waldiez/models/Agent/Common/AgentData.ts:37</p>"},{"location":"reference/react/classes/WaldiezAgentGroupManager.html","title":"WaldiezAgentGroupManager","text":"<p>@waldiez/react v0.4.5</p> <p>Defined in: src/waldiez/models/Agent/GroupManager/GroupManager.ts:23</p> <p>Waldiez Agent Group Manager.</p>"},{"location":"reference/react/classes/WaldiezAgentGroupManager.html#param","title":"Param","text":"<p>The id of the agent</p>"},{"location":"reference/react/classes/WaldiezAgentGroupManager.html#param_1","title":"Param","text":"<p>The type of the node in a graph (agent)</p>"},{"location":"reference/react/classes/WaldiezAgentGroupManager.html#param_2","title":"Param","text":"<p>The type of the agent (\"manager\")</p>"},{"location":"reference/react/classes/WaldiezAgentGroupManager.html#param_3","title":"Param","text":"<p>The name of the agent</p>"},{"location":"reference/react/classes/WaldiezAgentGroupManager.html#param_4","title":"Param","text":"<p>The description of the agent</p>"},{"location":"reference/react/classes/WaldiezAgentGroupManager.html#param_5","title":"Param","text":"<p>The tags of the agent</p>"},{"location":"reference/react/classes/WaldiezAgentGroupManager.html#param_6","title":"Param","text":"<p>The requirements of the agent</p>"},{"location":"reference/react/classes/WaldiezAgentGroupManager.html#param_7","title":"Param","text":"<p>The creation date of the agent</p>"},{"location":"reference/react/classes/WaldiezAgentGroupManager.html#param_8","title":"Param","text":"<p>The update date of the agent</p>"},{"location":"reference/react/classes/WaldiezAgentGroupManager.html#param_9","title":"Param","text":"<p>The data of the agent. See WaldiezAgentGroupManagerData</p>"},{"location":"reference/react/classes/WaldiezAgentGroupManager.html#param_10","title":"Param","text":"<p>Any other data</p>"},{"location":"reference/react/classes/WaldiezAgentGroupManager.html#see","title":"See","text":"<p>WaldiezAgent</p>"},{"location":"reference/react/classes/WaldiezAgentGroupManager.html#extends","title":"Extends","text":"<ul> <li><code>WaldiezAgent</code></li> </ul>"},{"location":"reference/react/classes/WaldiezAgentGroupManager.html#constructors","title":"Constructors","text":""},{"location":"reference/react/classes/WaldiezAgentGroupManager.html#constructor","title":"Constructor","text":"<p>new WaldiezAgentGroupManager(<code>props</code>): <code>WaldiezAgentGroupManager</code></p> <p>Defined in: src/waldiez/models/Agent/GroupManager/GroupManager.ts:26</p>"},{"location":"reference/react/classes/WaldiezAgentGroupManager.html#parameters","title":"Parameters","text":""},{"location":"reference/react/classes/WaldiezAgentGroupManager.html#props","title":"props","text":""},{"location":"reference/react/classes/WaldiezAgentGroupManager.html#agenttype","title":"agentType","text":"<p><code>WaldiezNodeAgentType</code></p>"},{"location":"reference/react/classes/WaldiezAgentGroupManager.html#createdat","title":"createdAt","text":"<p><code>string</code></p>"},{"location":"reference/react/classes/WaldiezAgentGroupManager.html#data","title":"data","text":"<p><code>WaldiezAgentGroupManagerData</code></p>"},{"location":"reference/react/classes/WaldiezAgentGroupManager.html#description","title":"description","text":"<p><code>string</code></p>"},{"location":"reference/react/classes/WaldiezAgentGroupManager.html#id","title":"id","text":"<p><code>string</code></p>"},{"location":"reference/react/classes/WaldiezAgentGroupManager.html#name","title":"name","text":"<p><code>string</code></p>"},{"location":"reference/react/classes/WaldiezAgentGroupManager.html#requirements","title":"requirements","text":"<p><code>string</code>[]</p>"},{"location":"reference/react/classes/WaldiezAgentGroupManager.html#rest","title":"rest?","text":"<p>{[<code>key</code>: <code>string</code>]: <code>unknown</code>; }</p>"},{"location":"reference/react/classes/WaldiezAgentGroupManager.html#tags","title":"tags","text":"<p><code>string</code>[]</p>"},{"location":"reference/react/classes/WaldiezAgentGroupManager.html#updatedat","title":"updatedAt","text":"<p><code>string</code></p>"},{"location":"reference/react/classes/WaldiezAgentGroupManager.html#returns","title":"Returns","text":"<p><code>WaldiezAgentGroupManager</code></p>"},{"location":"reference/react/classes/WaldiezAgentGroupManager.html#overrides","title":"Overrides","text":"<p><code>WaldiezAgent</code>.<code>constructor</code></p>"},{"location":"reference/react/classes/WaldiezAgentGroupManager.html#properties","title":"Properties","text":""},{"location":"reference/react/classes/WaldiezAgentGroupManager.html#agenttype_1","title":"agentType","text":"<p>agentType: <code>WaldiezNodeAgentType</code> = <code>\"manager\"</code></p> <p>Defined in: src/waldiez/models/Agent/GroupManager/GroupManager.ts:25</p>"},{"location":"reference/react/classes/WaldiezAgentGroupManager.html#overrides_1","title":"Overrides","text":"<p><code>WaldiezAgent</code>.<code>agentType</code></p>"},{"location":"reference/react/classes/WaldiezAgentGroupManager.html#createdat_1","title":"createdAt","text":"<p>createdAt: <code>string</code></p> <p>Defined in: src/waldiez/models/Agent/Common/Agent.ts:30</p>"},{"location":"reference/react/classes/WaldiezAgentGroupManager.html#inherited-from","title":"Inherited from","text":"<p><code>WaldiezAgent</code>.<code>createdAt</code></p>"},{"location":"reference/react/classes/WaldiezAgentGroupManager.html#data_1","title":"data","text":"<p>data: <code>WaldiezAgentGroupManagerData</code></p> <p>Defined in: src/waldiez/models/Agent/GroupManager/GroupManager.ts:24</p>"},{"location":"reference/react/classes/WaldiezAgentGroupManager.html#overrides_2","title":"Overrides","text":"<p><code>WaldiezAgent</code>.<code>data</code></p>"},{"location":"reference/react/classes/WaldiezAgentGroupManager.html#description_1","title":"description","text":"<p>description: <code>string</code></p> <p>Defined in: src/waldiez/models/Agent/Common/Agent.ts:27</p>"},{"location":"reference/react/classes/WaldiezAgentGroupManager.html#inherited-from_1","title":"Inherited from","text":"<p><code>WaldiezAgent</code>.<code>description</code></p>"},{"location":"reference/react/classes/WaldiezAgentGroupManager.html#id_1","title":"id","text":"<p>id: <code>string</code></p> <p>Defined in: src/waldiez/models/Agent/Common/Agent.ts:23</p>"},{"location":"reference/react/classes/WaldiezAgentGroupManager.html#inherited-from_2","title":"Inherited from","text":"<p><code>WaldiezAgent</code>.<code>id</code></p>"},{"location":"reference/react/classes/WaldiezAgentGroupManager.html#name_1","title":"name","text":"<p>name: <code>string</code></p> <p>Defined in: src/waldiez/models/Agent/Common/Agent.ts:26</p>"},{"location":"reference/react/classes/WaldiezAgentGroupManager.html#inherited-from_3","title":"Inherited from","text":"<p><code>WaldiezAgent</code>.<code>name</code></p>"},{"location":"reference/react/classes/WaldiezAgentGroupManager.html#requirements_1","title":"requirements","text":"<p>requirements: <code>string</code>[]</p> <p>Defined in: src/waldiez/models/Agent/Common/Agent.ts:29</p>"},{"location":"reference/react/classes/WaldiezAgentGroupManager.html#inherited-from_4","title":"Inherited from","text":"<p><code>WaldiezAgent</code>.<code>requirements</code></p>"},{"location":"reference/react/classes/WaldiezAgentGroupManager.html#rest_1","title":"rest?","text":"<p><code>optional</code> rest: <code>object</code></p> <p>Defined in: src/waldiez/models/Agent/Common/Agent.ts:33</p>"},{"location":"reference/react/classes/WaldiezAgentGroupManager.html#index-signature","title":"Index Signature","text":"<p>[<code>key</code>: <code>string</code>]: <code>unknown</code></p>"},{"location":"reference/react/classes/WaldiezAgentGroupManager.html#inherited-from_5","title":"Inherited from","text":"<p><code>WaldiezAgent</code>.<code>rest</code></p>"},{"location":"reference/react/classes/WaldiezAgentGroupManager.html#tags_1","title":"tags","text":"<p>tags: <code>string</code>[]</p> <p>Defined in: src/waldiez/models/Agent/Common/Agent.ts:28</p>"},{"location":"reference/react/classes/WaldiezAgentGroupManager.html#inherited-from_6","title":"Inherited from","text":"<p><code>WaldiezAgent</code>.<code>tags</code></p>"},{"location":"reference/react/classes/WaldiezAgentGroupManager.html#type","title":"type","text":"<p>type: <code>string</code> = <code>\"agent\"</code></p> <p>Defined in: src/waldiez/models/Agent/Common/Agent.ts:24</p>"},{"location":"reference/react/classes/WaldiezAgentGroupManager.html#inherited-from_7","title":"Inherited from","text":"<p><code>WaldiezAgent</code>.<code>type</code></p>"},{"location":"reference/react/classes/WaldiezAgentGroupManager.html#updatedat_1","title":"updatedAt","text":"<p>updatedAt: <code>string</code></p> <p>Defined in: src/waldiez/models/Agent/Common/Agent.ts:31</p>"},{"location":"reference/react/classes/WaldiezAgentGroupManager.html#inherited-from_8","title":"Inherited from","text":"<p><code>WaldiezAgent</code>.<code>updatedAt</code></p>"},{"location":"reference/react/classes/WaldiezAgentGroupManager.html#methods","title":"Methods","text":""},{"location":"reference/react/classes/WaldiezAgentGroupManager.html#create","title":"create()","text":"<p><code>static</code> create(<code>agentType</code>): <code>WaldiezAgent</code></p> <p>Defined in: src/waldiez/models/Agent/Common/Agent.ts:59</p>"},{"location":"reference/react/classes/WaldiezAgentGroupManager.html#parameters_1","title":"Parameters","text":""},{"location":"reference/react/classes/WaldiezAgentGroupManager.html#agenttype_2","title":"agentType","text":"<p><code>WaldiezAgentType</code> | <code>\"swarm_container\"</code></p>"},{"location":"reference/react/classes/WaldiezAgentGroupManager.html#returns_1","title":"Returns","text":"<p><code>WaldiezAgent</code></p>"},{"location":"reference/react/classes/WaldiezAgentGroupManager.html#inherited-from_9","title":"Inherited from","text":"<p><code>WaldiezAgent</code>.<code>create</code></p>"},{"location":"reference/react/classes/WaldiezAgentGroupManagerData.html","title":"WaldiezAgentGroupManagerData","text":"<p>@waldiez/react v0.4.5</p> <p>Defined in: src/waldiez/models/Agent/GroupManager/GroupManagerData.ts:40</p> <p>Waldiez Group Manager Agent Data.</p>"},{"location":"reference/react/classes/WaldiezAgentGroupManagerData.html#param","title":"Param","text":"<p>The human input mode of the agent (\"NEVER\" | \"ALWAYS\" | \"SOMETIMES\")</p>"},{"location":"reference/react/classes/WaldiezAgentGroupManagerData.html#param_1","title":"Param","text":"<p>The system message of the agent</p>"},{"location":"reference/react/classes/WaldiezAgentGroupManagerData.html#param_2","title":"Param","text":"<p>The code execution configuration of the agent</p>"},{"location":"reference/react/classes/WaldiezAgentGroupManagerData.html#param_3","title":"Param","text":"<p>The default auto reply of the agent</p>"},{"location":"reference/react/classes/WaldiezAgentGroupManagerData.html#param_4","title":"Param","text":"<p>The maximum consecutive auto reply of the agent</p>"},{"location":"reference/react/classes/WaldiezAgentGroupManagerData.html#param_5","title":"Param","text":"<p>The termination message check of the agent</p>"},{"location":"reference/react/classes/WaldiezAgentGroupManagerData.html#param_6","title":"Param","text":"<p>The model ids of the agent</p>"},{"location":"reference/react/classes/WaldiezAgentGroupManagerData.html#param_7","title":"Param","text":"<p>The linked skills of the agent</p>"},{"location":"reference/react/classes/WaldiezAgentGroupManagerData.html#param_8","title":"Param","text":"<p>The parent id of the agent</p>"},{"location":"reference/react/classes/WaldiezAgentGroupManagerData.html#param_9","title":"Param","text":"<p>The nested chats of the agent</p>"},{"location":"reference/react/classes/WaldiezAgentGroupManagerData.html#param_10","title":"Param","text":"<p>The maximum round of the agent</p>"},{"location":"reference/react/classes/WaldiezAgentGroupManagerData.html#param_11","title":"Param","text":"<p>The admin name of the agent</p>"},{"location":"reference/react/classes/WaldiezAgentGroupManagerData.html#param_12","title":"Param","text":"<p>The speakers of the agent</p>"},{"location":"reference/react/classes/WaldiezAgentGroupManagerData.html#param_13","title":"Param","text":"<p>The enable clear history of the agent</p>"},{"location":"reference/react/classes/WaldiezAgentGroupManagerData.html#param_14","title":"Param","text":"<p>The send introductions of the agent</p>"},{"location":"reference/react/classes/WaldiezAgentGroupManagerData.html#see","title":"See","text":"<ul> <li>WaldiezAgentData</li> <li>WaldiezAgentLinkedSkill</li> <li>WaldiezAgentNestedChat</li> <li>WaldiezAgentTerminationMessageCheck</li> <li>WaldiezAgentGroupManagerSpeakers</li> <li>WaldiezAgentHumanInputMode</li> <li>WaldiezAgentCodeExecutionConfig</li> </ul>"},{"location":"reference/react/classes/WaldiezAgentGroupManagerData.html#extends","title":"Extends","text":"<ul> <li><code>WaldiezAgentData</code></li> </ul>"},{"location":"reference/react/classes/WaldiezAgentGroupManagerData.html#constructors","title":"Constructors","text":""},{"location":"reference/react/classes/WaldiezAgentGroupManagerData.html#constructor","title":"Constructor","text":"<p>new WaldiezAgentGroupManagerData(<code>props</code>): <code>WaldiezAgentGroupManagerData</code></p> <p>Defined in: src/waldiez/models/Agent/GroupManager/GroupManagerData.ts:47</p>"},{"location":"reference/react/classes/WaldiezAgentGroupManagerData.html#parameters","title":"Parameters","text":""},{"location":"reference/react/classes/WaldiezAgentGroupManagerData.html#props","title":"props","text":""},{"location":"reference/react/classes/WaldiezAgentGroupManagerData.html#adminname","title":"adminName","text":"<p><code>null</code> | <code>string</code></p>"},{"location":"reference/react/classes/WaldiezAgentGroupManagerData.html#agentdefaultautoreply","title":"agentDefaultAutoReply","text":"<p><code>null</code> | <code>string</code></p>"},{"location":"reference/react/classes/WaldiezAgentGroupManagerData.html#codeexecutionconfig","title":"codeExecutionConfig","text":"<p><code>WaldiezAgentCodeExecutionConfig</code></p>"},{"location":"reference/react/classes/WaldiezAgentGroupManagerData.html#enableclearhistory","title":"enableClearHistory?","text":"<p><code>boolean</code></p>"},{"location":"reference/react/classes/WaldiezAgentGroupManagerData.html#humaninputmode","title":"humanInputMode","text":"<p><code>WaldiezAgentHumanInputMode</code></p>"},{"location":"reference/react/classes/WaldiezAgentGroupManagerData.html#maxconsecutiveautoreply","title":"maxConsecutiveAutoReply","text":"<p><code>null</code> | <code>number</code></p>"},{"location":"reference/react/classes/WaldiezAgentGroupManagerData.html#maxround","title":"maxRound","text":"<p><code>null</code> | <code>number</code></p>"},{"location":"reference/react/classes/WaldiezAgentGroupManagerData.html#modelids","title":"modelIds","text":"<p><code>string</code>[]</p>"},{"location":"reference/react/classes/WaldiezAgentGroupManagerData.html#nestedchats","title":"nestedChats","text":"<p><code>WaldiezAgentNestedChat</code>[]</p>"},{"location":"reference/react/classes/WaldiezAgentGroupManagerData.html#parentid","title":"parentId","text":"<p><code>null</code> | <code>string</code></p>"},{"location":"reference/react/classes/WaldiezAgentGroupManagerData.html#sendintroductions","title":"sendIntroductions?","text":"<p><code>boolean</code></p>"},{"location":"reference/react/classes/WaldiezAgentGroupManagerData.html#skills","title":"skills","text":"<p><code>WaldiezAgentLinkedSkill</code>[]</p>"},{"location":"reference/react/classes/WaldiezAgentGroupManagerData.html#speakers","title":"speakers","text":"<p><code>WaldiezAgentGroupManagerSpeakers</code></p>"},{"location":"reference/react/classes/WaldiezAgentGroupManagerData.html#systemmessage","title":"systemMessage","text":"<p><code>null</code> | <code>string</code></p>"},{"location":"reference/react/classes/WaldiezAgentGroupManagerData.html#termination","title":"termination","text":"<p><code>WaldiezAgentTerminationMessageCheck</code></p>"},{"location":"reference/react/classes/WaldiezAgentGroupManagerData.html#returns","title":"Returns","text":"<p><code>WaldiezAgentGroupManagerData</code></p>"},{"location":"reference/react/classes/WaldiezAgentGroupManagerData.html#overrides","title":"Overrides","text":"<p><code>WaldiezAgentData</code>.<code>constructor</code></p>"},{"location":"reference/react/classes/WaldiezAgentGroupManagerData.html#properties","title":"Properties","text":""},{"location":"reference/react/classes/WaldiezAgentGroupManagerData.html#adminname_1","title":"adminName","text":"<p>adminName: <code>null</code> | <code>string</code></p> <p>Defined in: src/waldiez/models/Agent/GroupManager/GroupManagerData.ts:42</p>"},{"location":"reference/react/classes/WaldiezAgentGroupManagerData.html#agentdefaultautoreply_1","title":"agentDefaultAutoReply","text":"<p>agentDefaultAutoReply: <code>null</code> | <code>string</code></p> <p>Defined in: src/waldiez/models/Agent/Common/AgentData.ts:35</p>"},{"location":"reference/react/classes/WaldiezAgentGroupManagerData.html#inherited-from","title":"Inherited from","text":"<p><code>WaldiezAgentData</code>.<code>agentDefaultAutoReply</code></p>"},{"location":"reference/react/classes/WaldiezAgentGroupManagerData.html#codeexecutionconfig_1","title":"codeExecutionConfig","text":"<p>codeExecutionConfig: <code>WaldiezAgentCodeExecutionConfig</code></p> <p>Defined in: src/waldiez/models/Agent/Common/AgentData.ts:34</p>"},{"location":"reference/react/classes/WaldiezAgentGroupManagerData.html#inherited-from_1","title":"Inherited from","text":"<p><code>WaldiezAgentData</code>.<code>codeExecutionConfig</code></p>"},{"location":"reference/react/classes/WaldiezAgentGroupManagerData.html#enableclearhistory_1","title":"enableClearHistory?","text":"<p><code>optional</code> enableClearHistory: <code>boolean</code></p> <p>Defined in: src/waldiez/models/Agent/GroupManager/GroupManagerData.ts:44</p>"},{"location":"reference/react/classes/WaldiezAgentGroupManagerData.html#humaninputmode_1","title":"humanInputMode","text":"<p>humanInputMode: <code>WaldiezAgentHumanInputMode</code></p> <p>Defined in: src/waldiez/models/Agent/Common/AgentData.ts:33</p>"},{"location":"reference/react/classes/WaldiezAgentGroupManagerData.html#inherited-from_2","title":"Inherited from","text":"<p><code>WaldiezAgentData</code>.<code>humanInputMode</code></p>"},{"location":"reference/react/classes/WaldiezAgentGroupManagerData.html#maxconsecutiveautoreply_1","title":"maxConsecutiveAutoReply","text":"<p>maxConsecutiveAutoReply: <code>null</code> | <code>number</code></p> <p>Defined in: src/waldiez/models/Agent/Common/AgentData.ts:36</p>"},{"location":"reference/react/classes/WaldiezAgentGroupManagerData.html#inherited-from_3","title":"Inherited from","text":"<p><code>WaldiezAgentData</code>.<code>maxConsecutiveAutoReply</code></p>"},{"location":"reference/react/classes/WaldiezAgentGroupManagerData.html#maxround_1","title":"maxRound","text":"<p>maxRound: <code>null</code> | <code>number</code></p> <p>Defined in: src/waldiez/models/Agent/GroupManager/GroupManagerData.ts:41</p>"},{"location":"reference/react/classes/WaldiezAgentGroupManagerData.html#modelids_1","title":"modelIds","text":"<p>modelIds: <code>string</code>[]</p> <p>Defined in: src/waldiez/models/Agent/Common/AgentData.ts:39</p>"},{"location":"reference/react/classes/WaldiezAgentGroupManagerData.html#inherited-from_4","title":"Inherited from","text":"<p><code>WaldiezAgentData</code>.<code>modelIds</code></p>"},{"location":"reference/react/classes/WaldiezAgentGroupManagerData.html#nestedchats_1","title":"nestedChats","text":"<p>nestedChats: <code>WaldiezAgentNestedChat</code>[]</p> <p>Defined in: src/waldiez/models/Agent/Common/AgentData.ts:42</p>"},{"location":"reference/react/classes/WaldiezAgentGroupManagerData.html#inherited-from_5","title":"Inherited from","text":"<p><code>WaldiezAgentData</code>.<code>nestedChats</code></p>"},{"location":"reference/react/classes/WaldiezAgentGroupManagerData.html#parentid_1","title":"parentId","text":"<p>parentId: <code>null</code> | <code>string</code></p> <p>Defined in: src/waldiez/models/Agent/Common/AgentData.ts:41</p>"},{"location":"reference/react/classes/WaldiezAgentGroupManagerData.html#inherited-from_6","title":"Inherited from","text":"<p><code>WaldiezAgentData</code>.<code>parentId</code></p>"},{"location":"reference/react/classes/WaldiezAgentGroupManagerData.html#sendintroductions_1","title":"sendIntroductions?","text":"<p><code>optional</code> sendIntroductions: <code>boolean</code></p> <p>Defined in: src/waldiez/models/Agent/GroupManager/GroupManagerData.ts:45</p>"},{"location":"reference/react/classes/WaldiezAgentGroupManagerData.html#skills_1","title":"skills","text":"<p>skills: <code>WaldiezAgentLinkedSkill</code>[]</p> <p>Defined in: src/waldiez/models/Agent/Common/AgentData.ts:40</p>"},{"location":"reference/react/classes/WaldiezAgentGroupManagerData.html#inherited-from_7","title":"Inherited from","text":"<p><code>WaldiezAgentData</code>.<code>skills</code></p>"},{"location":"reference/react/classes/WaldiezAgentGroupManagerData.html#speakers_1","title":"speakers","text":"<p>speakers: <code>WaldiezAgentGroupManagerSpeakers</code></p> <p>Defined in: src/waldiez/models/Agent/GroupManager/GroupManagerData.ts:43</p>"},{"location":"reference/react/classes/WaldiezAgentGroupManagerData.html#systemmessage_1","title":"systemMessage","text":"<p>systemMessage: <code>null</code> | <code>string</code></p> <p>Defined in: src/waldiez/models/Agent/Common/AgentData.ts:32</p>"},{"location":"reference/react/classes/WaldiezAgentGroupManagerData.html#inherited-from_8","title":"Inherited from","text":"<p><code>WaldiezAgentData</code>.<code>systemMessage</code></p>"},{"location":"reference/react/classes/WaldiezAgentGroupManagerData.html#termination_1","title":"termination","text":"<p>termination: <code>WaldiezAgentTerminationMessageCheck</code></p> <p>Defined in: src/waldiez/models/Agent/Common/AgentData.ts:37</p>"},{"location":"reference/react/classes/WaldiezAgentGroupManagerData.html#inherited-from_9","title":"Inherited from","text":"<p><code>WaldiezAgentData</code>.<code>termination</code></p>"},{"location":"reference/react/classes/WaldiezAgentGroupManagerSpeakers.html","title":"WaldiezAgentGroupManagerSpeakers","text":"<p>@waldiez/react v0.4.5</p> <p>Defined in: src/waldiez/models/Agent/GroupManager/GroupSpeakers.ts:11</p>"},{"location":"reference/react/classes/WaldiezAgentGroupManagerSpeakers.html#constructors","title":"Constructors","text":""},{"location":"reference/react/classes/WaldiezAgentGroupManagerSpeakers.html#constructor","title":"Constructor","text":"<p>new WaldiezAgentGroupManagerSpeakers(<code>props</code>): <code>WaldiezAgentGroupManagerSpeakers</code></p> <p>Defined in: src/waldiez/models/Agent/GroupManager/GroupSpeakers.ts:19</p>"},{"location":"reference/react/classes/WaldiezAgentGroupManagerSpeakers.html#parameters","title":"Parameters","text":""},{"location":"reference/react/classes/WaldiezAgentGroupManagerSpeakers.html#props","title":"props","text":""},{"location":"reference/react/classes/WaldiezAgentGroupManagerSpeakers.html#allowedordisallowedtransitions","title":"allowedOrDisallowedTransitions","text":"<p>{[<code>key</code>: <code>string</code>]: <code>string</code>[]; }</p>"},{"location":"reference/react/classes/WaldiezAgentGroupManagerSpeakers.html#allowrepeat","title":"allowRepeat","text":"<p><code>boolean</code> | <code>string</code>[]</p>"},{"location":"reference/react/classes/WaldiezAgentGroupManagerSpeakers.html#maxretriesforselecting","title":"maxRetriesForSelecting","text":"<p><code>null</code> | <code>number</code></p>"},{"location":"reference/react/classes/WaldiezAgentGroupManagerSpeakers.html#selectioncustommethod","title":"selectionCustomMethod","text":"<p><code>string</code></p>"},{"location":"reference/react/classes/WaldiezAgentGroupManagerSpeakers.html#selectionmethod","title":"selectionMethod","text":"<p><code>GroupChatSpeakerSelectionMethodOption</code></p>"},{"location":"reference/react/classes/WaldiezAgentGroupManagerSpeakers.html#selectionmode","title":"selectionMode","text":"<p><code>GroupChatSpeakerSelectionMode</code></p>"},{"location":"reference/react/classes/WaldiezAgentGroupManagerSpeakers.html#transitionstype","title":"transitionsType","text":"<p><code>GroupChatSpeakerTransitionsType</code></p>"},{"location":"reference/react/classes/WaldiezAgentGroupManagerSpeakers.html#returns","title":"Returns","text":"<p><code>WaldiezAgentGroupManagerSpeakers</code></p>"},{"location":"reference/react/classes/WaldiezAgentGroupManagerSpeakers.html#properties","title":"Properties","text":""},{"location":"reference/react/classes/WaldiezAgentGroupManagerSpeakers.html#allowedordisallowedtransitions_1","title":"allowedOrDisallowedTransitions","text":"<p>allowedOrDisallowedTransitions: <code>object</code></p> <p>Defined in: src/waldiez/models/Agent/GroupManager/GroupSpeakers.ts:17</p>"},{"location":"reference/react/classes/WaldiezAgentGroupManagerSpeakers.html#index-signature","title":"Index Signature","text":"<p>[<code>key</code>: <code>string</code>]: <code>string</code>[]</p>"},{"location":"reference/react/classes/WaldiezAgentGroupManagerSpeakers.html#allowrepeat_1","title":"allowRepeat","text":"<p>allowRepeat: <code>boolean</code> | <code>string</code>[]</p> <p>Defined in: src/waldiez/models/Agent/GroupManager/GroupSpeakers.ts:16</p>"},{"location":"reference/react/classes/WaldiezAgentGroupManagerSpeakers.html#maxretriesforselecting_1","title":"maxRetriesForSelecting","text":"<p>maxRetriesForSelecting: <code>null</code> | <code>number</code></p> <p>Defined in: src/waldiez/models/Agent/GroupManager/GroupSpeakers.ts:14</p>"},{"location":"reference/react/classes/WaldiezAgentGroupManagerSpeakers.html#selectioncustommethod_1","title":"selectionCustomMethod","text":"<p>selectionCustomMethod: <code>string</code></p> <p>Defined in: src/waldiez/models/Agent/GroupManager/GroupSpeakers.ts:13</p>"},{"location":"reference/react/classes/WaldiezAgentGroupManagerSpeakers.html#selectionmethod_1","title":"selectionMethod","text":"<p>selectionMethod: <code>GroupChatSpeakerSelectionMethodOption</code></p> <p>Defined in: src/waldiez/models/Agent/GroupManager/GroupSpeakers.ts:12</p>"},{"location":"reference/react/classes/WaldiezAgentGroupManagerSpeakers.html#selectionmode_1","title":"selectionMode","text":"<p>selectionMode: <code>GroupChatSpeakerSelectionMode</code></p> <p>Defined in: src/waldiez/models/Agent/GroupManager/GroupSpeakers.ts:15</p>"},{"location":"reference/react/classes/WaldiezAgentGroupManagerSpeakers.html#transitionstype_1","title":"transitionsType","text":"<p>transitionsType: <code>GroupChatSpeakerTransitionsType</code></p> <p>Defined in: src/waldiez/models/Agent/GroupManager/GroupSpeakers.ts:18</p>"},{"location":"reference/react/classes/WaldiezAgentRagUser.html","title":"WaldiezAgentRagUser","text":"<p>@waldiez/react v0.4.5</p> <p>Defined in: src/waldiez/models/Agent/RagUser/RagUser.ts:22</p> <p>WaldiezAgentRagUser</p>"},{"location":"reference/react/classes/WaldiezAgentRagUser.html#param","title":"Param","text":"<p>The id of the rag user agent</p>"},{"location":"reference/react/classes/WaldiezAgentRagUser.html#param_1","title":"Param","text":"<p>The type of the node in a graph (agent)</p>"},{"location":"reference/react/classes/WaldiezAgentRagUser.html#param_2","title":"Param","text":"<p>The type of the node in a graph (rag_user)</p>"},{"location":"reference/react/classes/WaldiezAgentRagUser.html#param_3","title":"Param","text":"<p>The name of the agent</p>"},{"location":"reference/react/classes/WaldiezAgentRagUser.html#param_4","title":"Param","text":"<p>The description of the agent</p>"},{"location":"reference/react/classes/WaldiezAgentRagUser.html#param_5","title":"Param","text":"<p>The tags of the agent</p>"},{"location":"reference/react/classes/WaldiezAgentRagUser.html#param_6","title":"Param","text":"<p>The requirements of the agent</p>"},{"location":"reference/react/classes/WaldiezAgentRagUser.html#param_7","title":"Param","text":"<p>The creation date of the agent</p>"},{"location":"reference/react/classes/WaldiezAgentRagUser.html#param_8","title":"Param","text":"<p>The update date of the agent</p>"},{"location":"reference/react/classes/WaldiezAgentRagUser.html#param_9","title":"Param","text":"<p>The data of the agent. See WaldiezAgentRagUserData</p>"},{"location":"reference/react/classes/WaldiezAgentRagUser.html#param_10","title":"Param","text":"<p>Any other data</p>"},{"location":"reference/react/classes/WaldiezAgentRagUser.html#extends","title":"Extends","text":"<ul> <li><code>WaldiezAgent</code></li> </ul>"},{"location":"reference/react/classes/WaldiezAgentRagUser.html#constructors","title":"Constructors","text":""},{"location":"reference/react/classes/WaldiezAgentRagUser.html#constructor","title":"Constructor","text":"<p>new WaldiezAgentRagUser(<code>props</code>): <code>WaldiezAgentRagUser</code></p> <p>Defined in: src/waldiez/models/Agent/RagUser/RagUser.ts:26</p>"},{"location":"reference/react/classes/WaldiezAgentRagUser.html#parameters","title":"Parameters","text":""},{"location":"reference/react/classes/WaldiezAgentRagUser.html#props","title":"props","text":""},{"location":"reference/react/classes/WaldiezAgentRagUser.html#agenttype","title":"agentType","text":"<p><code>WaldiezNodeAgentType</code></p>"},{"location":"reference/react/classes/WaldiezAgentRagUser.html#createdat","title":"createdAt","text":"<p><code>string</code></p>"},{"location":"reference/react/classes/WaldiezAgentRagUser.html#data","title":"data","text":"<p><code>WaldiezAgentRagUserData</code></p>"},{"location":"reference/react/classes/WaldiezAgentRagUser.html#description","title":"description","text":"<p><code>string</code></p>"},{"location":"reference/react/classes/WaldiezAgentRagUser.html#id","title":"id","text":"<p><code>string</code></p>"},{"location":"reference/react/classes/WaldiezAgentRagUser.html#name","title":"name","text":"<p><code>string</code></p>"},{"location":"reference/react/classes/WaldiezAgentRagUser.html#requirements","title":"requirements","text":"<p><code>string</code>[]</p>"},{"location":"reference/react/classes/WaldiezAgentRagUser.html#rest","title":"rest?","text":"<p>{[<code>key</code>: <code>string</code>]: <code>unknown</code>; }</p>"},{"location":"reference/react/classes/WaldiezAgentRagUser.html#tags","title":"tags","text":"<p><code>string</code>[]</p>"},{"location":"reference/react/classes/WaldiezAgentRagUser.html#updatedat","title":"updatedAt","text":"<p><code>string</code></p>"},{"location":"reference/react/classes/WaldiezAgentRagUser.html#returns","title":"Returns","text":"<p><code>WaldiezAgentRagUser</code></p>"},{"location":"reference/react/classes/WaldiezAgentRagUser.html#overrides","title":"Overrides","text":"<p><code>WaldiezAgent</code>.<code>constructor</code></p>"},{"location":"reference/react/classes/WaldiezAgentRagUser.html#properties","title":"Properties","text":""},{"location":"reference/react/classes/WaldiezAgentRagUser.html#agenttype_1","title":"agentType","text":"<p>agentType: <code>WaldiezNodeAgentType</code> = <code>\"rag_user\"</code></p> <p>Defined in: src/waldiez/models/Agent/RagUser/RagUser.ts:24</p>"},{"location":"reference/react/classes/WaldiezAgentRagUser.html#overrides_1","title":"Overrides","text":"<p><code>WaldiezAgent</code>.<code>agentType</code></p>"},{"location":"reference/react/classes/WaldiezAgentRagUser.html#createdat_1","title":"createdAt","text":"<p>createdAt: <code>string</code></p> <p>Defined in: src/waldiez/models/Agent/Common/Agent.ts:30</p>"},{"location":"reference/react/classes/WaldiezAgentRagUser.html#inherited-from","title":"Inherited from","text":"<p><code>WaldiezAgent</code>.<code>createdAt</code></p>"},{"location":"reference/react/classes/WaldiezAgentRagUser.html#data_1","title":"data","text":"<p>data: <code>WaldiezAgentRagUserData</code></p> <p>Defined in: src/waldiez/models/Agent/RagUser/RagUser.ts:23</p>"},{"location":"reference/react/classes/WaldiezAgentRagUser.html#overrides_2","title":"Overrides","text":"<p><code>WaldiezAgent</code>.<code>data</code></p>"},{"location":"reference/react/classes/WaldiezAgentRagUser.html#description_1","title":"description","text":"<p>description: <code>string</code></p> <p>Defined in: src/waldiez/models/Agent/Common/Agent.ts:27</p>"},{"location":"reference/react/classes/WaldiezAgentRagUser.html#inherited-from_1","title":"Inherited from","text":"<p><code>WaldiezAgent</code>.<code>description</code></p>"},{"location":"reference/react/classes/WaldiezAgentRagUser.html#id_1","title":"id","text":"<p>id: <code>string</code></p> <p>Defined in: src/waldiez/models/Agent/Common/Agent.ts:23</p>"},{"location":"reference/react/classes/WaldiezAgentRagUser.html#inherited-from_2","title":"Inherited from","text":"<p><code>WaldiezAgent</code>.<code>id</code></p>"},{"location":"reference/react/classes/WaldiezAgentRagUser.html#name_1","title":"name","text":"<p>name: <code>string</code></p> <p>Defined in: src/waldiez/models/Agent/Common/Agent.ts:26</p>"},{"location":"reference/react/classes/WaldiezAgentRagUser.html#inherited-from_3","title":"Inherited from","text":"<p><code>WaldiezAgent</code>.<code>name</code></p>"},{"location":"reference/react/classes/WaldiezAgentRagUser.html#requirements_1","title":"requirements","text":"<p>requirements: <code>string</code>[]</p> <p>Defined in: src/waldiez/models/Agent/Common/Agent.ts:29</p>"},{"location":"reference/react/classes/WaldiezAgentRagUser.html#inherited-from_4","title":"Inherited from","text":"<p><code>WaldiezAgent</code>.<code>requirements</code></p>"},{"location":"reference/react/classes/WaldiezAgentRagUser.html#rest_1","title":"rest?","text":"<p><code>optional</code> rest: <code>object</code></p> <p>Defined in: src/waldiez/models/Agent/Common/Agent.ts:33</p>"},{"location":"reference/react/classes/WaldiezAgentRagUser.html#index-signature","title":"Index Signature","text":"<p>[<code>key</code>: <code>string</code>]: <code>unknown</code></p>"},{"location":"reference/react/classes/WaldiezAgentRagUser.html#inherited-from_5","title":"Inherited from","text":"<p><code>WaldiezAgent</code>.<code>rest</code></p>"},{"location":"reference/react/classes/WaldiezAgentRagUser.html#tags_1","title":"tags","text":"<p>tags: <code>string</code>[]</p> <p>Defined in: src/waldiez/models/Agent/Common/Agent.ts:28</p>"},{"location":"reference/react/classes/WaldiezAgentRagUser.html#inherited-from_6","title":"Inherited from","text":"<p><code>WaldiezAgent</code>.<code>tags</code></p>"},{"location":"reference/react/classes/WaldiezAgentRagUser.html#type","title":"type","text":"<p>type: <code>string</code> = <code>\"agent\"</code></p> <p>Defined in: src/waldiez/models/Agent/Common/Agent.ts:24</p>"},{"location":"reference/react/classes/WaldiezAgentRagUser.html#inherited-from_7","title":"Inherited from","text":"<p><code>WaldiezAgent</code>.<code>type</code></p>"},{"location":"reference/react/classes/WaldiezAgentRagUser.html#updatedat_1","title":"updatedAt","text":"<p>updatedAt: <code>string</code></p> <p>Defined in: src/waldiez/models/Agent/Common/Agent.ts:31</p>"},{"location":"reference/react/classes/WaldiezAgentRagUser.html#inherited-from_8","title":"Inherited from","text":"<p><code>WaldiezAgent</code>.<code>updatedAt</code></p>"},{"location":"reference/react/classes/WaldiezAgentRagUser.html#methods","title":"Methods","text":""},{"location":"reference/react/classes/WaldiezAgentRagUser.html#create","title":"create()","text":"<p><code>static</code> create(<code>agentType</code>): <code>WaldiezAgent</code></p> <p>Defined in: src/waldiez/models/Agent/Common/Agent.ts:59</p>"},{"location":"reference/react/classes/WaldiezAgentRagUser.html#parameters_1","title":"Parameters","text":""},{"location":"reference/react/classes/WaldiezAgentRagUser.html#agenttype_2","title":"agentType","text":"<p><code>WaldiezAgentType</code> | <code>\"swarm_container\"</code></p>"},{"location":"reference/react/classes/WaldiezAgentRagUser.html#returns_1","title":"Returns","text":"<p><code>WaldiezAgent</code></p>"},{"location":"reference/react/classes/WaldiezAgentRagUser.html#inherited-from_9","title":"Inherited from","text":"<p><code>WaldiezAgent</code>.<code>create</code></p>"},{"location":"reference/react/classes/WaldiezAgentRagUserData.html","title":"WaldiezAgentRagUserData","text":"<p>@waldiez/react v0.4.5</p> <p>Defined in: src/waldiez/models/Agent/RagUser/RagUserData.ts:71</p> <p>Waldiez Rag User Agent Data.</p>"},{"location":"reference/react/classes/WaldiezAgentRagUserData.html#param","title":"Param","text":"<p>The human input mode of the agent (\"NEVER\" | \"ALWAYS\" | \"SOMETIMES\")</p>"},{"location":"reference/react/classes/WaldiezAgentRagUserData.html#param_1","title":"Param","text":"<p>The system message of the agent</p>"},{"location":"reference/react/classes/WaldiezAgentRagUserData.html#param_2","title":"Param","text":"<p>The code execution configuration of the agent</p>"},{"location":"reference/react/classes/WaldiezAgentRagUserData.html#param_3","title":"Param","text":"<p>The default auto reply of the agent</p>"},{"location":"reference/react/classes/WaldiezAgentRagUserData.html#param_4","title":"Param","text":"<p>The maximum consecutive auto reply of the agent</p>"},{"location":"reference/react/classes/WaldiezAgentRagUserData.html#param_5","title":"Param","text":"<p>The termination message check of the agent</p>"},{"location":"reference/react/classes/WaldiezAgentRagUserData.html#param_6","title":"Param","text":"<p>The model ids of the agent</p>"},{"location":"reference/react/classes/WaldiezAgentRagUserData.html#param_7","title":"Param","text":"<p>The linked skills of the agent</p>"},{"location":"reference/react/classes/WaldiezAgentRagUserData.html#param_8","title":"Param","text":"<p>The parent id of the agent</p>"},{"location":"reference/react/classes/WaldiezAgentRagUserData.html#param_9","title":"Param","text":"<p>The nested chats of the agent</p>"},{"location":"reference/react/classes/WaldiezAgentRagUserData.html#param_10","title":"Param","text":"<p>The retrieve configuration of the agent</p>"},{"location":"reference/react/classes/WaldiezAgentRagUserData.html#see","title":"See","text":"<ul> <li>WaldiezAgentData</li> <li>WaldiezAgentLinkedSkill</li> <li>WaldiezAgentNestedChat</li> <li>WaldiezAgentTerminationMessageCheck</li> <li>WaldiezRagUserRetrieveConfig</li> <li>defaultRetrieveConfig</li> <li>WaldiezAgentHumanInputMode</li> <li>WaldiezAgentCodeExecutionConfig</li> </ul>"},{"location":"reference/react/classes/WaldiezAgentRagUserData.html#extends","title":"Extends","text":"<ul> <li><code>WaldiezAgentData</code></li> </ul>"},{"location":"reference/react/classes/WaldiezAgentRagUserData.html#constructors","title":"Constructors","text":""},{"location":"reference/react/classes/WaldiezAgentRagUserData.html#constructor","title":"Constructor","text":"<p>new WaldiezAgentRagUserData(<code>props</code>): <code>WaldiezAgentRagUserData</code></p> <p>Defined in: src/waldiez/models/Agent/RagUser/RagUserData.ts:74</p>"},{"location":"reference/react/classes/WaldiezAgentRagUserData.html#parameters","title":"Parameters","text":""},{"location":"reference/react/classes/WaldiezAgentRagUserData.html#props","title":"props","text":""},{"location":"reference/react/classes/WaldiezAgentRagUserData.html#agentdefaultautoreply","title":"agentDefaultAutoReply","text":"<p><code>null</code> | <code>string</code></p>"},{"location":"reference/react/classes/WaldiezAgentRagUserData.html#codeexecutionconfig","title":"codeExecutionConfig","text":"<p><code>WaldiezAgentCodeExecutionConfig</code></p>"},{"location":"reference/react/classes/WaldiezAgentRagUserData.html#humaninputmode","title":"humanInputMode","text":"<p><code>WaldiezAgentHumanInputMode</code></p>"},{"location":"reference/react/classes/WaldiezAgentRagUserData.html#maxconsecutiveautoreply","title":"maxConsecutiveAutoReply","text":"<p><code>null</code> | <code>number</code></p>"},{"location":"reference/react/classes/WaldiezAgentRagUserData.html#modelids","title":"modelIds","text":"<p><code>string</code>[]</p>"},{"location":"reference/react/classes/WaldiezAgentRagUserData.html#nestedchats","title":"nestedChats","text":"<p><code>WaldiezAgentNestedChat</code>[]</p>"},{"location":"reference/react/classes/WaldiezAgentRagUserData.html#parentid","title":"parentId","text":"<p><code>null</code> | <code>string</code></p>"},{"location":"reference/react/classes/WaldiezAgentRagUserData.html#retrieveconfig","title":"retrieveConfig","text":"<p><code>WaldiezRagUserRetrieveConfig</code></p>"},{"location":"reference/react/classes/WaldiezAgentRagUserData.html#skills","title":"skills","text":"<p><code>WaldiezAgentLinkedSkill</code>[]</p>"},{"location":"reference/react/classes/WaldiezAgentRagUserData.html#systemmessage","title":"systemMessage","text":"<p><code>null</code> | <code>string</code></p>"},{"location":"reference/react/classes/WaldiezAgentRagUserData.html#termination","title":"termination","text":"<p><code>WaldiezAgentTerminationMessageCheck</code></p>"},{"location":"reference/react/classes/WaldiezAgentRagUserData.html#returns","title":"Returns","text":"<p><code>WaldiezAgentRagUserData</code></p>"},{"location":"reference/react/classes/WaldiezAgentRagUserData.html#overrides","title":"Overrides","text":"<p><code>WaldiezAgentData</code>.<code>constructor</code></p>"},{"location":"reference/react/classes/WaldiezAgentRagUserData.html#properties","title":"Properties","text":""},{"location":"reference/react/classes/WaldiezAgentRagUserData.html#agentdefaultautoreply_1","title":"agentDefaultAutoReply","text":"<p>agentDefaultAutoReply: <code>null</code> | <code>string</code></p> <p>Defined in: src/waldiez/models/Agent/Common/AgentData.ts:35</p>"},{"location":"reference/react/classes/WaldiezAgentRagUserData.html#inherited-from","title":"Inherited from","text":"<p><code>WaldiezAgentData</code>.<code>agentDefaultAutoReply</code></p>"},{"location":"reference/react/classes/WaldiezAgentRagUserData.html#codeexecutionconfig_1","title":"codeExecutionConfig","text":"<p>codeExecutionConfig: <code>WaldiezAgentCodeExecutionConfig</code></p> <p>Defined in: src/waldiez/models/Agent/Common/AgentData.ts:34</p>"},{"location":"reference/react/classes/WaldiezAgentRagUserData.html#inherited-from_1","title":"Inherited from","text":"<p><code>WaldiezAgentData</code>.<code>codeExecutionConfig</code></p>"},{"location":"reference/react/classes/WaldiezAgentRagUserData.html#humaninputmode_1","title":"humanInputMode","text":"<p>humanInputMode: <code>WaldiezAgentHumanInputMode</code></p> <p>Defined in: src/waldiez/models/Agent/Common/AgentData.ts:33</p>"},{"location":"reference/react/classes/WaldiezAgentRagUserData.html#inherited-from_2","title":"Inherited from","text":"<p><code>WaldiezAgentData</code>.<code>humanInputMode</code></p>"},{"location":"reference/react/classes/WaldiezAgentRagUserData.html#maxconsecutiveautoreply_1","title":"maxConsecutiveAutoReply","text":"<p>maxConsecutiveAutoReply: <code>null</code> | <code>number</code></p> <p>Defined in: src/waldiez/models/Agent/Common/AgentData.ts:36</p>"},{"location":"reference/react/classes/WaldiezAgentRagUserData.html#inherited-from_3","title":"Inherited from","text":"<p><code>WaldiezAgentData</code>.<code>maxConsecutiveAutoReply</code></p>"},{"location":"reference/react/classes/WaldiezAgentRagUserData.html#modelids_1","title":"modelIds","text":"<p>modelIds: <code>string</code>[]</p> <p>Defined in: src/waldiez/models/Agent/Common/AgentData.ts:39</p>"},{"location":"reference/react/classes/WaldiezAgentRagUserData.html#inherited-from_4","title":"Inherited from","text":"<p><code>WaldiezAgentData</code>.<code>modelIds</code></p>"},{"location":"reference/react/classes/WaldiezAgentRagUserData.html#nestedchats_1","title":"nestedChats","text":"<p>nestedChats: <code>WaldiezAgentNestedChat</code>[]</p> <p>Defined in: src/waldiez/models/Agent/Common/AgentData.ts:42</p>"},{"location":"reference/react/classes/WaldiezAgentRagUserData.html#inherited-from_5","title":"Inherited from","text":"<p><code>WaldiezAgentData</code>.<code>nestedChats</code></p>"},{"location":"reference/react/classes/WaldiezAgentRagUserData.html#parentid_1","title":"parentId","text":"<p>parentId: <code>null</code> | <code>string</code></p> <p>Defined in: src/waldiez/models/Agent/Common/AgentData.ts:41</p>"},{"location":"reference/react/classes/WaldiezAgentRagUserData.html#inherited-from_6","title":"Inherited from","text":"<p><code>WaldiezAgentData</code>.<code>parentId</code></p>"},{"location":"reference/react/classes/WaldiezAgentRagUserData.html#retrieveconfig_1","title":"retrieveConfig","text":"<p>retrieveConfig: <code>WaldiezRagUserRetrieveConfig</code></p> <p>Defined in: src/waldiez/models/Agent/RagUser/RagUserData.ts:72</p>"},{"location":"reference/react/classes/WaldiezAgentRagUserData.html#skills_1","title":"skills","text":"<p>skills: <code>WaldiezAgentLinkedSkill</code>[]</p> <p>Defined in: src/waldiez/models/Agent/Common/AgentData.ts:40</p>"},{"location":"reference/react/classes/WaldiezAgentRagUserData.html#inherited-from_7","title":"Inherited from","text":"<p><code>WaldiezAgentData</code>.<code>skills</code></p>"},{"location":"reference/react/classes/WaldiezAgentRagUserData.html#systemmessage_1","title":"systemMessage","text":"<p>systemMessage: <code>null</code> | <code>string</code></p> <p>Defined in: src/waldiez/models/Agent/Common/AgentData.ts:32</p>"},{"location":"reference/react/classes/WaldiezAgentRagUserData.html#inherited-from_8","title":"Inherited from","text":"<p><code>WaldiezAgentData</code>.<code>systemMessage</code></p>"},{"location":"reference/react/classes/WaldiezAgentRagUserData.html#termination_1","title":"termination","text":"<p>termination: <code>WaldiezAgentTerminationMessageCheck</code></p> <p>Defined in: src/waldiez/models/Agent/Common/AgentData.ts:37</p>"},{"location":"reference/react/classes/WaldiezAgentRagUserData.html#inherited-from_9","title":"Inherited from","text":"<p><code>WaldiezAgentData</code>.<code>termination</code></p>"},{"location":"reference/react/classes/WaldiezAgentReasoning.html","title":"WaldiezAgentReasoning","text":"<p>@waldiez/react v0.4.5</p> <p>Defined in: src/waldiez/models/Agent/Reasoning/ReasoningAgent.ts:23</p> <p>WaldiezAgentReasoning</p>"},{"location":"reference/react/classes/WaldiezAgentReasoning.html#param","title":"Param","text":"<p>The id of the reasoning agent</p>"},{"location":"reference/react/classes/WaldiezAgentReasoning.html#param_1","title":"Param","text":"<p>The type of the node in a graph (agent)</p>"},{"location":"reference/react/classes/WaldiezAgentReasoning.html#param_2","title":"Param","text":"<p>The type of the node in a graph (reasoning)</p>"},{"location":"reference/react/classes/WaldiezAgentReasoning.html#param_3","title":"Param","text":"<p>The name of the agent</p>"},{"location":"reference/react/classes/WaldiezAgentReasoning.html#param_4","title":"Param","text":"<p>The description of the agent</p>"},{"location":"reference/react/classes/WaldiezAgentReasoning.html#param_5","title":"Param","text":"<p>The tags of the agent</p>"},{"location":"reference/react/classes/WaldiezAgentReasoning.html#param_6","title":"Param","text":"<p>The requirements of the agent</p>"},{"location":"reference/react/classes/WaldiezAgentReasoning.html#param_7","title":"Param","text":"<p>The creation date of the agent</p>"},{"location":"reference/react/classes/WaldiezAgentReasoning.html#param_8","title":"Param","text":"<p>The update date of the agent</p>"},{"location":"reference/react/classes/WaldiezAgentReasoning.html#param_9","title":"Param","text":"<p>The data of the agent. See WaldiezAgentReasoningData</p>"},{"location":"reference/react/classes/WaldiezAgentReasoning.html#param_10","title":"Param","text":"<p>Any other data</p>"},{"location":"reference/react/classes/WaldiezAgentReasoning.html#extends","title":"Extends","text":"<ul> <li><code>WaldiezAgent</code></li> </ul>"},{"location":"reference/react/classes/WaldiezAgentReasoning.html#constructors","title":"Constructors","text":""},{"location":"reference/react/classes/WaldiezAgentReasoning.html#constructor","title":"Constructor","text":"<p>new WaldiezAgentReasoning(<code>props</code>): <code>WaldiezAgentReasoning</code></p> <p>Defined in: src/waldiez/models/Agent/Reasoning/ReasoningAgent.ts:27</p>"},{"location":"reference/react/classes/WaldiezAgentReasoning.html#parameters","title":"Parameters","text":""},{"location":"reference/react/classes/WaldiezAgentReasoning.html#props","title":"props","text":""},{"location":"reference/react/classes/WaldiezAgentReasoning.html#agenttype","title":"agentType","text":"<p><code>WaldiezNodeAgentType</code></p>"},{"location":"reference/react/classes/WaldiezAgentReasoning.html#createdat","title":"createdAt","text":"<p><code>string</code></p>"},{"location":"reference/react/classes/WaldiezAgentReasoning.html#data","title":"data","text":"<p><code>WaldiezAgentReasoningData</code></p>"},{"location":"reference/react/classes/WaldiezAgentReasoning.html#description","title":"description","text":"<p><code>string</code></p>"},{"location":"reference/react/classes/WaldiezAgentReasoning.html#id","title":"id","text":"<p><code>string</code></p>"},{"location":"reference/react/classes/WaldiezAgentReasoning.html#name","title":"name","text":"<p><code>string</code></p>"},{"location":"reference/react/classes/WaldiezAgentReasoning.html#requirements","title":"requirements","text":"<p><code>string</code>[]</p>"},{"location":"reference/react/classes/WaldiezAgentReasoning.html#rest","title":"rest?","text":"<p>{[<code>key</code>: <code>string</code>]: <code>unknown</code>; }</p>"},{"location":"reference/react/classes/WaldiezAgentReasoning.html#tags","title":"tags","text":"<p><code>string</code>[]</p>"},{"location":"reference/react/classes/WaldiezAgentReasoning.html#updatedat","title":"updatedAt","text":"<p><code>string</code></p>"},{"location":"reference/react/classes/WaldiezAgentReasoning.html#returns","title":"Returns","text":"<p><code>WaldiezAgentReasoning</code></p>"},{"location":"reference/react/classes/WaldiezAgentReasoning.html#overrides","title":"Overrides","text":"<p><code>WaldiezAgent</code>.<code>constructor</code></p>"},{"location":"reference/react/classes/WaldiezAgentReasoning.html#properties","title":"Properties","text":""},{"location":"reference/react/classes/WaldiezAgentReasoning.html#agenttype_1","title":"agentType","text":"<p>agentType: <code>WaldiezNodeAgentType</code> = <code>\"reasoning\"</code></p> <p>Defined in: src/waldiez/models/Agent/Reasoning/ReasoningAgent.ts:25</p>"},{"location":"reference/react/classes/WaldiezAgentReasoning.html#overrides_1","title":"Overrides","text":"<p><code>WaldiezAgent</code>.<code>agentType</code></p>"},{"location":"reference/react/classes/WaldiezAgentReasoning.html#createdat_1","title":"createdAt","text":"<p>createdAt: <code>string</code></p> <p>Defined in: src/waldiez/models/Agent/Common/Agent.ts:30</p>"},{"location":"reference/react/classes/WaldiezAgentReasoning.html#inherited-from","title":"Inherited from","text":"<p><code>WaldiezAgent</code>.<code>createdAt</code></p>"},{"location":"reference/react/classes/WaldiezAgentReasoning.html#data_1","title":"data","text":"<p>data: <code>WaldiezAgentReasoningData</code></p> <p>Defined in: src/waldiez/models/Agent/Reasoning/ReasoningAgent.ts:24</p>"},{"location":"reference/react/classes/WaldiezAgentReasoning.html#overrides_2","title":"Overrides","text":"<p><code>WaldiezAgent</code>.<code>data</code></p>"},{"location":"reference/react/classes/WaldiezAgentReasoning.html#description_1","title":"description","text":"<p>description: <code>string</code></p> <p>Defined in: src/waldiez/models/Agent/Common/Agent.ts:27</p>"},{"location":"reference/react/classes/WaldiezAgentReasoning.html#inherited-from_1","title":"Inherited from","text":"<p><code>WaldiezAgent</code>.<code>description</code></p>"},{"location":"reference/react/classes/WaldiezAgentReasoning.html#id_1","title":"id","text":"<p>id: <code>string</code></p> <p>Defined in: src/waldiez/models/Agent/Common/Agent.ts:23</p>"},{"location":"reference/react/classes/WaldiezAgentReasoning.html#inherited-from_2","title":"Inherited from","text":"<p><code>WaldiezAgent</code>.<code>id</code></p>"},{"location":"reference/react/classes/WaldiezAgentReasoning.html#name_1","title":"name","text":"<p>name: <code>string</code></p> <p>Defined in: src/waldiez/models/Agent/Common/Agent.ts:26</p>"},{"location":"reference/react/classes/WaldiezAgentReasoning.html#inherited-from_3","title":"Inherited from","text":"<p><code>WaldiezAgent</code>.<code>name</code></p>"},{"location":"reference/react/classes/WaldiezAgentReasoning.html#requirements_1","title":"requirements","text":"<p>requirements: <code>string</code>[]</p> <p>Defined in: src/waldiez/models/Agent/Common/Agent.ts:29</p>"},{"location":"reference/react/classes/WaldiezAgentReasoning.html#inherited-from_4","title":"Inherited from","text":"<p><code>WaldiezAgent</code>.<code>requirements</code></p>"},{"location":"reference/react/classes/WaldiezAgentReasoning.html#rest_1","title":"rest?","text":"<p><code>optional</code> rest: <code>object</code></p> <p>Defined in: src/waldiez/models/Agent/Common/Agent.ts:33</p>"},{"location":"reference/react/classes/WaldiezAgentReasoning.html#index-signature","title":"Index Signature","text":"<p>[<code>key</code>: <code>string</code>]: <code>unknown</code></p>"},{"location":"reference/react/classes/WaldiezAgentReasoning.html#inherited-from_5","title":"Inherited from","text":"<p><code>WaldiezAgent</code>.<code>rest</code></p>"},{"location":"reference/react/classes/WaldiezAgentReasoning.html#tags_1","title":"tags","text":"<p>tags: <code>string</code>[]</p> <p>Defined in: src/waldiez/models/Agent/Common/Agent.ts:28</p>"},{"location":"reference/react/classes/WaldiezAgentReasoning.html#inherited-from_6","title":"Inherited from","text":"<p><code>WaldiezAgent</code>.<code>tags</code></p>"},{"location":"reference/react/classes/WaldiezAgentReasoning.html#type","title":"type","text":"<p>type: <code>string</code> = <code>\"agent\"</code></p> <p>Defined in: src/waldiez/models/Agent/Common/Agent.ts:24</p>"},{"location":"reference/react/classes/WaldiezAgentReasoning.html#inherited-from_7","title":"Inherited from","text":"<p><code>WaldiezAgent</code>.<code>type</code></p>"},{"location":"reference/react/classes/WaldiezAgentReasoning.html#updatedat_1","title":"updatedAt","text":"<p>updatedAt: <code>string</code></p> <p>Defined in: src/waldiez/models/Agent/Common/Agent.ts:31</p>"},{"location":"reference/react/classes/WaldiezAgentReasoning.html#inherited-from_8","title":"Inherited from","text":"<p><code>WaldiezAgent</code>.<code>updatedAt</code></p>"},{"location":"reference/react/classes/WaldiezAgentReasoning.html#methods","title":"Methods","text":""},{"location":"reference/react/classes/WaldiezAgentReasoning.html#create","title":"create()","text":"<p><code>static</code> create(<code>agentType</code>): <code>WaldiezAgent</code></p> <p>Defined in: src/waldiez/models/Agent/Common/Agent.ts:59</p>"},{"location":"reference/react/classes/WaldiezAgentReasoning.html#parameters_1","title":"Parameters","text":""},{"location":"reference/react/classes/WaldiezAgentReasoning.html#agenttype_2","title":"agentType","text":"<p><code>WaldiezAgentType</code> | <code>\"swarm_container\"</code></p>"},{"location":"reference/react/classes/WaldiezAgentReasoning.html#returns_1","title":"Returns","text":"<p><code>WaldiezAgent</code></p>"},{"location":"reference/react/classes/WaldiezAgentReasoning.html#inherited-from_9","title":"Inherited from","text":"<p><code>WaldiezAgent</code>.<code>create</code></p>"},{"location":"reference/react/classes/WaldiezAgentReasoningData.html","title":"WaldiezAgentReasoningData","text":"<p>@waldiez/react v0.4.5</p> <p>Defined in: src/waldiez/models/Agent/Reasoning/ReasoningAgentData.ts:26</p> <p>Waldiez Agent data</p>"},{"location":"reference/react/classes/WaldiezAgentReasoningData.html#param","title":"Param","text":"<p>System message</p>"},{"location":"reference/react/classes/WaldiezAgentReasoningData.html#param_1","title":"Param","text":"<p>Human input mode</p>"},{"location":"reference/react/classes/WaldiezAgentReasoningData.html#param_2","title":"Param","text":"<p>Code execution configuration</p>"},{"location":"reference/react/classes/WaldiezAgentReasoningData.html#param_3","title":"Param","text":"<p>Default auto reply</p>"},{"location":"reference/react/classes/WaldiezAgentReasoningData.html#param_4","title":"Param","text":"<p>Maximum consecutive auto reply</p>"},{"location":"reference/react/classes/WaldiezAgentReasoningData.html#param_5","title":"Param","text":"<p>Termination message check</p>"},{"location":"reference/react/classes/WaldiezAgentReasoningData.html#param_6","title":"Param","text":"<p>Model ids</p>"},{"location":"reference/react/classes/WaldiezAgentReasoningData.html#param_7","title":"Param","text":"<p>Linked skills</p>"},{"location":"reference/react/classes/WaldiezAgentReasoningData.html#param_8","title":"Param","text":"<p>Parent id</p>"},{"location":"reference/react/classes/WaldiezAgentReasoningData.html#param_9","title":"Param","text":"<p>Nested chats</p>"},{"location":"reference/react/classes/WaldiezAgentReasoningData.html#see","title":"See","text":"<ul> <li>WaldiezAgentHumanInputMode</li> <li>WaldiezAgentCodeExecutionConfig</li> <li>WaldiezAgentTerminationMessageCheck</li> <li>WaldiezAgentLinkedSkill</li> <li>WaldiezAgentNestedChat</li> </ul>"},{"location":"reference/react/classes/WaldiezAgentReasoningData.html#extends","title":"Extends","text":"<ul> <li><code>WaldiezAgentData</code></li> </ul>"},{"location":"reference/react/classes/WaldiezAgentReasoningData.html#constructors","title":"Constructors","text":""},{"location":"reference/react/classes/WaldiezAgentReasoningData.html#constructor","title":"Constructor","text":"<p>new WaldiezAgentReasoningData(<code>props</code>): <code>WaldiezAgentReasoningData</code></p> <p>Defined in: src/waldiez/models/Agent/Reasoning/ReasoningAgentData.ts:30</p>"},{"location":"reference/react/classes/WaldiezAgentReasoningData.html#parameters","title":"Parameters","text":""},{"location":"reference/react/classes/WaldiezAgentReasoningData.html#props","title":"props","text":""},{"location":"reference/react/classes/WaldiezAgentReasoningData.html#agentdefaultautoreply","title":"agentDefaultAutoReply","text":"<p><code>null</code> | <code>string</code></p>"},{"location":"reference/react/classes/WaldiezAgentReasoningData.html#codeexecutionconfig","title":"codeExecutionConfig","text":"<p><code>WaldiezAgentCodeExecutionConfig</code></p>"},{"location":"reference/react/classes/WaldiezAgentReasoningData.html#humaninputmode","title":"humanInputMode","text":"<p><code>WaldiezAgentHumanInputMode</code></p>"},{"location":"reference/react/classes/WaldiezAgentReasoningData.html#maxconsecutiveautoreply","title":"maxConsecutiveAutoReply","text":"<p><code>null</code> | <code>number</code></p>"},{"location":"reference/react/classes/WaldiezAgentReasoningData.html#modelids","title":"modelIds","text":"<p><code>string</code>[]</p>"},{"location":"reference/react/classes/WaldiezAgentReasoningData.html#nestedchats","title":"nestedChats","text":"<p><code>WaldiezAgentNestedChat</code>[]</p>"},{"location":"reference/react/classes/WaldiezAgentReasoningData.html#parentid","title":"parentId","text":"<p><code>null</code> | <code>string</code></p>"},{"location":"reference/react/classes/WaldiezAgentReasoningData.html#reasonconfig","title":"reasonConfig","text":"<p><code>WaldiezReasoningAgentReasonConfig</code></p>"},{"location":"reference/react/classes/WaldiezAgentReasoningData.html#skills","title":"skills","text":"<p><code>WaldiezAgentLinkedSkill</code>[]</p>"},{"location":"reference/react/classes/WaldiezAgentReasoningData.html#systemmessage","title":"systemMessage","text":"<p><code>null</code> | <code>string</code></p>"},{"location":"reference/react/classes/WaldiezAgentReasoningData.html#termination","title":"termination","text":"<p><code>WaldiezAgentTerminationMessageCheck</code></p>"},{"location":"reference/react/classes/WaldiezAgentReasoningData.html#verbose","title":"verbose","text":"<p><code>boolean</code></p>"},{"location":"reference/react/classes/WaldiezAgentReasoningData.html#returns","title":"Returns","text":"<p><code>WaldiezAgentReasoningData</code></p>"},{"location":"reference/react/classes/WaldiezAgentReasoningData.html#overrides","title":"Overrides","text":"<p><code>WaldiezAgentData</code>.<code>constructor</code></p>"},{"location":"reference/react/classes/WaldiezAgentReasoningData.html#properties","title":"Properties","text":""},{"location":"reference/react/classes/WaldiezAgentReasoningData.html#agentdefaultautoreply_1","title":"agentDefaultAutoReply","text":"<p>agentDefaultAutoReply: <code>null</code> | <code>string</code></p> <p>Defined in: src/waldiez/models/Agent/Common/AgentData.ts:35</p>"},{"location":"reference/react/classes/WaldiezAgentReasoningData.html#inherited-from","title":"Inherited from","text":"<p><code>WaldiezAgentData</code>.<code>agentDefaultAutoReply</code></p>"},{"location":"reference/react/classes/WaldiezAgentReasoningData.html#codeexecutionconfig_1","title":"codeExecutionConfig","text":"<p>codeExecutionConfig: <code>WaldiezAgentCodeExecutionConfig</code></p> <p>Defined in: src/waldiez/models/Agent/Common/AgentData.ts:34</p>"},{"location":"reference/react/classes/WaldiezAgentReasoningData.html#inherited-from_1","title":"Inherited from","text":"<p><code>WaldiezAgentData</code>.<code>codeExecutionConfig</code></p>"},{"location":"reference/react/classes/WaldiezAgentReasoningData.html#humaninputmode_1","title":"humanInputMode","text":"<p>humanInputMode: <code>WaldiezAgentHumanInputMode</code></p> <p>Defined in: src/waldiez/models/Agent/Common/AgentData.ts:33</p>"},{"location":"reference/react/classes/WaldiezAgentReasoningData.html#inherited-from_2","title":"Inherited from","text":"<p><code>WaldiezAgentData</code>.<code>humanInputMode</code></p>"},{"location":"reference/react/classes/WaldiezAgentReasoningData.html#maxconsecutiveautoreply_1","title":"maxConsecutiveAutoReply","text":"<p>maxConsecutiveAutoReply: <code>null</code> | <code>number</code></p> <p>Defined in: src/waldiez/models/Agent/Common/AgentData.ts:36</p>"},{"location":"reference/react/classes/WaldiezAgentReasoningData.html#inherited-from_3","title":"Inherited from","text":"<p><code>WaldiezAgentData</code>.<code>maxConsecutiveAutoReply</code></p>"},{"location":"reference/react/classes/WaldiezAgentReasoningData.html#modelids_1","title":"modelIds","text":"<p>modelIds: <code>string</code>[]</p> <p>Defined in: src/waldiez/models/Agent/Common/AgentData.ts:39</p>"},{"location":"reference/react/classes/WaldiezAgentReasoningData.html#inherited-from_4","title":"Inherited from","text":"<p><code>WaldiezAgentData</code>.<code>modelIds</code></p>"},{"location":"reference/react/classes/WaldiezAgentReasoningData.html#nestedchats_1","title":"nestedChats","text":"<p>nestedChats: <code>WaldiezAgentNestedChat</code>[]</p> <p>Defined in: src/waldiez/models/Agent/Common/AgentData.ts:42</p>"},{"location":"reference/react/classes/WaldiezAgentReasoningData.html#inherited-from_5","title":"Inherited from","text":"<p><code>WaldiezAgentData</code>.<code>nestedChats</code></p>"},{"location":"reference/react/classes/WaldiezAgentReasoningData.html#parentid_1","title":"parentId","text":"<p>parentId: <code>null</code> | <code>string</code></p> <p>Defined in: src/waldiez/models/Agent/Common/AgentData.ts:41</p>"},{"location":"reference/react/classes/WaldiezAgentReasoningData.html#inherited-from_6","title":"Inherited from","text":"<p><code>WaldiezAgentData</code>.<code>parentId</code></p>"},{"location":"reference/react/classes/WaldiezAgentReasoningData.html#reasonconfig_1","title":"reasonConfig","text":"<p>reasonConfig: <code>WaldiezReasoningAgentReasonConfig</code></p> <p>Defined in: src/waldiez/models/Agent/Reasoning/ReasoningAgentData.ts:28</p>"},{"location":"reference/react/classes/WaldiezAgentReasoningData.html#skills_1","title":"skills","text":"<p>skills: <code>WaldiezAgentLinkedSkill</code>[]</p> <p>Defined in: src/waldiez/models/Agent/Common/AgentData.ts:40</p>"},{"location":"reference/react/classes/WaldiezAgentReasoningData.html#inherited-from_7","title":"Inherited from","text":"<p><code>WaldiezAgentData</code>.<code>skills</code></p>"},{"location":"reference/react/classes/WaldiezAgentReasoningData.html#systemmessage_1","title":"systemMessage","text":"<p>systemMessage: <code>null</code> | <code>string</code></p> <p>Defined in: src/waldiez/models/Agent/Common/AgentData.ts:32</p>"},{"location":"reference/react/classes/WaldiezAgentReasoningData.html#inherited-from_8","title":"Inherited from","text":"<p><code>WaldiezAgentData</code>.<code>systemMessage</code></p>"},{"location":"reference/react/classes/WaldiezAgentReasoningData.html#termination_1","title":"termination","text":"<p>termination: <code>WaldiezAgentTerminationMessageCheck</code></p> <p>Defined in: src/waldiez/models/Agent/Common/AgentData.ts:37</p>"},{"location":"reference/react/classes/WaldiezAgentReasoningData.html#inherited-from_9","title":"Inherited from","text":"<p><code>WaldiezAgentData</code>.<code>termination</code></p>"},{"location":"reference/react/classes/WaldiezAgentReasoningData.html#verbose_1","title":"verbose","text":"<p>verbose: <code>boolean</code></p> <p>Defined in: src/waldiez/models/Agent/Reasoning/ReasoningAgentData.ts:27</p>"},{"location":"reference/react/classes/WaldiezAgentSwarm.html","title":"WaldiezAgentSwarm","text":"<p>@waldiez/react v0.4.5</p> <p>Defined in: src/waldiez/models/Agent/Swarm/Swarm.ts:22</p> <p>Swarm agent</p>"},{"location":"reference/react/classes/WaldiezAgentSwarm.html#param","title":"Param","text":"<p>The id of the swarm agent</p>"},{"location":"reference/react/classes/WaldiezAgentSwarm.html#param_1","title":"Param","text":"<p>The type of the node in a graph (agent)</p>"},{"location":"reference/react/classes/WaldiezAgentSwarm.html#param_2","title":"Param","text":"<p>The type of the node in a graph (swarm)</p>"},{"location":"reference/react/classes/WaldiezAgentSwarm.html#param_3","title":"Param","text":"<p>The name of the agent</p>"},{"location":"reference/react/classes/WaldiezAgentSwarm.html#param_4","title":"Param","text":"<p>The description of the agent</p>"},{"location":"reference/react/classes/WaldiezAgentSwarm.html#param_5","title":"Param","text":"<p>The tags of the agent</p>"},{"location":"reference/react/classes/WaldiezAgentSwarm.html#param_6","title":"Param","text":"<p>The requirements of the agent</p>"},{"location":"reference/react/classes/WaldiezAgentSwarm.html#param_7","title":"Param","text":"<p>The creation date of the agent</p>"},{"location":"reference/react/classes/WaldiezAgentSwarm.html#param_8","title":"Param","text":"<p>The update date of the agent</p>"},{"location":"reference/react/classes/WaldiezAgentSwarm.html#param_9","title":"Param","text":"<p>The data of the agent. See WaldiezAgentSwarmData</p>"},{"location":"reference/react/classes/WaldiezAgentSwarm.html#param_10","title":"Param","text":"<p>Any other data</p>"},{"location":"reference/react/classes/WaldiezAgentSwarm.html#extends","title":"Extends","text":"<ul> <li><code>WaldiezAgent</code></li> </ul>"},{"location":"reference/react/classes/WaldiezAgentSwarm.html#constructors","title":"Constructors","text":""},{"location":"reference/react/classes/WaldiezAgentSwarm.html#constructor","title":"Constructor","text":"<p>new WaldiezAgentSwarm(<code>props</code>): <code>WaldiezAgentSwarm</code></p> <p>Defined in: src/waldiez/models/Agent/Swarm/Swarm.ts:26</p>"},{"location":"reference/react/classes/WaldiezAgentSwarm.html#parameters","title":"Parameters","text":""},{"location":"reference/react/classes/WaldiezAgentSwarm.html#props","title":"props","text":""},{"location":"reference/react/classes/WaldiezAgentSwarm.html#agenttype","title":"agentType","text":"<p><code>WaldiezNodeAgentType</code></p>"},{"location":"reference/react/classes/WaldiezAgentSwarm.html#createdat","title":"createdAt","text":"<p><code>string</code></p>"},{"location":"reference/react/classes/WaldiezAgentSwarm.html#data","title":"data","text":"<p><code>WaldiezAgentSwarmData</code></p>"},{"location":"reference/react/classes/WaldiezAgentSwarm.html#description","title":"description","text":"<p><code>string</code></p>"},{"location":"reference/react/classes/WaldiezAgentSwarm.html#id","title":"id","text":"<p><code>string</code></p>"},{"location":"reference/react/classes/WaldiezAgentSwarm.html#name","title":"name","text":"<p><code>string</code></p>"},{"location":"reference/react/classes/WaldiezAgentSwarm.html#requirements","title":"requirements","text":"<p><code>string</code>[]</p>"},{"location":"reference/react/classes/WaldiezAgentSwarm.html#rest","title":"rest?","text":"<p>{[<code>key</code>: <code>string</code>]: <code>unknown</code>; }</p>"},{"location":"reference/react/classes/WaldiezAgentSwarm.html#tags","title":"tags","text":"<p><code>string</code>[]</p>"},{"location":"reference/react/classes/WaldiezAgentSwarm.html#updatedat","title":"updatedAt","text":"<p><code>string</code></p>"},{"location":"reference/react/classes/WaldiezAgentSwarm.html#returns","title":"Returns","text":"<p><code>WaldiezAgentSwarm</code></p>"},{"location":"reference/react/classes/WaldiezAgentSwarm.html#overrides","title":"Overrides","text":"<p><code>WaldiezAgent</code>.<code>constructor</code></p>"},{"location":"reference/react/classes/WaldiezAgentSwarm.html#properties","title":"Properties","text":""},{"location":"reference/react/classes/WaldiezAgentSwarm.html#agenttype_1","title":"agentType","text":"<p>agentType: <code>WaldiezNodeAgentType</code> = <code>\"swarm\"</code></p> <p>Defined in: src/waldiez/models/Agent/Swarm/Swarm.ts:24</p>"},{"location":"reference/react/classes/WaldiezAgentSwarm.html#overrides_1","title":"Overrides","text":"<p><code>WaldiezAgent</code>.<code>agentType</code></p>"},{"location":"reference/react/classes/WaldiezAgentSwarm.html#createdat_1","title":"createdAt","text":"<p>createdAt: <code>string</code></p> <p>Defined in: src/waldiez/models/Agent/Common/Agent.ts:30</p>"},{"location":"reference/react/classes/WaldiezAgentSwarm.html#inherited-from","title":"Inherited from","text":"<p><code>WaldiezAgent</code>.<code>createdAt</code></p>"},{"location":"reference/react/classes/WaldiezAgentSwarm.html#data_1","title":"data","text":"<p>data: <code>WaldiezAgentSwarmData</code></p> <p>Defined in: src/waldiez/models/Agent/Swarm/Swarm.ts:23</p>"},{"location":"reference/react/classes/WaldiezAgentSwarm.html#overrides_2","title":"Overrides","text":"<p><code>WaldiezAgent</code>.<code>data</code></p>"},{"location":"reference/react/classes/WaldiezAgentSwarm.html#description_1","title":"description","text":"<p>description: <code>string</code></p> <p>Defined in: src/waldiez/models/Agent/Common/Agent.ts:27</p>"},{"location":"reference/react/classes/WaldiezAgentSwarm.html#inherited-from_1","title":"Inherited from","text":"<p><code>WaldiezAgent</code>.<code>description</code></p>"},{"location":"reference/react/classes/WaldiezAgentSwarm.html#id_1","title":"id","text":"<p>id: <code>string</code></p> <p>Defined in: src/waldiez/models/Agent/Common/Agent.ts:23</p>"},{"location":"reference/react/classes/WaldiezAgentSwarm.html#inherited-from_2","title":"Inherited from","text":"<p><code>WaldiezAgent</code>.<code>id</code></p>"},{"location":"reference/react/classes/WaldiezAgentSwarm.html#name_1","title":"name","text":"<p>name: <code>string</code></p> <p>Defined in: src/waldiez/models/Agent/Common/Agent.ts:26</p>"},{"location":"reference/react/classes/WaldiezAgentSwarm.html#inherited-from_3","title":"Inherited from","text":"<p><code>WaldiezAgent</code>.<code>name</code></p>"},{"location":"reference/react/classes/WaldiezAgentSwarm.html#requirements_1","title":"requirements","text":"<p>requirements: <code>string</code>[]</p> <p>Defined in: src/waldiez/models/Agent/Common/Agent.ts:29</p>"},{"location":"reference/react/classes/WaldiezAgentSwarm.html#inherited-from_4","title":"Inherited from","text":"<p><code>WaldiezAgent</code>.<code>requirements</code></p>"},{"location":"reference/react/classes/WaldiezAgentSwarm.html#rest_1","title":"rest?","text":"<p><code>optional</code> rest: <code>object</code></p> <p>Defined in: src/waldiez/models/Agent/Common/Agent.ts:33</p>"},{"location":"reference/react/classes/WaldiezAgentSwarm.html#index-signature","title":"Index Signature","text":"<p>[<code>key</code>: <code>string</code>]: <code>unknown</code></p>"},{"location":"reference/react/classes/WaldiezAgentSwarm.html#inherited-from_5","title":"Inherited from","text":"<p><code>WaldiezAgent</code>.<code>rest</code></p>"},{"location":"reference/react/classes/WaldiezAgentSwarm.html#tags_1","title":"tags","text":"<p>tags: <code>string</code>[]</p> <p>Defined in: src/waldiez/models/Agent/Common/Agent.ts:28</p>"},{"location":"reference/react/classes/WaldiezAgentSwarm.html#inherited-from_6","title":"Inherited from","text":"<p><code>WaldiezAgent</code>.<code>tags</code></p>"},{"location":"reference/react/classes/WaldiezAgentSwarm.html#type","title":"type","text":"<p>type: <code>string</code> = <code>\"agent\"</code></p> <p>Defined in: src/waldiez/models/Agent/Common/Agent.ts:24</p>"},{"location":"reference/react/classes/WaldiezAgentSwarm.html#inherited-from_7","title":"Inherited from","text":"<p><code>WaldiezAgent</code>.<code>type</code></p>"},{"location":"reference/react/classes/WaldiezAgentSwarm.html#updatedat_1","title":"updatedAt","text":"<p>updatedAt: <code>string</code></p> <p>Defined in: src/waldiez/models/Agent/Common/Agent.ts:31</p>"},{"location":"reference/react/classes/WaldiezAgentSwarm.html#inherited-from_8","title":"Inherited from","text":"<p><code>WaldiezAgent</code>.<code>updatedAt</code></p>"},{"location":"reference/react/classes/WaldiezAgentSwarm.html#methods","title":"Methods","text":""},{"location":"reference/react/classes/WaldiezAgentSwarm.html#create","title":"create()","text":"<p><code>static</code> create(<code>agentType</code>): <code>WaldiezAgent</code></p> <p>Defined in: src/waldiez/models/Agent/Common/Agent.ts:59</p>"},{"location":"reference/react/classes/WaldiezAgentSwarm.html#parameters_1","title":"Parameters","text":""},{"location":"reference/react/classes/WaldiezAgentSwarm.html#agenttype_2","title":"agentType","text":"<p><code>WaldiezAgentType</code> | <code>\"swarm_container\"</code></p>"},{"location":"reference/react/classes/WaldiezAgentSwarm.html#returns_1","title":"Returns","text":"<p><code>WaldiezAgent</code></p>"},{"location":"reference/react/classes/WaldiezAgentSwarm.html#inherited-from_9","title":"Inherited from","text":"<p><code>WaldiezAgent</code>.<code>create</code></p>"},{"location":"reference/react/classes/WaldiezAgentSwarmContainer.html","title":"WaldiezAgentSwarmContainer","text":"<p>@waldiez/react v0.4.5</p> <p>Defined in: src/waldiez/models/Agent/Swarm/SwarmContainer.ts:22</p> <p>Swarm agent</p>"},{"location":"reference/react/classes/WaldiezAgentSwarmContainer.html#param","title":"Param","text":"<p>The id of the swarm agent</p>"},{"location":"reference/react/classes/WaldiezAgentSwarmContainer.html#param_1","title":"Param","text":"<p>The type of the node in a graph (agent)</p>"},{"location":"reference/react/classes/WaldiezAgentSwarmContainer.html#param_2","title":"Param","text":"<p>The type of the node in a graph (swarm)</p>"},{"location":"reference/react/classes/WaldiezAgentSwarmContainer.html#param_3","title":"Param","text":"<p>The name of the agent</p>"},{"location":"reference/react/classes/WaldiezAgentSwarmContainer.html#param_4","title":"Param","text":"<p>The description of the agent</p>"},{"location":"reference/react/classes/WaldiezAgentSwarmContainer.html#param_5","title":"Param","text":"<p>The tags of the agent</p>"},{"location":"reference/react/classes/WaldiezAgentSwarmContainer.html#param_6","title":"Param","text":"<p>The requirements of the agent</p>"},{"location":"reference/react/classes/WaldiezAgentSwarmContainer.html#param_7","title":"Param","text":"<p>The creation date of the agent</p>"},{"location":"reference/react/classes/WaldiezAgentSwarmContainer.html#param_8","title":"Param","text":"<p>The update date of the agent</p>"},{"location":"reference/react/classes/WaldiezAgentSwarmContainer.html#param_9","title":"Param","text":"<p>The data of the agent. See WaldiezAgentSwarmContainerData</p>"},{"location":"reference/react/classes/WaldiezAgentSwarmContainer.html#param_10","title":"Param","text":"<p>Any other data</p>"},{"location":"reference/react/classes/WaldiezAgentSwarmContainer.html#extends","title":"Extends","text":"<ul> <li><code>WaldiezAgent</code></li> </ul>"},{"location":"reference/react/classes/WaldiezAgentSwarmContainer.html#constructors","title":"Constructors","text":""},{"location":"reference/react/classes/WaldiezAgentSwarmContainer.html#constructor","title":"Constructor","text":"<p>new WaldiezAgentSwarmContainer(<code>props</code>): <code>WaldiezAgentSwarmContainer</code></p> <p>Defined in: src/waldiez/models/Agent/Swarm/SwarmContainer.ts:26</p>"},{"location":"reference/react/classes/WaldiezAgentSwarmContainer.html#parameters","title":"Parameters","text":""},{"location":"reference/react/classes/WaldiezAgentSwarmContainer.html#props","title":"props","text":""},{"location":"reference/react/classes/WaldiezAgentSwarmContainer.html#agenttype","title":"agentType","text":"<p><code>WaldiezNodeAgentType</code></p>"},{"location":"reference/react/classes/WaldiezAgentSwarmContainer.html#createdat","title":"createdAt","text":"<p><code>string</code></p>"},{"location":"reference/react/classes/WaldiezAgentSwarmContainer.html#data","title":"data","text":"<p><code>WaldiezAgentSwarmContainerData</code></p>"},{"location":"reference/react/classes/WaldiezAgentSwarmContainer.html#description","title":"description","text":"<p><code>string</code></p>"},{"location":"reference/react/classes/WaldiezAgentSwarmContainer.html#id","title":"id","text":"<p><code>string</code></p>"},{"location":"reference/react/classes/WaldiezAgentSwarmContainer.html#name","title":"name","text":"<p><code>string</code></p>"},{"location":"reference/react/classes/WaldiezAgentSwarmContainer.html#requirements","title":"requirements","text":"<p><code>string</code>[]</p>"},{"location":"reference/react/classes/WaldiezAgentSwarmContainer.html#rest","title":"rest?","text":"<p>{[<code>key</code>: <code>string</code>]: <code>unknown</code>; }</p>"},{"location":"reference/react/classes/WaldiezAgentSwarmContainer.html#tags","title":"tags","text":"<p><code>string</code>[]</p>"},{"location":"reference/react/classes/WaldiezAgentSwarmContainer.html#updatedat","title":"updatedAt","text":"<p><code>string</code></p>"},{"location":"reference/react/classes/WaldiezAgentSwarmContainer.html#returns","title":"Returns","text":"<p><code>WaldiezAgentSwarmContainer</code></p>"},{"location":"reference/react/classes/WaldiezAgentSwarmContainer.html#overrides","title":"Overrides","text":"<p><code>WaldiezAgent</code>.<code>constructor</code></p>"},{"location":"reference/react/classes/WaldiezAgentSwarmContainer.html#properties","title":"Properties","text":""},{"location":"reference/react/classes/WaldiezAgentSwarmContainer.html#agenttype_1","title":"agentType","text":"<p>agentType: <code>WaldiezNodeAgentType</code> = <code>\"swarm_container\"</code></p> <p>Defined in: src/waldiez/models/Agent/Swarm/SwarmContainer.ts:24</p>"},{"location":"reference/react/classes/WaldiezAgentSwarmContainer.html#overrides_1","title":"Overrides","text":"<p><code>WaldiezAgent</code>.<code>agentType</code></p>"},{"location":"reference/react/classes/WaldiezAgentSwarmContainer.html#createdat_1","title":"createdAt","text":"<p>createdAt: <code>string</code></p> <p>Defined in: src/waldiez/models/Agent/Common/Agent.ts:30</p>"},{"location":"reference/react/classes/WaldiezAgentSwarmContainer.html#inherited-from","title":"Inherited from","text":"<p><code>WaldiezAgent</code>.<code>createdAt</code></p>"},{"location":"reference/react/classes/WaldiezAgentSwarmContainer.html#data_1","title":"data","text":"<p>data: <code>WaldiezAgentSwarmContainerData</code></p> <p>Defined in: src/waldiez/models/Agent/Swarm/SwarmContainer.ts:23</p>"},{"location":"reference/react/classes/WaldiezAgentSwarmContainer.html#overrides_2","title":"Overrides","text":"<p><code>WaldiezAgent</code>.<code>data</code></p>"},{"location":"reference/react/classes/WaldiezAgentSwarmContainer.html#description_1","title":"description","text":"<p>description: <code>string</code></p> <p>Defined in: src/waldiez/models/Agent/Common/Agent.ts:27</p>"},{"location":"reference/react/classes/WaldiezAgentSwarmContainer.html#inherited-from_1","title":"Inherited from","text":"<p><code>WaldiezAgent</code>.<code>description</code></p>"},{"location":"reference/react/classes/WaldiezAgentSwarmContainer.html#id_1","title":"id","text":"<p>id: <code>string</code></p> <p>Defined in: src/waldiez/models/Agent/Common/Agent.ts:23</p>"},{"location":"reference/react/classes/WaldiezAgentSwarmContainer.html#inherited-from_2","title":"Inherited from","text":"<p><code>WaldiezAgent</code>.<code>id</code></p>"},{"location":"reference/react/classes/WaldiezAgentSwarmContainer.html#name_1","title":"name","text":"<p>name: <code>string</code></p> <p>Defined in: src/waldiez/models/Agent/Common/Agent.ts:26</p>"},{"location":"reference/react/classes/WaldiezAgentSwarmContainer.html#inherited-from_3","title":"Inherited from","text":"<p><code>WaldiezAgent</code>.<code>name</code></p>"},{"location":"reference/react/classes/WaldiezAgentSwarmContainer.html#requirements_1","title":"requirements","text":"<p>requirements: <code>string</code>[]</p> <p>Defined in: src/waldiez/models/Agent/Common/Agent.ts:29</p>"},{"location":"reference/react/classes/WaldiezAgentSwarmContainer.html#inherited-from_4","title":"Inherited from","text":"<p><code>WaldiezAgent</code>.<code>requirements</code></p>"},{"location":"reference/react/classes/WaldiezAgentSwarmContainer.html#rest_1","title":"rest?","text":"<p><code>optional</code> rest: <code>object</code></p> <p>Defined in: src/waldiez/models/Agent/Common/Agent.ts:33</p>"},{"location":"reference/react/classes/WaldiezAgentSwarmContainer.html#index-signature","title":"Index Signature","text":"<p>[<code>key</code>: <code>string</code>]: <code>unknown</code></p>"},{"location":"reference/react/classes/WaldiezAgentSwarmContainer.html#inherited-from_5","title":"Inherited from","text":"<p><code>WaldiezAgent</code>.<code>rest</code></p>"},{"location":"reference/react/classes/WaldiezAgentSwarmContainer.html#tags_1","title":"tags","text":"<p>tags: <code>string</code>[]</p> <p>Defined in: src/waldiez/models/Agent/Common/Agent.ts:28</p>"},{"location":"reference/react/classes/WaldiezAgentSwarmContainer.html#inherited-from_6","title":"Inherited from","text":"<p><code>WaldiezAgent</code>.<code>tags</code></p>"},{"location":"reference/react/classes/WaldiezAgentSwarmContainer.html#type","title":"type","text":"<p>type: <code>string</code> = <code>\"agent\"</code></p> <p>Defined in: src/waldiez/models/Agent/Common/Agent.ts:24</p>"},{"location":"reference/react/classes/WaldiezAgentSwarmContainer.html#inherited-from_7","title":"Inherited from","text":"<p><code>WaldiezAgent</code>.<code>type</code></p>"},{"location":"reference/react/classes/WaldiezAgentSwarmContainer.html#updatedat_1","title":"updatedAt","text":"<p>updatedAt: <code>string</code></p> <p>Defined in: src/waldiez/models/Agent/Common/Agent.ts:31</p>"},{"location":"reference/react/classes/WaldiezAgentSwarmContainer.html#inherited-from_8","title":"Inherited from","text":"<p><code>WaldiezAgent</code>.<code>updatedAt</code></p>"},{"location":"reference/react/classes/WaldiezAgentSwarmContainer.html#methods","title":"Methods","text":""},{"location":"reference/react/classes/WaldiezAgentSwarmContainer.html#create","title":"create()","text":"<p><code>static</code> create(<code>agentType</code>): <code>WaldiezAgent</code></p> <p>Defined in: src/waldiez/models/Agent/Common/Agent.ts:59</p>"},{"location":"reference/react/classes/WaldiezAgentSwarmContainer.html#parameters_1","title":"Parameters","text":""},{"location":"reference/react/classes/WaldiezAgentSwarmContainer.html#agenttype_2","title":"agentType","text":"<p><code>WaldiezAgentType</code> | <code>\"swarm_container\"</code></p>"},{"location":"reference/react/classes/WaldiezAgentSwarmContainer.html#returns_1","title":"Returns","text":"<p><code>WaldiezAgent</code></p>"},{"location":"reference/react/classes/WaldiezAgentSwarmContainer.html#inherited-from_9","title":"Inherited from","text":"<p><code>WaldiezAgent</code>.<code>create</code></p>"},{"location":"reference/react/classes/WaldiezAgentSwarmContainerData.html","title":"WaldiezAgentSwarmContainerData","text":"<p>@waldiez/react v0.4.5</p> <p>Defined in: src/waldiez/models/Agent/Swarm/SwarmContainerData.ts:39</p> <p>Waldiez Swarm Container Agent Data (extends WaldiezAgentData).</p>"},{"location":"reference/react/classes/WaldiezAgentSwarmContainerData.html#param","title":"Param","text":"<p>The human input mode of the agent (\"NEVER\" | \"ALWAYS\" | \"SOMETIMES\")</p>"},{"location":"reference/react/classes/WaldiezAgentSwarmContainerData.html#param_1","title":"Param","text":"<p>The system message of the agent</p>"},{"location":"reference/react/classes/WaldiezAgentSwarmContainerData.html#param_2","title":"Param","text":"<p>The code execution configuration of the agent</p>"},{"location":"reference/react/classes/WaldiezAgentSwarmContainerData.html#param_3","title":"Param","text":"<p>The default auto reply of the agent</p>"},{"location":"reference/react/classes/WaldiezAgentSwarmContainerData.html#param_4","title":"Param","text":"<p>The maximum consecutive auto reply of the agent</p>"},{"location":"reference/react/classes/WaldiezAgentSwarmContainerData.html#param_5","title":"Param","text":"<p>The termination message check of the agent</p>"},{"location":"reference/react/classes/WaldiezAgentSwarmContainerData.html#param_6","title":"Param","text":"<p>The model ids of the agent</p>"},{"location":"reference/react/classes/WaldiezAgentSwarmContainerData.html#param_7","title":"Param","text":"<p>The linked skills of the agent</p>"},{"location":"reference/react/classes/WaldiezAgentSwarmContainerData.html#param_8","title":"Param","text":"<p>The parent id of the agent</p>"},{"location":"reference/react/classes/WaldiezAgentSwarmContainerData.html#param_9","title":"Param","text":"<p>The nested chats of the agent</p>"},{"location":"reference/react/classes/WaldiezAgentSwarmContainerData.html#param_10","title":"Param","text":"<p>The maximum rounds  (for the edge)</p>"},{"location":"reference/react/classes/WaldiezAgentSwarmContainerData.html#param_11","title":"Param","text":"<p>The initial agent (if any, for the edge)</p>"},{"location":"reference/react/classes/WaldiezAgentSwarmContainerData.html#param_12","title":"Param","text":"<p>The after work (if any, for the edge)</p>"},{"location":"reference/react/classes/WaldiezAgentSwarmContainerData.html#see","title":"See","text":"<ul> <li>WaldiezAgentData</li> <li>WaldiezAgentLinkedSkill</li> <li>WaldiezAgentNestedChat</li> <li>WaldiezAgentTerminationMessageCheck</li> <li>WaldiezAgentHumanInputMode</li> <li>WaldiezAgentCodeExecutionConfig</li> <li>WaldiezAgentTerminationMessageCheck</li> <li>WaldiezSwarmAfterWork</li> </ul>"},{"location":"reference/react/classes/WaldiezAgentSwarmContainerData.html#extends","title":"Extends","text":"<ul> <li><code>WaldiezAgentData</code></li> </ul>"},{"location":"reference/react/classes/WaldiezAgentSwarmContainerData.html#constructors","title":"Constructors","text":""},{"location":"reference/react/classes/WaldiezAgentSwarmContainerData.html#constructor","title":"Constructor","text":"<p>new WaldiezAgentSwarmContainerData(<code>props</code>): <code>WaldiezAgentSwarmContainerData</code></p> <p>Defined in: src/waldiez/models/Agent/Swarm/SwarmContainerData.ts:44</p>"},{"location":"reference/react/classes/WaldiezAgentSwarmContainerData.html#parameters","title":"Parameters","text":""},{"location":"reference/react/classes/WaldiezAgentSwarmContainerData.html#props","title":"props","text":""},{"location":"reference/react/classes/WaldiezAgentSwarmContainerData.html#afterwork","title":"afterWork","text":"<p><code>null</code> | <code>WaldiezSwarmAfterWork</code></p>"},{"location":"reference/react/classes/WaldiezAgentSwarmContainerData.html#agentdefaultautoreply","title":"agentDefaultAutoReply","text":"<p><code>null</code> | <code>string</code></p>"},{"location":"reference/react/classes/WaldiezAgentSwarmContainerData.html#codeexecutionconfig","title":"codeExecutionConfig","text":"<p><code>WaldiezAgentCodeExecutionConfig</code></p>"},{"location":"reference/react/classes/WaldiezAgentSwarmContainerData.html#contextvariables","title":"contextVariables","text":"<p>{[<code>key</code>: <code>string</code>]: <code>string</code>; }</p>"},{"location":"reference/react/classes/WaldiezAgentSwarmContainerData.html#humaninputmode","title":"humanInputMode","text":"<p><code>WaldiezAgentHumanInputMode</code></p>"},{"location":"reference/react/classes/WaldiezAgentSwarmContainerData.html#initialagent","title":"initialAgent","text":"<p><code>null</code> | <code>string</code></p>"},{"location":"reference/react/classes/WaldiezAgentSwarmContainerData.html#maxconsecutiveautoreply","title":"maxConsecutiveAutoReply","text":"<p><code>null</code> | <code>number</code></p>"},{"location":"reference/react/classes/WaldiezAgentSwarmContainerData.html#maxrounds","title":"maxRounds","text":"<p><code>number</code></p>"},{"location":"reference/react/classes/WaldiezAgentSwarmContainerData.html#modelids","title":"modelIds","text":"<p><code>string</code>[]</p>"},{"location":"reference/react/classes/WaldiezAgentSwarmContainerData.html#nestedchats","title":"nestedChats","text":"<p><code>WaldiezAgentNestedChat</code>[]</p>"},{"location":"reference/react/classes/WaldiezAgentSwarmContainerData.html#parentid","title":"parentId","text":"<p><code>null</code> | <code>string</code></p>"},{"location":"reference/react/classes/WaldiezAgentSwarmContainerData.html#skills","title":"skills","text":"<p><code>WaldiezAgentLinkedSkill</code>[]</p>"},{"location":"reference/react/classes/WaldiezAgentSwarmContainerData.html#systemmessage","title":"systemMessage","text":"<p><code>null</code> | <code>string</code></p>"},{"location":"reference/react/classes/WaldiezAgentSwarmContainerData.html#termination","title":"termination","text":"<p><code>WaldiezAgentTerminationMessageCheck</code></p>"},{"location":"reference/react/classes/WaldiezAgentSwarmContainerData.html#returns","title":"Returns","text":"<p><code>WaldiezAgentSwarmContainerData</code></p>"},{"location":"reference/react/classes/WaldiezAgentSwarmContainerData.html#overrides","title":"Overrides","text":"<p><code>WaldiezAgentData</code>.<code>constructor</code></p>"},{"location":"reference/react/classes/WaldiezAgentSwarmContainerData.html#properties","title":"Properties","text":""},{"location":"reference/react/classes/WaldiezAgentSwarmContainerData.html#afterwork_1","title":"afterWork","text":"<p>afterWork: <code>null</code> | <code>WaldiezSwarmAfterWork</code></p> <p>Defined in: src/waldiez/models/Agent/Swarm/SwarmContainerData.ts:42</p>"},{"location":"reference/react/classes/WaldiezAgentSwarmContainerData.html#agentdefaultautoreply_1","title":"agentDefaultAutoReply","text":"<p>agentDefaultAutoReply: <code>null</code> | <code>string</code></p> <p>Defined in: src/waldiez/models/Agent/Common/AgentData.ts:35</p>"},{"location":"reference/react/classes/WaldiezAgentSwarmContainerData.html#inherited-from","title":"Inherited from","text":"<p><code>WaldiezAgentData</code>.<code>agentDefaultAutoReply</code></p>"},{"location":"reference/react/classes/WaldiezAgentSwarmContainerData.html#codeexecutionconfig_1","title":"codeExecutionConfig","text":"<p>codeExecutionConfig: <code>WaldiezAgentCodeExecutionConfig</code></p> <p>Defined in: src/waldiez/models/Agent/Common/AgentData.ts:34</p>"},{"location":"reference/react/classes/WaldiezAgentSwarmContainerData.html#inherited-from_1","title":"Inherited from","text":"<p><code>WaldiezAgentData</code>.<code>codeExecutionConfig</code></p>"},{"location":"reference/react/classes/WaldiezAgentSwarmContainerData.html#contextvariables_1","title":"contextVariables","text":"<p>contextVariables: <code>object</code> = <code>{}</code></p> <p>Defined in: src/waldiez/models/Agent/Swarm/SwarmContainerData.ts:43</p>"},{"location":"reference/react/classes/WaldiezAgentSwarmContainerData.html#index-signature","title":"Index Signature","text":"<p>[<code>key</code>: <code>string</code>]: <code>string</code></p>"},{"location":"reference/react/classes/WaldiezAgentSwarmContainerData.html#humaninputmode_1","title":"humanInputMode","text":"<p>humanInputMode: <code>WaldiezAgentHumanInputMode</code></p> <p>Defined in: src/waldiez/models/Agent/Common/AgentData.ts:33</p>"},{"location":"reference/react/classes/WaldiezAgentSwarmContainerData.html#inherited-from_2","title":"Inherited from","text":"<p><code>WaldiezAgentData</code>.<code>humanInputMode</code></p>"},{"location":"reference/react/classes/WaldiezAgentSwarmContainerData.html#initialagent_1","title":"initialAgent","text":"<p>initialAgent: <code>null</code> | <code>string</code></p> <p>Defined in: src/waldiez/models/Agent/Swarm/SwarmContainerData.ts:41</p>"},{"location":"reference/react/classes/WaldiezAgentSwarmContainerData.html#maxconsecutiveautoreply_1","title":"maxConsecutiveAutoReply","text":"<p>maxConsecutiveAutoReply: <code>null</code> | <code>number</code></p> <p>Defined in: src/waldiez/models/Agent/Common/AgentData.ts:36</p>"},{"location":"reference/react/classes/WaldiezAgentSwarmContainerData.html#inherited-from_3","title":"Inherited from","text":"<p><code>WaldiezAgentData</code>.<code>maxConsecutiveAutoReply</code></p>"},{"location":"reference/react/classes/WaldiezAgentSwarmContainerData.html#maxrounds_1","title":"maxRounds","text":"<p>maxRounds: <code>number</code></p> <p>Defined in: src/waldiez/models/Agent/Swarm/SwarmContainerData.ts:40</p>"},{"location":"reference/react/classes/WaldiezAgentSwarmContainerData.html#modelids_1","title":"modelIds","text":"<p>modelIds: <code>string</code>[]</p> <p>Defined in: src/waldiez/models/Agent/Common/AgentData.ts:39</p>"},{"location":"reference/react/classes/WaldiezAgentSwarmContainerData.html#inherited-from_4","title":"Inherited from","text":"<p><code>WaldiezAgentData</code>.<code>modelIds</code></p>"},{"location":"reference/react/classes/WaldiezAgentSwarmContainerData.html#nestedchats_1","title":"nestedChats","text":"<p>nestedChats: <code>WaldiezAgentNestedChat</code>[]</p> <p>Defined in: src/waldiez/models/Agent/Common/AgentData.ts:42</p>"},{"location":"reference/react/classes/WaldiezAgentSwarmContainerData.html#inherited-from_5","title":"Inherited from","text":"<p><code>WaldiezAgentData</code>.<code>nestedChats</code></p>"},{"location":"reference/react/classes/WaldiezAgentSwarmContainerData.html#parentid_1","title":"parentId","text":"<p>parentId: <code>null</code> | <code>string</code></p> <p>Defined in: src/waldiez/models/Agent/Common/AgentData.ts:41</p>"},{"location":"reference/react/classes/WaldiezAgentSwarmContainerData.html#inherited-from_6","title":"Inherited from","text":"<p><code>WaldiezAgentData</code>.<code>parentId</code></p>"},{"location":"reference/react/classes/WaldiezAgentSwarmContainerData.html#skills_1","title":"skills","text":"<p>skills: <code>WaldiezAgentLinkedSkill</code>[]</p> <p>Defined in: src/waldiez/models/Agent/Common/AgentData.ts:40</p>"},{"location":"reference/react/classes/WaldiezAgentSwarmContainerData.html#inherited-from_7","title":"Inherited from","text":"<p><code>WaldiezAgentData</code>.<code>skills</code></p>"},{"location":"reference/react/classes/WaldiezAgentSwarmContainerData.html#systemmessage_1","title":"systemMessage","text":"<p>systemMessage: <code>null</code> | <code>string</code></p> <p>Defined in: src/waldiez/models/Agent/Common/AgentData.ts:32</p>"},{"location":"reference/react/classes/WaldiezAgentSwarmContainerData.html#inherited-from_8","title":"Inherited from","text":"<p><code>WaldiezAgentData</code>.<code>systemMessage</code></p>"},{"location":"reference/react/classes/WaldiezAgentSwarmContainerData.html#termination_1","title":"termination","text":"<p>termination: <code>WaldiezAgentTerminationMessageCheck</code></p> <p>Defined in: src/waldiez/models/Agent/Common/AgentData.ts:37</p>"},{"location":"reference/react/classes/WaldiezAgentSwarmContainerData.html#inherited-from_9","title":"Inherited from","text":"<p><code>WaldiezAgentData</code>.<code>termination</code></p>"},{"location":"reference/react/classes/WaldiezAgentSwarmData.html","title":"WaldiezAgentSwarmData","text":"<p>@waldiez/react v0.4.5</p> <p>Defined in: src/waldiez/models/Agent/Swarm/SwarmData.ts:42</p> <p>Waldiez Swarm Agent Data.</p>"},{"location":"reference/react/classes/WaldiezAgentSwarmData.html#param","title":"Param","text":"<p>The human input mode of the agent (\"NEVER\" | \"ALWAYS\" | \"SOMETIMES\")</p>"},{"location":"reference/react/classes/WaldiezAgentSwarmData.html#param_1","title":"Param","text":"<p>The system message of the agent</p>"},{"location":"reference/react/classes/WaldiezAgentSwarmData.html#param_2","title":"Param","text":"<p>The code execution configuration of the agent</p>"},{"location":"reference/react/classes/WaldiezAgentSwarmData.html#param_3","title":"Param","text":"<p>The default auto reply of the agent</p>"},{"location":"reference/react/classes/WaldiezAgentSwarmData.html#param_4","title":"Param","text":"<p>The maximum consecutive auto reply of the agent</p>"},{"location":"reference/react/classes/WaldiezAgentSwarmData.html#param_5","title":"Param","text":"<p>The termination message check of the agent</p>"},{"location":"reference/react/classes/WaldiezAgentSwarmData.html#param_6","title":"Param","text":"<p>The model ids of the agent</p>"},{"location":"reference/react/classes/WaldiezAgentSwarmData.html#param_7","title":"Param","text":"<p>The linked skills of the agent</p>"},{"location":"reference/react/classes/WaldiezAgentSwarmData.html#param_8","title":"Param","text":"<p>The parent id of the agent</p>"},{"location":"reference/react/classes/WaldiezAgentSwarmData.html#param_9","title":"Param","text":"<p>The nested chats of the agent</p>"},{"location":"reference/react/classes/WaldiezAgentSwarmData.html#param_10","title":"Param","text":"<p>The flag to check if the agent is initial</p>"},{"location":"reference/react/classes/WaldiezAgentSwarmData.html#param_11","title":"Param","text":"<p>The functions of the agent</p>"},{"location":"reference/react/classes/WaldiezAgentSwarmData.html#param_12","title":"Param","text":"<p>The update agent state before reply of the agent</p>"},{"location":"reference/react/classes/WaldiezAgentSwarmData.html#param_13","title":"Param","text":"<p>The hand offs of the agent</p>"},{"location":"reference/react/classes/WaldiezAgentSwarmData.html#see","title":"See","text":"<ul> <li>WaldiezAgentData</li> <li>WaldiezAgentLinkedSkill</li> <li>WaldiezAgentNestedChat</li> <li>WaldiezAgentTerminationMessageCheck</li> <li>WaldiezSwarmUpdateSystemMessage</li> <li>WaldiezSwarmHandoff</li> <li>WaldiezAgentHumanInputMode</li> <li>WaldiezAgentCodeExecutionConfig</li> <li>WaldiezAgentTerminationMessageCheck</li> </ul>"},{"location":"reference/react/classes/WaldiezAgentSwarmData.html#extends","title":"Extends","text":"<ul> <li><code>WaldiezAgentData</code></li> </ul>"},{"location":"reference/react/classes/WaldiezAgentSwarmData.html#constructors","title":"Constructors","text":""},{"location":"reference/react/classes/WaldiezAgentSwarmData.html#constructor","title":"Constructor","text":"<p>new WaldiezAgentSwarmData(<code>props</code>): <code>WaldiezAgentSwarmData</code></p> <p>Defined in: src/waldiez/models/Agent/Swarm/SwarmData.ts:47</p>"},{"location":"reference/react/classes/WaldiezAgentSwarmData.html#parameters","title":"Parameters","text":""},{"location":"reference/react/classes/WaldiezAgentSwarmData.html#props","title":"props","text":""},{"location":"reference/react/classes/WaldiezAgentSwarmData.html#agentdefaultautoreply","title":"agentDefaultAutoReply","text":"<p><code>null</code> | <code>string</code></p>"},{"location":"reference/react/classes/WaldiezAgentSwarmData.html#codeexecutionconfig","title":"codeExecutionConfig","text":"<p><code>WaldiezAgentCodeExecutionConfig</code></p>"},{"location":"reference/react/classes/WaldiezAgentSwarmData.html#functions","title":"functions","text":"<p><code>string</code>[]</p>"},{"location":"reference/react/classes/WaldiezAgentSwarmData.html#handoffs","title":"handoffs","text":"<p><code>WaldiezSwarmHandoff</code>[]</p>"},{"location":"reference/react/classes/WaldiezAgentSwarmData.html#humaninputmode","title":"humanInputMode","text":"<p><code>WaldiezAgentHumanInputMode</code></p>"},{"location":"reference/react/classes/WaldiezAgentSwarmData.html#isinitial","title":"isInitial","text":"<p><code>boolean</code></p>"},{"location":"reference/react/classes/WaldiezAgentSwarmData.html#maxconsecutiveautoreply","title":"maxConsecutiveAutoReply","text":"<p><code>null</code> | <code>number</code></p>"},{"location":"reference/react/classes/WaldiezAgentSwarmData.html#modelids","title":"modelIds","text":"<p><code>string</code>[]</p>"},{"location":"reference/react/classes/WaldiezAgentSwarmData.html#nestedchats","title":"nestedChats","text":"<p><code>WaldiezAgentNestedChat</code>[]</p>"},{"location":"reference/react/classes/WaldiezAgentSwarmData.html#parentid","title":"parentId","text":"<p><code>null</code> | <code>string</code></p>"},{"location":"reference/react/classes/WaldiezAgentSwarmData.html#skills","title":"skills","text":"<p><code>WaldiezAgentLinkedSkill</code>[]</p>"},{"location":"reference/react/classes/WaldiezAgentSwarmData.html#systemmessage","title":"systemMessage","text":"<p><code>null</code> | <code>string</code></p>"},{"location":"reference/react/classes/WaldiezAgentSwarmData.html#termination","title":"termination","text":"<p><code>WaldiezAgentTerminationMessageCheck</code></p>"},{"location":"reference/react/classes/WaldiezAgentSwarmData.html#updateagentstatebeforereply","title":"updateAgentStateBeforeReply","text":"<p><code>WaldiezSwarmUpdateSystemMessage</code>[]</p>"},{"location":"reference/react/classes/WaldiezAgentSwarmData.html#returns","title":"Returns","text":"<p><code>WaldiezAgentSwarmData</code></p>"},{"location":"reference/react/classes/WaldiezAgentSwarmData.html#overrides","title":"Overrides","text":"<p><code>WaldiezAgentData</code>.<code>constructor</code></p>"},{"location":"reference/react/classes/WaldiezAgentSwarmData.html#properties","title":"Properties","text":""},{"location":"reference/react/classes/WaldiezAgentSwarmData.html#agentdefaultautoreply_1","title":"agentDefaultAutoReply","text":"<p>agentDefaultAutoReply: <code>null</code> | <code>string</code></p> <p>Defined in: src/waldiez/models/Agent/Common/AgentData.ts:35</p>"},{"location":"reference/react/classes/WaldiezAgentSwarmData.html#inherited-from","title":"Inherited from","text":"<p><code>WaldiezAgentData</code>.<code>agentDefaultAutoReply</code></p>"},{"location":"reference/react/classes/WaldiezAgentSwarmData.html#codeexecutionconfig_1","title":"codeExecutionConfig","text":"<p>codeExecutionConfig: <code>WaldiezAgentCodeExecutionConfig</code></p> <p>Defined in: src/waldiez/models/Agent/Common/AgentData.ts:34</p>"},{"location":"reference/react/classes/WaldiezAgentSwarmData.html#inherited-from_1","title":"Inherited from","text":"<p><code>WaldiezAgentData</code>.<code>codeExecutionConfig</code></p>"},{"location":"reference/react/classes/WaldiezAgentSwarmData.html#functions_1","title":"functions","text":"<p>functions: <code>string</code>[]</p> <p>Defined in: src/waldiez/models/Agent/Swarm/SwarmData.ts:44</p>"},{"location":"reference/react/classes/WaldiezAgentSwarmData.html#handoffs_1","title":"handoffs","text":"<p>handoffs: <code>WaldiezSwarmHandoff</code>[]</p> <p>Defined in: src/waldiez/models/Agent/Swarm/SwarmData.ts:46</p>"},{"location":"reference/react/classes/WaldiezAgentSwarmData.html#humaninputmode_1","title":"humanInputMode","text":"<p>humanInputMode: <code>WaldiezAgentHumanInputMode</code></p> <p>Defined in: src/waldiez/models/Agent/Common/AgentData.ts:33</p>"},{"location":"reference/react/classes/WaldiezAgentSwarmData.html#inherited-from_2","title":"Inherited from","text":"<p><code>WaldiezAgentData</code>.<code>humanInputMode</code></p>"},{"location":"reference/react/classes/WaldiezAgentSwarmData.html#isinitial_1","title":"isInitial","text":"<p>isInitial: <code>boolean</code></p> <p>Defined in: src/waldiez/models/Agent/Swarm/SwarmData.ts:43</p>"},{"location":"reference/react/classes/WaldiezAgentSwarmData.html#maxconsecutiveautoreply_1","title":"maxConsecutiveAutoReply","text":"<p>maxConsecutiveAutoReply: <code>null</code> | <code>number</code></p> <p>Defined in: src/waldiez/models/Agent/Common/AgentData.ts:36</p>"},{"location":"reference/react/classes/WaldiezAgentSwarmData.html#inherited-from_3","title":"Inherited from","text":"<p><code>WaldiezAgentData</code>.<code>maxConsecutiveAutoReply</code></p>"},{"location":"reference/react/classes/WaldiezAgentSwarmData.html#modelids_1","title":"modelIds","text":"<p>modelIds: <code>string</code>[]</p> <p>Defined in: src/waldiez/models/Agent/Common/AgentData.ts:39</p>"},{"location":"reference/react/classes/WaldiezAgentSwarmData.html#inherited-from_4","title":"Inherited from","text":"<p><code>WaldiezAgentData</code>.<code>modelIds</code></p>"},{"location":"reference/react/classes/WaldiezAgentSwarmData.html#nestedchats_1","title":"nestedChats","text":"<p>nestedChats: <code>WaldiezAgentNestedChat</code>[]</p> <p>Defined in: src/waldiez/models/Agent/Common/AgentData.ts:42</p>"},{"location":"reference/react/classes/WaldiezAgentSwarmData.html#inherited-from_5","title":"Inherited from","text":"<p><code>WaldiezAgentData</code>.<code>nestedChats</code></p>"},{"location":"reference/react/classes/WaldiezAgentSwarmData.html#parentid_1","title":"parentId","text":"<p>parentId: <code>null</code> | <code>string</code></p> <p>Defined in: src/waldiez/models/Agent/Common/AgentData.ts:41</p>"},{"location":"reference/react/classes/WaldiezAgentSwarmData.html#inherited-from_6","title":"Inherited from","text":"<p><code>WaldiezAgentData</code>.<code>parentId</code></p>"},{"location":"reference/react/classes/WaldiezAgentSwarmData.html#skills_1","title":"skills","text":"<p>skills: <code>WaldiezAgentLinkedSkill</code>[]</p> <p>Defined in: src/waldiez/models/Agent/Common/AgentData.ts:40</p>"},{"location":"reference/react/classes/WaldiezAgentSwarmData.html#inherited-from_7","title":"Inherited from","text":"<p><code>WaldiezAgentData</code>.<code>skills</code></p>"},{"location":"reference/react/classes/WaldiezAgentSwarmData.html#systemmessage_1","title":"systemMessage","text":"<p>systemMessage: <code>null</code> | <code>string</code></p> <p>Defined in: src/waldiez/models/Agent/Common/AgentData.ts:32</p>"},{"location":"reference/react/classes/WaldiezAgentSwarmData.html#inherited-from_8","title":"Inherited from","text":"<p><code>WaldiezAgentData</code>.<code>systemMessage</code></p>"},{"location":"reference/react/classes/WaldiezAgentSwarmData.html#termination_1","title":"termination","text":"<p>termination: <code>WaldiezAgentTerminationMessageCheck</code></p> <p>Defined in: src/waldiez/models/Agent/Common/AgentData.ts:37</p>"},{"location":"reference/react/classes/WaldiezAgentSwarmData.html#inherited-from_9","title":"Inherited from","text":"<p><code>WaldiezAgentData</code>.<code>termination</code></p>"},{"location":"reference/react/classes/WaldiezAgentSwarmData.html#updateagentstatebeforereply_1","title":"updateAgentStateBeforeReply","text":"<p>updateAgentStateBeforeReply: <code>WaldiezSwarmUpdateSystemMessage</code>[]</p> <p>Defined in: src/waldiez/models/Agent/Swarm/SwarmData.ts:45</p>"},{"location":"reference/react/classes/WaldiezAgentUserProxy.html","title":"WaldiezAgentUserProxy","text":"<p>@waldiez/react v0.4.5</p> <p>Defined in: src/waldiez/models/Agent/UserProxy/UserProxy.ts:21</p> <p>Waldiez User Proxy Agent.</p>"},{"location":"reference/react/classes/WaldiezAgentUserProxy.html#param","title":"Param","text":"<p>The id of the user proxy</p>"},{"location":"reference/react/classes/WaldiezAgentUserProxy.html#param_1","title":"Param","text":"<p>The type of the node in a graph (agent)</p>"},{"location":"reference/react/classes/WaldiezAgentUserProxy.html#param_2","title":"Param","text":"<p>The type of the agent (user)</p>"},{"location":"reference/react/classes/WaldiezAgentUserProxy.html#param_3","title":"Param","text":"<p>The name of the agent</p>"},{"location":"reference/react/classes/WaldiezAgentUserProxy.html#param_4","title":"Param","text":"<p>The description of the agent</p>"},{"location":"reference/react/classes/WaldiezAgentUserProxy.html#param_5","title":"Param","text":"<p>The tags of the agent</p>"},{"location":"reference/react/classes/WaldiezAgentUserProxy.html#param_6","title":"Param","text":"<p>The requirements of the agent</p>"},{"location":"reference/react/classes/WaldiezAgentUserProxy.html#param_7","title":"Param","text":"<p>The creation date of the agent</p>"},{"location":"reference/react/classes/WaldiezAgentUserProxy.html#param_8","title":"Param","text":"<p>The update date of the agent</p>"},{"location":"reference/react/classes/WaldiezAgentUserProxy.html#param_9","title":"Param","text":"<p>The data of the agent. See WaldiezAgentUserProxyData</p>"},{"location":"reference/react/classes/WaldiezAgentUserProxy.html#extends","title":"Extends","text":"<ul> <li><code>WaldiezAgent</code></li> </ul>"},{"location":"reference/react/classes/WaldiezAgentUserProxy.html#constructors","title":"Constructors","text":""},{"location":"reference/react/classes/WaldiezAgentUserProxy.html#constructor","title":"Constructor","text":"<p>new WaldiezAgentUserProxy(<code>props</code>): <code>WaldiezAgentUserProxy</code></p> <p>Defined in: src/waldiez/models/Agent/UserProxy/UserProxy.ts:24</p>"},{"location":"reference/react/classes/WaldiezAgentUserProxy.html#parameters","title":"Parameters","text":""},{"location":"reference/react/classes/WaldiezAgentUserProxy.html#props","title":"props","text":""},{"location":"reference/react/classes/WaldiezAgentUserProxy.html#agenttype","title":"agentType","text":"<p><code>WaldiezNodeAgentType</code></p>"},{"location":"reference/react/classes/WaldiezAgentUserProxy.html#createdat","title":"createdAt","text":"<p><code>string</code></p>"},{"location":"reference/react/classes/WaldiezAgentUserProxy.html#data","title":"data","text":"<p><code>WaldiezAgentUserProxyData</code></p>"},{"location":"reference/react/classes/WaldiezAgentUserProxy.html#description","title":"description","text":"<p><code>string</code></p>"},{"location":"reference/react/classes/WaldiezAgentUserProxy.html#id","title":"id","text":"<p><code>string</code></p>"},{"location":"reference/react/classes/WaldiezAgentUserProxy.html#name","title":"name","text":"<p><code>string</code></p>"},{"location":"reference/react/classes/WaldiezAgentUserProxy.html#requirements","title":"requirements","text":"<p><code>string</code>[]</p>"},{"location":"reference/react/classes/WaldiezAgentUserProxy.html#rest","title":"rest?","text":"<p>{[<code>key</code>: <code>string</code>]: <code>unknown</code>; }</p>"},{"location":"reference/react/classes/WaldiezAgentUserProxy.html#tags","title":"tags","text":"<p><code>string</code>[]</p>"},{"location":"reference/react/classes/WaldiezAgentUserProxy.html#updatedat","title":"updatedAt","text":"<p><code>string</code></p>"},{"location":"reference/react/classes/WaldiezAgentUserProxy.html#returns","title":"Returns","text":"<p><code>WaldiezAgentUserProxy</code></p>"},{"location":"reference/react/classes/WaldiezAgentUserProxy.html#overrides","title":"Overrides","text":"<p><code>WaldiezAgent</code>.<code>constructor</code></p>"},{"location":"reference/react/classes/WaldiezAgentUserProxy.html#properties","title":"Properties","text":""},{"location":"reference/react/classes/WaldiezAgentUserProxy.html#agenttype_1","title":"agentType","text":"<p>agentType: <code>WaldiezNodeAgentType</code> = <code>\"user\"</code></p> <p>Defined in: src/waldiez/models/Agent/UserProxy/UserProxy.ts:23</p>"},{"location":"reference/react/classes/WaldiezAgentUserProxy.html#overrides_1","title":"Overrides","text":"<p><code>WaldiezAgent</code>.<code>agentType</code></p>"},{"location":"reference/react/classes/WaldiezAgentUserProxy.html#createdat_1","title":"createdAt","text":"<p>createdAt: <code>string</code></p> <p>Defined in: src/waldiez/models/Agent/Common/Agent.ts:30</p>"},{"location":"reference/react/classes/WaldiezAgentUserProxy.html#inherited-from","title":"Inherited from","text":"<p><code>WaldiezAgent</code>.<code>createdAt</code></p>"},{"location":"reference/react/classes/WaldiezAgentUserProxy.html#data_1","title":"data","text":"<p>data: <code>WaldiezAgentUserProxyData</code></p> <p>Defined in: src/waldiez/models/Agent/UserProxy/UserProxy.ts:22</p>"},{"location":"reference/react/classes/WaldiezAgentUserProxy.html#overrides_2","title":"Overrides","text":"<p><code>WaldiezAgent</code>.<code>data</code></p>"},{"location":"reference/react/classes/WaldiezAgentUserProxy.html#description_1","title":"description","text":"<p>description: <code>string</code></p> <p>Defined in: src/waldiez/models/Agent/Common/Agent.ts:27</p>"},{"location":"reference/react/classes/WaldiezAgentUserProxy.html#inherited-from_1","title":"Inherited from","text":"<p><code>WaldiezAgent</code>.<code>description</code></p>"},{"location":"reference/react/classes/WaldiezAgentUserProxy.html#id_1","title":"id","text":"<p>id: <code>string</code></p> <p>Defined in: src/waldiez/models/Agent/Common/Agent.ts:23</p>"},{"location":"reference/react/classes/WaldiezAgentUserProxy.html#inherited-from_2","title":"Inherited from","text":"<p><code>WaldiezAgent</code>.<code>id</code></p>"},{"location":"reference/react/classes/WaldiezAgentUserProxy.html#name_1","title":"name","text":"<p>name: <code>string</code></p> <p>Defined in: src/waldiez/models/Agent/Common/Agent.ts:26</p>"},{"location":"reference/react/classes/WaldiezAgentUserProxy.html#inherited-from_3","title":"Inherited from","text":"<p><code>WaldiezAgent</code>.<code>name</code></p>"},{"location":"reference/react/classes/WaldiezAgentUserProxy.html#requirements_1","title":"requirements","text":"<p>requirements: <code>string</code>[]</p> <p>Defined in: src/waldiez/models/Agent/Common/Agent.ts:29</p>"},{"location":"reference/react/classes/WaldiezAgentUserProxy.html#inherited-from_4","title":"Inherited from","text":"<p><code>WaldiezAgent</code>.<code>requirements</code></p>"},{"location":"reference/react/classes/WaldiezAgentUserProxy.html#rest_1","title":"rest?","text":"<p><code>optional</code> rest: <code>object</code></p> <p>Defined in: src/waldiez/models/Agent/Common/Agent.ts:33</p>"},{"location":"reference/react/classes/WaldiezAgentUserProxy.html#index-signature","title":"Index Signature","text":"<p>[<code>key</code>: <code>string</code>]: <code>unknown</code></p>"},{"location":"reference/react/classes/WaldiezAgentUserProxy.html#inherited-from_5","title":"Inherited from","text":"<p><code>WaldiezAgent</code>.<code>rest</code></p>"},{"location":"reference/react/classes/WaldiezAgentUserProxy.html#tags_1","title":"tags","text":"<p>tags: <code>string</code>[]</p> <p>Defined in: src/waldiez/models/Agent/Common/Agent.ts:28</p>"},{"location":"reference/react/classes/WaldiezAgentUserProxy.html#inherited-from_6","title":"Inherited from","text":"<p><code>WaldiezAgent</code>.<code>tags</code></p>"},{"location":"reference/react/classes/WaldiezAgentUserProxy.html#type","title":"type","text":"<p>type: <code>string</code> = <code>\"agent\"</code></p> <p>Defined in: src/waldiez/models/Agent/Common/Agent.ts:24</p>"},{"location":"reference/react/classes/WaldiezAgentUserProxy.html#inherited-from_7","title":"Inherited from","text":"<p><code>WaldiezAgent</code>.<code>type</code></p>"},{"location":"reference/react/classes/WaldiezAgentUserProxy.html#updatedat_1","title":"updatedAt","text":"<p>updatedAt: <code>string</code></p> <p>Defined in: src/waldiez/models/Agent/Common/Agent.ts:31</p>"},{"location":"reference/react/classes/WaldiezAgentUserProxy.html#inherited-from_8","title":"Inherited from","text":"<p><code>WaldiezAgent</code>.<code>updatedAt</code></p>"},{"location":"reference/react/classes/WaldiezAgentUserProxy.html#methods","title":"Methods","text":""},{"location":"reference/react/classes/WaldiezAgentUserProxy.html#create","title":"create()","text":"<p><code>static</code> create(<code>agentType</code>): <code>WaldiezAgent</code></p> <p>Defined in: src/waldiez/models/Agent/Common/Agent.ts:59</p>"},{"location":"reference/react/classes/WaldiezAgentUserProxy.html#parameters_1","title":"Parameters","text":""},{"location":"reference/react/classes/WaldiezAgentUserProxy.html#agenttype_2","title":"agentType","text":"<p><code>WaldiezAgentType</code> | <code>\"swarm_container\"</code></p>"},{"location":"reference/react/classes/WaldiezAgentUserProxy.html#returns_1","title":"Returns","text":"<p><code>WaldiezAgent</code></p>"},{"location":"reference/react/classes/WaldiezAgentUserProxy.html#inherited-from_9","title":"Inherited from","text":"<p><code>WaldiezAgent</code>.<code>create</code></p>"},{"location":"reference/react/classes/WaldiezAgentUserProxyData.html","title":"WaldiezAgentUserProxyData","text":"<p>@waldiez/react v0.4.5</p> <p>Defined in: src/waldiez/models/Agent/UserProxy/UserProxyData.ts:32</p> <p>Waldiez User Proxy Agent Data.</p>"},{"location":"reference/react/classes/WaldiezAgentUserProxyData.html#param","title":"Param","text":"<p>The human input mode of the agent (\"NEVER\" | \"ALWAYS\" | \"SOMETIMES\")</p>"},{"location":"reference/react/classes/WaldiezAgentUserProxyData.html#param_1","title":"Param","text":"<p>The system message of the agent</p>"},{"location":"reference/react/classes/WaldiezAgentUserProxyData.html#param_2","title":"Param","text":"<p>The code execution configuration of the agent</p>"},{"location":"reference/react/classes/WaldiezAgentUserProxyData.html#param_3","title":"Param","text":"<p>The default auto reply of the agent</p>"},{"location":"reference/react/classes/WaldiezAgentUserProxyData.html#param_4","title":"Param","text":"<p>The maximum consecutive auto reply of the agent</p>"},{"location":"reference/react/classes/WaldiezAgentUserProxyData.html#param_5","title":"Param","text":"<p>The termination message check of the agent</p>"},{"location":"reference/react/classes/WaldiezAgentUserProxyData.html#param_6","title":"Param","text":"<p>The model ids of the agent</p>"},{"location":"reference/react/classes/WaldiezAgentUserProxyData.html#param_7","title":"Param","text":"<p>The linked skills of the agent</p>"},{"location":"reference/react/classes/WaldiezAgentUserProxyData.html#param_8","title":"Param","text":"<p>The parent id of the agent</p>"},{"location":"reference/react/classes/WaldiezAgentUserProxyData.html#param_9","title":"Param","text":"<p>The nested chats of the agent</p>"},{"location":"reference/react/classes/WaldiezAgentUserProxyData.html#param_10","title":"Param","text":"<p>The rest of the agent data</p>"},{"location":"reference/react/classes/WaldiezAgentUserProxyData.html#see","title":"See","text":"<ul> <li>WaldiezAgentData</li> <li>WaldiezAgentLinkedSkill</li> <li>WaldiezAgentNestedChat</li> <li>WaldiezAgentTerminationMessageCheck</li> </ul>"},{"location":"reference/react/classes/WaldiezAgentUserProxyData.html#extends","title":"Extends","text":"<ul> <li><code>WaldiezAgentData</code></li> </ul>"},{"location":"reference/react/classes/WaldiezAgentUserProxyData.html#constructors","title":"Constructors","text":""},{"location":"reference/react/classes/WaldiezAgentUserProxyData.html#constructor","title":"Constructor","text":"<p>new WaldiezAgentUserProxyData(<code>props</code>): <code>WaldiezAgentUserProxyData</code></p> <p>Defined in: src/waldiez/models/Agent/UserProxy/UserProxyData.ts:33</p>"},{"location":"reference/react/classes/WaldiezAgentUserProxyData.html#parameters","title":"Parameters","text":""},{"location":"reference/react/classes/WaldiezAgentUserProxyData.html#props","title":"props","text":""},{"location":"reference/react/classes/WaldiezAgentUserProxyData.html#agentdefaultautoreply","title":"agentDefaultAutoReply","text":"<p><code>null</code> | <code>string</code></p>"},{"location":"reference/react/classes/WaldiezAgentUserProxyData.html#codeexecutionconfig","title":"codeExecutionConfig","text":"<p><code>WaldiezAgentCodeExecutionConfig</code></p>"},{"location":"reference/react/classes/WaldiezAgentUserProxyData.html#humaninputmode","title":"humanInputMode","text":"<p><code>WaldiezAgentHumanInputMode</code></p>"},{"location":"reference/react/classes/WaldiezAgentUserProxyData.html#maxconsecutiveautoreply","title":"maxConsecutiveAutoReply","text":"<p><code>null</code> | <code>number</code></p>"},{"location":"reference/react/classes/WaldiezAgentUserProxyData.html#modelids","title":"modelIds","text":"<p><code>string</code>[]</p>"},{"location":"reference/react/classes/WaldiezAgentUserProxyData.html#nestedchats","title":"nestedChats","text":"<p><code>WaldiezAgentNestedChat</code>[]</p>"},{"location":"reference/react/classes/WaldiezAgentUserProxyData.html#parentid","title":"parentId","text":"<p><code>null</code> | <code>string</code></p>"},{"location":"reference/react/classes/WaldiezAgentUserProxyData.html#skills","title":"skills","text":"<p><code>WaldiezAgentLinkedSkill</code>[]</p>"},{"location":"reference/react/classes/WaldiezAgentUserProxyData.html#systemmessage","title":"systemMessage","text":"<p><code>null</code> | <code>string</code></p>"},{"location":"reference/react/classes/WaldiezAgentUserProxyData.html#termination","title":"termination","text":"<p><code>WaldiezAgentTerminationMessageCheck</code></p>"},{"location":"reference/react/classes/WaldiezAgentUserProxyData.html#returns","title":"Returns","text":"<p><code>WaldiezAgentUserProxyData</code></p>"},{"location":"reference/react/classes/WaldiezAgentUserProxyData.html#overrides","title":"Overrides","text":"<p><code>WaldiezAgentData</code>.<code>constructor</code></p>"},{"location":"reference/react/classes/WaldiezAgentUserProxyData.html#properties","title":"Properties","text":""},{"location":"reference/react/classes/WaldiezAgentUserProxyData.html#agentdefaultautoreply_1","title":"agentDefaultAutoReply","text":"<p>agentDefaultAutoReply: <code>null</code> | <code>string</code></p> <p>Defined in: src/waldiez/models/Agent/Common/AgentData.ts:35</p>"},{"location":"reference/react/classes/WaldiezAgentUserProxyData.html#inherited-from","title":"Inherited from","text":"<p><code>WaldiezAgentData</code>.<code>agentDefaultAutoReply</code></p>"},{"location":"reference/react/classes/WaldiezAgentUserProxyData.html#codeexecutionconfig_1","title":"codeExecutionConfig","text":"<p>codeExecutionConfig: <code>WaldiezAgentCodeExecutionConfig</code></p> <p>Defined in: src/waldiez/models/Agent/Common/AgentData.ts:34</p>"},{"location":"reference/react/classes/WaldiezAgentUserProxyData.html#inherited-from_1","title":"Inherited from","text":"<p><code>WaldiezAgentData</code>.<code>codeExecutionConfig</code></p>"},{"location":"reference/react/classes/WaldiezAgentUserProxyData.html#humaninputmode_1","title":"humanInputMode","text":"<p>humanInputMode: <code>WaldiezAgentHumanInputMode</code></p> <p>Defined in: src/waldiez/models/Agent/Common/AgentData.ts:33</p>"},{"location":"reference/react/classes/WaldiezAgentUserProxyData.html#inherited-from_2","title":"Inherited from","text":"<p><code>WaldiezAgentData</code>.<code>humanInputMode</code></p>"},{"location":"reference/react/classes/WaldiezAgentUserProxyData.html#maxconsecutiveautoreply_1","title":"maxConsecutiveAutoReply","text":"<p>maxConsecutiveAutoReply: <code>null</code> | <code>number</code></p> <p>Defined in: src/waldiez/models/Agent/Common/AgentData.ts:36</p>"},{"location":"reference/react/classes/WaldiezAgentUserProxyData.html#inherited-from_3","title":"Inherited from","text":"<p><code>WaldiezAgentData</code>.<code>maxConsecutiveAutoReply</code></p>"},{"location":"reference/react/classes/WaldiezAgentUserProxyData.html#modelids_1","title":"modelIds","text":"<p>modelIds: <code>string</code>[]</p> <p>Defined in: src/waldiez/models/Agent/Common/AgentData.ts:39</p>"},{"location":"reference/react/classes/WaldiezAgentUserProxyData.html#inherited-from_4","title":"Inherited from","text":"<p><code>WaldiezAgentData</code>.<code>modelIds</code></p>"},{"location":"reference/react/classes/WaldiezAgentUserProxyData.html#nestedchats_1","title":"nestedChats","text":"<p>nestedChats: <code>WaldiezAgentNestedChat</code>[]</p> <p>Defined in: src/waldiez/models/Agent/Common/AgentData.ts:42</p>"},{"location":"reference/react/classes/WaldiezAgentUserProxyData.html#inherited-from_5","title":"Inherited from","text":"<p><code>WaldiezAgentData</code>.<code>nestedChats</code></p>"},{"location":"reference/react/classes/WaldiezAgentUserProxyData.html#parentid_1","title":"parentId","text":"<p>parentId: <code>null</code> | <code>string</code></p> <p>Defined in: src/waldiez/models/Agent/Common/AgentData.ts:41</p>"},{"location":"reference/react/classes/WaldiezAgentUserProxyData.html#inherited-from_6","title":"Inherited from","text":"<p><code>WaldiezAgentData</code>.<code>parentId</code></p>"},{"location":"reference/react/classes/WaldiezAgentUserProxyData.html#skills_1","title":"skills","text":"<p>skills: <code>WaldiezAgentLinkedSkill</code>[]</p> <p>Defined in: src/waldiez/models/Agent/Common/AgentData.ts:40</p>"},{"location":"reference/react/classes/WaldiezAgentUserProxyData.html#inherited-from_7","title":"Inherited from","text":"<p><code>WaldiezAgentData</code>.<code>skills</code></p>"},{"location":"reference/react/classes/WaldiezAgentUserProxyData.html#systemmessage_1","title":"systemMessage","text":"<p>systemMessage: <code>null</code> | <code>string</code></p> <p>Defined in: src/waldiez/models/Agent/Common/AgentData.ts:32</p>"},{"location":"reference/react/classes/WaldiezAgentUserProxyData.html#inherited-from_8","title":"Inherited from","text":"<p><code>WaldiezAgentData</code>.<code>systemMessage</code></p>"},{"location":"reference/react/classes/WaldiezAgentUserProxyData.html#termination_1","title":"termination","text":"<p>termination: <code>WaldiezAgentTerminationMessageCheck</code></p> <p>Defined in: src/waldiez/models/Agent/Common/AgentData.ts:37</p>"},{"location":"reference/react/classes/WaldiezAgentUserProxyData.html#inherited-from_9","title":"Inherited from","text":"<p><code>WaldiezAgentData</code>.<code>termination</code></p>"},{"location":"reference/react/classes/WaldiezChat.html","title":"WaldiezChat","text":"<p>@waldiez/react v0.4.5</p> <p>Defined in: src/waldiez/models/Chat/Chat.ts:15</p> <p>Waldiez Chat</p>"},{"location":"reference/react/classes/WaldiezChat.html#param","title":"Param","text":"<p>The ID</p>"},{"location":"reference/react/classes/WaldiezChat.html#param_1","title":"Param","text":"<p>The data</p>"},{"location":"reference/react/classes/WaldiezChat.html#param_2","title":"Param","text":"<p>Any additional properties</p>"},{"location":"reference/react/classes/WaldiezChat.html#see","title":"See","text":"<p>WaldiezChatData</p>"},{"location":"reference/react/classes/WaldiezChat.html#constructors","title":"Constructors","text":""},{"location":"reference/react/classes/WaldiezChat.html#constructor","title":"Constructor","text":"<p>new WaldiezChat(<code>props</code>): <code>WaldiezChat</code></p> <p>Defined in: src/waldiez/models/Chat/Chat.ts:20</p>"},{"location":"reference/react/classes/WaldiezChat.html#parameters","title":"Parameters","text":""},{"location":"reference/react/classes/WaldiezChat.html#props","title":"props","text":""},{"location":"reference/react/classes/WaldiezChat.html#data","title":"data","text":"<p><code>WaldiezChatData</code></p>"},{"location":"reference/react/classes/WaldiezChat.html#id","title":"id","text":"<p><code>string</code></p>"},{"location":"reference/react/classes/WaldiezChat.html#rest","title":"rest?","text":"<p>{[<code>key</code>: <code>string</code>]: <code>unknown</code>; }</p>"},{"location":"reference/react/classes/WaldiezChat.html#returns","title":"Returns","text":"<p><code>WaldiezChat</code></p>"},{"location":"reference/react/classes/WaldiezChat.html#properties","title":"Properties","text":""},{"location":"reference/react/classes/WaldiezChat.html#data_1","title":"data","text":"<p>data: <code>WaldiezChatData</code></p> <p>Defined in: src/waldiez/models/Chat/Chat.ts:17</p>"},{"location":"reference/react/classes/WaldiezChat.html#id_1","title":"id","text":"<p>id: <code>string</code></p> <p>Defined in: src/waldiez/models/Chat/Chat.ts:16</p>"},{"location":"reference/react/classes/WaldiezChat.html#rest_1","title":"rest","text":"<p>rest: <code>object</code></p> <p>Defined in: src/waldiez/models/Chat/Chat.ts:18</p>"},{"location":"reference/react/classes/WaldiezChat.html#index-signature","title":"Index Signature","text":"<p>[<code>key</code>: <code>string</code>]: <code>unknown</code></p>"},{"location":"reference/react/classes/WaldiezChat.html#accessors","title":"Accessors","text":""},{"location":"reference/react/classes/WaldiezChat.html#source","title":"source","text":""},{"location":"reference/react/classes/WaldiezChat.html#get-signature","title":"Get Signature","text":"<p>get source(): <code>string</code></p> <p>Defined in: src/waldiez/models/Chat/Chat.ts:35</p>"},{"location":"reference/react/classes/WaldiezChat.html#returns_1","title":"Returns","text":"<p><code>string</code></p>"},{"location":"reference/react/classes/WaldiezChat.html#target","title":"target","text":""},{"location":"reference/react/classes/WaldiezChat.html#get-signature_1","title":"Get Signature","text":"<p>get target(): <code>string</code></p> <p>Defined in: src/waldiez/models/Chat/Chat.ts:38</p>"},{"location":"reference/react/classes/WaldiezChat.html#returns_2","title":"Returns","text":"<p><code>string</code></p>"},{"location":"reference/react/classes/WaldiezChat.html#methods","title":"Methods","text":""},{"location":"reference/react/classes/WaldiezChat.html#create","title":"create()","text":"<p><code>static</code> create(<code>props</code>): <code>WaldiezChat</code></p> <p>Defined in: src/waldiez/models/Chat/Chat.ts:41</p>"},{"location":"reference/react/classes/WaldiezChat.html#parameters_1","title":"Parameters","text":""},{"location":"reference/react/classes/WaldiezChat.html#props_1","title":"props","text":""},{"location":"reference/react/classes/WaldiezChat.html#source_1","title":"source","text":"<p><code>string</code></p>"},{"location":"reference/react/classes/WaldiezChat.html#target_1","title":"target","text":"<p><code>string</code></p>"},{"location":"reference/react/classes/WaldiezChat.html#returns_3","title":"Returns","text":"<p><code>WaldiezChat</code></p>"},{"location":"reference/react/classes/WaldiezChatData.html","title":"WaldiezChatData","text":"<p>@waldiez/react v0.4.5</p> <p>Defined in: src/waldiez/models/Chat/ChatData.ts:36</p> <p>Waldiez Chat Data</p>"},{"location":"reference/react/classes/WaldiezChatData.html#param","title":"Param","text":"<p>The source</p>"},{"location":"reference/react/classes/WaldiezChatData.html#param_1","title":"Param","text":"<p>The target</p>"},{"location":"reference/react/classes/WaldiezChatData.html#param_2","title":"Param","text":"<p>The name of the chat</p>"},{"location":"reference/react/classes/WaldiezChatData.html#param_3","title":"Param","text":"<p>The description of the chat</p>"},{"location":"reference/react/classes/WaldiezChatData.html#param_4","title":"Param","text":"<p>Clear history</p>"},{"location":"reference/react/classes/WaldiezChatData.html#param_5","title":"Param","text":"<p>The maximum turns</p>"},{"location":"reference/react/classes/WaldiezChatData.html#param_6","title":"Param","text":"<p>The summary</p>"},{"location":"reference/react/classes/WaldiezChatData.html#param_7","title":"Param","text":"<p>The position</p>"},{"location":"reference/react/classes/WaldiezChatData.html#param_8","title":"Param","text":"<p>The order</p>"},{"location":"reference/react/classes/WaldiezChatData.html#param_9","title":"Param","text":"<p>The message</p>"},{"location":"reference/react/classes/WaldiezChatData.html#param_10","title":"Param","text":"<p>The nested chat</p>"},{"location":"reference/react/classes/WaldiezChatData.html#param_11","title":"Param","text":"<p>The prerequisites (chat ids) for async mode</p>"},{"location":"reference/react/classes/WaldiezChatData.html#param_12","title":"Param","text":"<p>The maximum rounds</p>"},{"location":"reference/react/classes/WaldiezChatData.html#param_13","title":"Param","text":"<p>The after work</p>"},{"location":"reference/react/classes/WaldiezChatData.html#param_14","title":"Param","text":"<p>The flow after work</p>"},{"location":"reference/react/classes/WaldiezChatData.html#param_15","title":"Param","text":"<p>The context variables</p>"},{"location":"reference/react/classes/WaldiezChatData.html#param_16","title":"Param","text":"<p>The available for handoff condition</p>"},{"location":"reference/react/classes/WaldiezChatData.html#param_17","title":"Param","text":"<p>The real source (overrides source)</p>"},{"location":"reference/react/classes/WaldiezChatData.html#param_18","title":"Param","text":"<p>The real target (overrides target)</p>"},{"location":"reference/react/classes/WaldiezChatData.html#see","title":"See","text":"<ul> <li>WaldiezMessage</li> <li>WaldiezChatSummary</li> <li>WaldiezNestedChat</li> <li>WaldiezSwarmAfterWork</li> <li>WaldiezSwarmOnConditionAvailable</li> </ul>"},{"location":"reference/react/classes/WaldiezChatData.html#constructors","title":"Constructors","text":""},{"location":"reference/react/classes/WaldiezChatData.html#constructor","title":"Constructor","text":"<p>new WaldiezChatData(<code>props</code>): <code>WaldiezChatData</code></p> <p>Defined in: src/waldiez/models/Chat/ChatData.ts:62</p>"},{"location":"reference/react/classes/WaldiezChatData.html#parameters","title":"Parameters","text":""},{"location":"reference/react/classes/WaldiezChatData.html#props","title":"props","text":""},{"location":"reference/react/classes/WaldiezChatData.html#afterwork","title":"afterWork","text":"<p><code>null</code> | <code>WaldiezSwarmAfterWork</code></p>"},{"location":"reference/react/classes/WaldiezChatData.html#available","title":"available","text":"<p><code>WaldiezSwarmOnConditionAvailable</code></p>"},{"location":"reference/react/classes/WaldiezChatData.html#clearhistory","title":"clearHistory","text":"<p><code>boolean</code></p>"},{"location":"reference/react/classes/WaldiezChatData.html#contextvariables","title":"contextVariables","text":"<p>{[<code>key</code>: <code>string</code>]: <code>string</code>; }</p>"},{"location":"reference/react/classes/WaldiezChatData.html#description","title":"description","text":"<p><code>string</code></p>"},{"location":"reference/react/classes/WaldiezChatData.html#flowafterwork","title":"flowAfterWork","text":"<p><code>null</code> | <code>WaldiezSwarmAfterWork</code></p>"},{"location":"reference/react/classes/WaldiezChatData.html#maxrounds","title":"maxRounds","text":"<p><code>number</code></p>"},{"location":"reference/react/classes/WaldiezChatData.html#maxturns","title":"maxTurns","text":"<p><code>null</code> | <code>number</code></p>"},{"location":"reference/react/classes/WaldiezChatData.html#message","title":"message","text":"<p><code>WaldiezMessage</code></p>"},{"location":"reference/react/classes/WaldiezChatData.html#name","title":"name","text":"<p><code>string</code></p>"},{"location":"reference/react/classes/WaldiezChatData.html#nestedchat","title":"nestedChat","text":"<p><code>WaldiezNestedChat</code></p>"},{"location":"reference/react/classes/WaldiezChatData.html#order","title":"order","text":"<p><code>number</code></p>"},{"location":"reference/react/classes/WaldiezChatData.html#position","title":"position","text":"<p><code>number</code></p>"},{"location":"reference/react/classes/WaldiezChatData.html#prerequisites","title":"prerequisites","text":"<p><code>string</code>[]</p>"},{"location":"reference/react/classes/WaldiezChatData.html#realsource","title":"realSource","text":"<p><code>null</code> | <code>string</code></p>"},{"location":"reference/react/classes/WaldiezChatData.html#realtarget","title":"realTarget","text":"<p><code>null</code> | <code>string</code></p>"},{"location":"reference/react/classes/WaldiezChatData.html#source","title":"source","text":"<p><code>string</code></p>"},{"location":"reference/react/classes/WaldiezChatData.html#summary","title":"summary","text":"<p><code>WaldiezChatSummary</code></p>"},{"location":"reference/react/classes/WaldiezChatData.html#target","title":"target","text":"<p><code>string</code></p>"},{"location":"reference/react/classes/WaldiezChatData.html#returns","title":"Returns","text":"<p><code>WaldiezChatData</code></p>"},{"location":"reference/react/classes/WaldiezChatData.html#properties","title":"Properties","text":""},{"location":"reference/react/classes/WaldiezChatData.html#afterwork_1","title":"afterWork","text":"<p>afterWork: <code>null</code> | <code>WaldiezSwarmAfterWork</code></p> <p>Defined in: src/waldiez/models/Chat/ChatData.ts:53</p>"},{"location":"reference/react/classes/WaldiezChatData.html#available_1","title":"available","text":"<p>available: <code>WaldiezSwarmOnConditionAvailable</code></p> <p>Defined in: src/waldiez/models/Chat/ChatData.ts:56</p>"},{"location":"reference/react/classes/WaldiezChatData.html#clearhistory_1","title":"clearHistory","text":"<p>clearHistory: <code>boolean</code></p> <p>Defined in: src/waldiez/models/Chat/ChatData.ts:43</p>"},{"location":"reference/react/classes/WaldiezChatData.html#contextvariables_1","title":"contextVariables","text":"<p>contextVariables: <code>object</code> = <code>{}</code></p> <p>Defined in: src/waldiez/models/Chat/ChatData.ts:55</p>"},{"location":"reference/react/classes/WaldiezChatData.html#index-signature","title":"Index Signature","text":"<p>[<code>key</code>: <code>string</code>]: <code>string</code></p>"},{"location":"reference/react/classes/WaldiezChatData.html#description_1","title":"description","text":"<p>description: <code>string</code></p> <p>Defined in: src/waldiez/models/Chat/ChatData.ts:40</p>"},{"location":"reference/react/classes/WaldiezChatData.html#flowafterwork_1","title":"flowAfterWork","text":"<p>flowAfterWork: <code>null</code> | <code>WaldiezSwarmAfterWork</code></p> <p>Defined in: src/waldiez/models/Chat/ChatData.ts:54</p>"},{"location":"reference/react/classes/WaldiezChatData.html#maxrounds_1","title":"maxRounds","text":"<p>maxRounds: <code>number</code></p> <p>Defined in: src/waldiez/models/Chat/ChatData.ts:52</p>"},{"location":"reference/react/classes/WaldiezChatData.html#maxturns_1","title":"maxTurns","text":"<p>maxTurns: <code>null</code> | <code>number</code></p> <p>Defined in: src/waldiez/models/Chat/ChatData.ts:45</p>"},{"location":"reference/react/classes/WaldiezChatData.html#message_1","title":"message","text":"<p>message: <code>WaldiezMessage</code></p> <p>Defined in: src/waldiez/models/Chat/ChatData.ts:44</p>"},{"location":"reference/react/classes/WaldiezChatData.html#name_1","title":"name","text":"<p>name: <code>string</code></p> <p>Defined in: src/waldiez/models/Chat/ChatData.ts:39</p>"},{"location":"reference/react/classes/WaldiezChatData.html#nestedchat_1","title":"nestedChat","text":"<p>nestedChat: <code>object</code></p> <p>Defined in: src/waldiez/models/Chat/ChatData.ts:47</p>"},{"location":"reference/react/classes/WaldiezChatData.html#message_2","title":"message","text":"<p>message: <code>null</code> | <code>WaldiezMessage</code></p>"},{"location":"reference/react/classes/WaldiezChatData.html#reply","title":"reply","text":"<p>reply: <code>null</code> | <code>WaldiezMessage</code></p>"},{"location":"reference/react/classes/WaldiezChatData.html#order_1","title":"order","text":"<p>order: <code>number</code></p> <p>Defined in: src/waldiez/models/Chat/ChatData.ts:42</p>"},{"location":"reference/react/classes/WaldiezChatData.html#position_1","title":"position","text":"<p>position: <code>number</code></p> <p>Defined in: src/waldiez/models/Chat/ChatData.ts:41</p>"},{"location":"reference/react/classes/WaldiezChatData.html#prerequisites_1","title":"prerequisites","text":"<p>prerequisites: <code>string</code>[] = <code>[]</code></p> <p>Defined in: src/waldiez/models/Chat/ChatData.ts:51</p>"},{"location":"reference/react/classes/WaldiezChatData.html#realsource_1","title":"realSource","text":"<p>realSource: <code>null</code> | <code>string</code> = <code>null</code></p> <p>Defined in: src/waldiez/models/Chat/ChatData.ts:60</p>"},{"location":"reference/react/classes/WaldiezChatData.html#realtarget_1","title":"realTarget","text":"<p>realTarget: <code>null</code> | <code>string</code> = <code>null</code></p> <p>Defined in: src/waldiez/models/Chat/ChatData.ts:61</p>"},{"location":"reference/react/classes/WaldiezChatData.html#source_1","title":"source","text":"<p>source: <code>string</code></p> <p>Defined in: src/waldiez/models/Chat/ChatData.ts:37</p>"},{"location":"reference/react/classes/WaldiezChatData.html#summary_1","title":"summary","text":"<p>summary: <code>WaldiezChatSummary</code></p> <p>Defined in: src/waldiez/models/Chat/ChatData.ts:46</p>"},{"location":"reference/react/classes/WaldiezChatData.html#target_1","title":"target","text":"<p>target: <code>string</code></p> <p>Defined in: src/waldiez/models/Chat/ChatData.ts:38</p>"},{"location":"reference/react/classes/WaldiezFlow.html","title":"WaldiezFlow","text":"<p>@waldiez/react v0.4.5</p> <p>Defined in: src/waldiez/models/Flow/Flow.ts:24</p> <p>Waldiez Flow</p>"},{"location":"reference/react/classes/WaldiezFlow.html#param","title":"Param","text":"<p>The type (flow)</p>"},{"location":"reference/react/classes/WaldiezFlow.html#param_1","title":"Param","text":"<p>The ID</p>"},{"location":"reference/react/classes/WaldiezFlow.html#param_2","title":"Param","text":"<p>The name of the flow</p>"},{"location":"reference/react/classes/WaldiezFlow.html#param_3","title":"Param","text":"<p>The description of the flow</p>"},{"location":"reference/react/classes/WaldiezFlow.html#param_4","title":"Param","text":"<p>The tags</p>"},{"location":"reference/react/classes/WaldiezFlow.html#param_5","title":"Param","text":"<p>The requirements</p>"},{"location":"reference/react/classes/WaldiezFlow.html#param_6","title":"Param","text":"<p>The data</p>"},{"location":"reference/react/classes/WaldiezFlow.html#param_7","title":"Param","text":"<p>The storage ID</p>"},{"location":"reference/react/classes/WaldiezFlow.html#param_8","title":"Param","text":"<p>The created at date</p>"},{"location":"reference/react/classes/WaldiezFlow.html#param_9","title":"Param","text":"<p>The updated at date</p>"},{"location":"reference/react/classes/WaldiezFlow.html#param_10","title":"Param","text":"<p>Any additional properties</p>"},{"location":"reference/react/classes/WaldiezFlow.html#see","title":"See","text":"<p>WaldiezFlowData</p>"},{"location":"reference/react/classes/WaldiezFlow.html#constructors","title":"Constructors","text":""},{"location":"reference/react/classes/WaldiezFlow.html#constructor","title":"Constructor","text":"<p>new WaldiezFlow(<code>props</code>): <code>WaldiezFlow</code></p> <p>Defined in: src/waldiez/models/Flow/Flow.ts:37</p>"},{"location":"reference/react/classes/WaldiezFlow.html#parameters","title":"Parameters","text":""},{"location":"reference/react/classes/WaldiezFlow.html#props","title":"props","text":""},{"location":"reference/react/classes/WaldiezFlow.html#createdat","title":"createdAt","text":"<p><code>string</code></p>"},{"location":"reference/react/classes/WaldiezFlow.html#data","title":"data","text":"<p><code>WaldiezFlowData</code></p>"},{"location":"reference/react/classes/WaldiezFlow.html#description","title":"description","text":"<p><code>string</code></p>"},{"location":"reference/react/classes/WaldiezFlow.html#id","title":"id","text":"<p><code>string</code></p>"},{"location":"reference/react/classes/WaldiezFlow.html#name","title":"name","text":"<p><code>string</code></p>"},{"location":"reference/react/classes/WaldiezFlow.html#requirements","title":"requirements","text":"<p><code>string</code>[]</p>"},{"location":"reference/react/classes/WaldiezFlow.html#rest","title":"rest?","text":"<p>{[<code>key</code>: <code>string</code>]: <code>unknown</code>; }</p>"},{"location":"reference/react/classes/WaldiezFlow.html#storageid","title":"storageId","text":"<p><code>string</code></p>"},{"location":"reference/react/classes/WaldiezFlow.html#tags","title":"tags","text":"<p><code>string</code>[]</p>"},{"location":"reference/react/classes/WaldiezFlow.html#updatedat","title":"updatedAt","text":"<p><code>string</code></p>"},{"location":"reference/react/classes/WaldiezFlow.html#returns","title":"Returns","text":"<p><code>WaldiezFlow</code></p>"},{"location":"reference/react/classes/WaldiezFlow.html#properties","title":"Properties","text":""},{"location":"reference/react/classes/WaldiezFlow.html#createdat_1","title":"createdAt","text":"<p>createdAt: <code>string</code></p> <p>Defined in: src/waldiez/models/Flow/Flow.ts:33</p>"},{"location":"reference/react/classes/WaldiezFlow.html#data_1","title":"data","text":"<p>data: <code>WaldiezFlowData</code></p> <p>Defined in: src/waldiez/models/Flow/Flow.ts:31</p>"},{"location":"reference/react/classes/WaldiezFlow.html#description_1","title":"description","text":"<p>description: <code>string</code></p> <p>Defined in: src/waldiez/models/Flow/Flow.ts:28</p>"},{"location":"reference/react/classes/WaldiezFlow.html#id_1","title":"id","text":"<p>id: <code>string</code></p> <p>Defined in: src/waldiez/models/Flow/Flow.ts:26</p>"},{"location":"reference/react/classes/WaldiezFlow.html#name_1","title":"name","text":"<p>name: <code>string</code></p> <p>Defined in: src/waldiez/models/Flow/Flow.ts:27</p>"},{"location":"reference/react/classes/WaldiezFlow.html#requirements_1","title":"requirements","text":"<p>requirements: <code>string</code>[]</p> <p>Defined in: src/waldiez/models/Flow/Flow.ts:30</p>"},{"location":"reference/react/classes/WaldiezFlow.html#rest_1","title":"rest?","text":"<p><code>optional</code> rest: <code>object</code> = <code>{}</code></p> <p>Defined in: src/waldiez/models/Flow/Flow.ts:35</p>"},{"location":"reference/react/classes/WaldiezFlow.html#index-signature","title":"Index Signature","text":"<p>[<code>key</code>: <code>string</code>]: <code>unknown</code></p>"},{"location":"reference/react/classes/WaldiezFlow.html#storageid_1","title":"storageId","text":"<p>storageId: <code>string</code></p> <p>Defined in: src/waldiez/models/Flow/Flow.ts:32</p>"},{"location":"reference/react/classes/WaldiezFlow.html#tags_1","title":"tags","text":"<p>tags: <code>string</code>[]</p> <p>Defined in: src/waldiez/models/Flow/Flow.ts:29</p>"},{"location":"reference/react/classes/WaldiezFlow.html#type","title":"type","text":"<p>type: <code>string</code> = <code>\"flow\"</code></p> <p>Defined in: src/waldiez/models/Flow/Flow.ts:25</p>"},{"location":"reference/react/classes/WaldiezFlow.html#updatedat_1","title":"updatedAt","text":"<p>updatedAt: <code>string</code></p> <p>Defined in: src/waldiez/models/Flow/Flow.ts:34</p>"},{"location":"reference/react/classes/WaldiezFlowData.html","title":"WaldiezFlowData","text":"<p>@waldiez/react v0.4.5</p> <p>Defined in: src/waldiez/models/Flow/FlowData.ts:41</p> <p>Waldiez Flow Data</p>"},{"location":"reference/react/classes/WaldiezFlowData.html#param","title":"Param","text":"<p>The nodes</p>"},{"location":"reference/react/classes/WaldiezFlowData.html#param_1","title":"Param","text":"<p>The edges</p>"},{"location":"reference/react/classes/WaldiezFlowData.html#param_2","title":"Param","text":"<p>The agents</p>"},{"location":"reference/react/classes/WaldiezFlowData.html#param_3","title":"Param","text":"<p>The models</p>"},{"location":"reference/react/classes/WaldiezFlowData.html#param_4","title":"Param","text":"<p>The skills</p>"},{"location":"reference/react/classes/WaldiezFlowData.html#param_5","title":"Param","text":"<p>The chats</p>"},{"location":"reference/react/classes/WaldiezFlowData.html#param_6","title":"Param","text":"<p>Is async</p>"},{"location":"reference/react/classes/WaldiezFlowData.html#param_7","title":"Param","text":"<p>The cache seed</p>"},{"location":"reference/react/classes/WaldiezFlowData.html#param_8","title":"Param","text":"<p>The viewport</p>"},{"location":"reference/react/classes/WaldiezFlowData.html#see","title":"See","text":"<ul> <li>WaldiezAgentUserProxy</li> <li>WaldiezAgentAssistant</li> <li>WaldiezAgentGroupManager</li> <li>WaldiezAgentRagUser</li> <li>WaldiezAgentSwarm</li> <li>WaldiezModel</li> <li>WaldiezSkill</li> <li>WaldiezChat</li> <li>WaldiezFlowData</li> </ul>"},{"location":"reference/react/classes/WaldiezFlowData.html#constructors","title":"Constructors","text":""},{"location":"reference/react/classes/WaldiezFlowData.html#constructor","title":"Constructor","text":"<p>new WaldiezFlowData(<code>props</code>): <code>WaldiezFlowData</code></p> <p>Defined in: src/waldiez/models/Flow/FlowData.ts:60</p>"},{"location":"reference/react/classes/WaldiezFlowData.html#parameters","title":"Parameters","text":""},{"location":"reference/react/classes/WaldiezFlowData.html#props","title":"props","text":""},{"location":"reference/react/classes/WaldiezFlowData.html#agents","title":"agents","text":"<p>{ <code>assistants</code>: <code>WaldiezAgentAssistant</code>[]; <code>captain_agents</code>: <code>WaldiezAgentCaptain</code>[]; <code>managers</code>: <code>WaldiezAgentGroupManager</code>[]; <code>rag_users</code>: <code>WaldiezAgentRagUser</code>[]; <code>reasoning_agents</code>: <code>WaldiezAgentReasoning</code>[]; <code>swarm_agents</code>: <code>WaldiezAgentSwarm</code>[]; <code>users</code>: <code>WaldiezAgentUserProxy</code>[]; }</p>"},{"location":"reference/react/classes/WaldiezFlowData.html#agentsassistants","title":"agents.assistants","text":"<p><code>WaldiezAgentAssistant</code>[]</p>"},{"location":"reference/react/classes/WaldiezFlowData.html#agentscaptain_agents","title":"agents.captain_agents","text":"<p><code>WaldiezAgentCaptain</code>[]</p>"},{"location":"reference/react/classes/WaldiezFlowData.html#agentsmanagers","title":"agents.managers","text":"<p><code>WaldiezAgentGroupManager</code>[]</p>"},{"location":"reference/react/classes/WaldiezFlowData.html#agentsrag_users","title":"agents.rag_users","text":"<p><code>WaldiezAgentRagUser</code>[]</p>"},{"location":"reference/react/classes/WaldiezFlowData.html#agentsreasoning_agents","title":"agents.reasoning_agents","text":"<p><code>WaldiezAgentReasoning</code>[]</p>"},{"location":"reference/react/classes/WaldiezFlowData.html#agentsswarm_agents","title":"agents.swarm_agents","text":"<p><code>WaldiezAgentSwarm</code>[]</p>"},{"location":"reference/react/classes/WaldiezFlowData.html#agentsusers","title":"agents.users","text":"<p><code>WaldiezAgentUserProxy</code>[]</p>"},{"location":"reference/react/classes/WaldiezFlowData.html#cacheseed","title":"cacheSeed?","text":"<p><code>null</code> | <code>number</code></p>"},{"location":"reference/react/classes/WaldiezFlowData.html#chats","title":"chats","text":"<p><code>WaldiezChat</code>[]</p>"},{"location":"reference/react/classes/WaldiezFlowData.html#edges","title":"edges","text":"<p><code>Edge</code>[]</p>"},{"location":"reference/react/classes/WaldiezFlowData.html#isasync","title":"isAsync?","text":"<p><code>boolean</code></p>"},{"location":"reference/react/classes/WaldiezFlowData.html#models","title":"models","text":"<p><code>WaldiezModel</code>[]</p>"},{"location":"reference/react/classes/WaldiezFlowData.html#nodes","title":"nodes","text":"<p><code>Node</code>[]</p>"},{"location":"reference/react/classes/WaldiezFlowData.html#skills","title":"skills","text":"<p><code>WaldiezSkill</code>[]</p>"},{"location":"reference/react/classes/WaldiezFlowData.html#viewport","title":"viewport","text":"<p><code>Viewport</code></p>"},{"location":"reference/react/classes/WaldiezFlowData.html#returns","title":"Returns","text":"<p><code>WaldiezFlowData</code></p>"},{"location":"reference/react/classes/WaldiezFlowData.html#properties","title":"Properties","text":""},{"location":"reference/react/classes/WaldiezFlowData.html#agents_1","title":"agents","text":"<p>agents: <code>object</code></p> <p>Defined in: src/waldiez/models/Flow/FlowData.ts:45</p>"},{"location":"reference/react/classes/WaldiezFlowData.html#assistants","title":"assistants","text":"<p>assistants: <code>WaldiezAgentAssistant</code>[]</p>"},{"location":"reference/react/classes/WaldiezFlowData.html#captain_agents","title":"captain_agents","text":"<p>captain_agents: <code>WaldiezAgentCaptain</code>[]</p>"},{"location":"reference/react/classes/WaldiezFlowData.html#managers","title":"managers","text":"<p>managers: <code>WaldiezAgentGroupManager</code>[]</p>"},{"location":"reference/react/classes/WaldiezFlowData.html#rag_users","title":"rag_users","text":"<p>rag_users: <code>WaldiezAgentRagUser</code>[]</p>"},{"location":"reference/react/classes/WaldiezFlowData.html#reasoning_agents","title":"reasoning_agents","text":"<p>reasoning_agents: <code>WaldiezAgentReasoning</code>[]</p>"},{"location":"reference/react/classes/WaldiezFlowData.html#swarm_agents","title":"swarm_agents","text":"<p>swarm_agents: <code>WaldiezAgentSwarm</code>[]</p>"},{"location":"reference/react/classes/WaldiezFlowData.html#users","title":"users","text":"<p>users: <code>WaldiezAgentUserProxy</code>[]</p>"},{"location":"reference/react/classes/WaldiezFlowData.html#cacheseed_1","title":"cacheSeed?","text":"<p><code>optional</code> cacheSeed: <code>null</code> | <code>number</code> = <code>41</code></p> <p>Defined in: src/waldiez/models/Flow/FlowData.ts:58</p>"},{"location":"reference/react/classes/WaldiezFlowData.html#chats_1","title":"chats","text":"<p>chats: <code>WaldiezChat</code>[]</p> <p>Defined in: src/waldiez/models/Flow/FlowData.ts:56</p>"},{"location":"reference/react/classes/WaldiezFlowData.html#edges_1","title":"edges","text":"<p>edges: <code>Edge</code>[]</p> <p>Defined in: src/waldiez/models/Flow/FlowData.ts:43</p>"},{"location":"reference/react/classes/WaldiezFlowData.html#isasync_1","title":"isAsync?","text":"<p><code>optional</code> isAsync: <code>boolean</code> = <code>false</code></p> <p>Defined in: src/waldiez/models/Flow/FlowData.ts:57</p>"},{"location":"reference/react/classes/WaldiezFlowData.html#models_1","title":"models","text":"<p>models: <code>WaldiezModel</code>[]</p> <p>Defined in: src/waldiez/models/Flow/FlowData.ts:54</p>"},{"location":"reference/react/classes/WaldiezFlowData.html#nodes_1","title":"nodes","text":"<p>nodes: <code>Node</code>[]</p> <p>Defined in: src/waldiez/models/Flow/FlowData.ts:42</p>"},{"location":"reference/react/classes/WaldiezFlowData.html#skills_1","title":"skills","text":"<p>skills: <code>WaldiezSkill</code>[]</p> <p>Defined in: src/waldiez/models/Flow/FlowData.ts:55</p>"},{"location":"reference/react/classes/WaldiezFlowData.html#viewport_1","title":"viewport","text":"<p>viewport: <code>Viewport</code></p> <p>Defined in: src/waldiez/models/Flow/FlowData.ts:44</p>"},{"location":"reference/react/classes/WaldiezMessage.html","title":"WaldiezMessage","text":"<p>@waldiez/react v0.4.5</p> <p>Defined in: src/waldiez/models/Chat/Message.ts:7</p>"},{"location":"reference/react/classes/WaldiezMessage.html#constructors","title":"Constructors","text":""},{"location":"reference/react/classes/WaldiezMessage.html#constructor","title":"Constructor","text":"<p>new WaldiezMessage(<code>props</code>): <code>WaldiezMessage</code></p> <p>Defined in: src/waldiez/models/Chat/Message.ts:13</p>"},{"location":"reference/react/classes/WaldiezMessage.html#parameters","title":"Parameters","text":""},{"location":"reference/react/classes/WaldiezMessage.html#props","title":"props","text":""},{"location":"reference/react/classes/WaldiezMessage.html#content","title":"content","text":"<p><code>null</code> | <code>string</code></p>"},{"location":"reference/react/classes/WaldiezMessage.html#context","title":"context?","text":"<p>{[<code>key</code>: <code>string</code>]: <code>string</code>; }</p>"},{"location":"reference/react/classes/WaldiezMessage.html#type","title":"type","text":"<p><code>WaldiezMessageType</code></p>"},{"location":"reference/react/classes/WaldiezMessage.html#use_carryover","title":"use_carryover","text":"<p><code>boolean</code></p>"},{"location":"reference/react/classes/WaldiezMessage.html#returns","title":"Returns","text":"<p><code>WaldiezMessage</code></p>"},{"location":"reference/react/classes/WaldiezMessage.html#properties","title":"Properties","text":""},{"location":"reference/react/classes/WaldiezMessage.html#content_1","title":"content","text":"<p>content: <code>null</code> | <code>string</code></p> <p>Defined in: src/waldiez/models/Chat/Message.ts:9</p>"},{"location":"reference/react/classes/WaldiezMessage.html#context_1","title":"context","text":"<p>context: <code>object</code></p> <p>Defined in: src/waldiez/models/Chat/Message.ts:11</p>"},{"location":"reference/react/classes/WaldiezMessage.html#index-signature","title":"Index Signature","text":"<p>[<code>key</code>: <code>string</code>]: <code>string</code></p>"},{"location":"reference/react/classes/WaldiezMessage.html#type_1","title":"type","text":"<p>type: <code>WaldiezMessageType</code></p> <p>Defined in: src/waldiez/models/Chat/Message.ts:8</p>"},{"location":"reference/react/classes/WaldiezMessage.html#use_carryover_1","title":"use_carryover","text":"<p>use_carryover: <code>boolean</code></p> <p>Defined in: src/waldiez/models/Chat/Message.ts:10</p>"},{"location":"reference/react/classes/WaldiezModel.html","title":"WaldiezModel","text":"<p>@waldiez/react v0.4.5</p> <p>Defined in: src/waldiez/models/Model/Model.ts:22</p> <p>Waldiez Model</p>"},{"location":"reference/react/classes/WaldiezModel.html#param","title":"Param","text":"<p>The type (model)</p>"},{"location":"reference/react/classes/WaldiezModel.html#param_1","title":"Param","text":"<p>The ID</p>"},{"location":"reference/react/classes/WaldiezModel.html#param_2","title":"Param","text":"<p>The name of the model</p>"},{"location":"reference/react/classes/WaldiezModel.html#param_3","title":"Param","text":"<p>The description of the model</p>"},{"location":"reference/react/classes/WaldiezModel.html#param_4","title":"Param","text":"<p>The tags</p>"},{"location":"reference/react/classes/WaldiezModel.html#param_5","title":"Param","text":"<p>The requirements</p>"},{"location":"reference/react/classes/WaldiezModel.html#param_6","title":"Param","text":"<p>The created at date</p>"},{"location":"reference/react/classes/WaldiezModel.html#param_7","title":"Param","text":"<p>The updated at date</p>"},{"location":"reference/react/classes/WaldiezModel.html#param_8","title":"Param","text":"<p>The data</p>"},{"location":"reference/react/classes/WaldiezModel.html#param_9","title":"Param","text":"<p>Any additional properties</p>"},{"location":"reference/react/classes/WaldiezModel.html#see","title":"See","text":"<p>WaldiezModelData</p>"},{"location":"reference/react/classes/WaldiezModel.html#constructors","title":"Constructors","text":""},{"location":"reference/react/classes/WaldiezModel.html#constructor","title":"Constructor","text":"<p>new WaldiezModel(<code>props</code>): <code>WaldiezModel</code></p> <p>Defined in: src/waldiez/models/Model/Model.ts:34</p>"},{"location":"reference/react/classes/WaldiezModel.html#parameters","title":"Parameters","text":""},{"location":"reference/react/classes/WaldiezModel.html#props","title":"props","text":""},{"location":"reference/react/classes/WaldiezModel.html#createdat","title":"createdAt","text":"<p><code>string</code></p>"},{"location":"reference/react/classes/WaldiezModel.html#data","title":"data","text":"<p><code>WaldiezModelData</code></p>"},{"location":"reference/react/classes/WaldiezModel.html#description","title":"description","text":"<p><code>string</code></p>"},{"location":"reference/react/classes/WaldiezModel.html#id","title":"id","text":"<p><code>string</code></p>"},{"location":"reference/react/classes/WaldiezModel.html#name","title":"name","text":"<p><code>string</code></p>"},{"location":"reference/react/classes/WaldiezModel.html#requirements","title":"requirements","text":"<p><code>string</code>[]</p>"},{"location":"reference/react/classes/WaldiezModel.html#rest","title":"rest?","text":"<p>{[<code>key</code>: <code>string</code>]: <code>unknown</code>; }</p>"},{"location":"reference/react/classes/WaldiezModel.html#tags","title":"tags","text":"<p><code>string</code>[]</p>"},{"location":"reference/react/classes/WaldiezModel.html#updatedat","title":"updatedAt","text":"<p><code>string</code></p>"},{"location":"reference/react/classes/WaldiezModel.html#returns","title":"Returns","text":"<p><code>WaldiezModel</code></p>"},{"location":"reference/react/classes/WaldiezModel.html#properties","title":"Properties","text":""},{"location":"reference/react/classes/WaldiezModel.html#createdat_1","title":"createdAt","text":"<p>createdAt: <code>string</code></p> <p>Defined in: src/waldiez/models/Model/Model.ts:29</p>"},{"location":"reference/react/classes/WaldiezModel.html#data_1","title":"data","text":"<p>data: <code>WaldiezModelData</code></p> <p>Defined in: src/waldiez/models/Model/Model.ts:31</p>"},{"location":"reference/react/classes/WaldiezModel.html#description_1","title":"description","text":"<p>description: <code>string</code></p> <p>Defined in: src/waldiez/models/Model/Model.ts:26</p>"},{"location":"reference/react/classes/WaldiezModel.html#id_1","title":"id","text":"<p>id: <code>string</code></p> <p>Defined in: src/waldiez/models/Model/Model.ts:24</p>"},{"location":"reference/react/classes/WaldiezModel.html#name_1","title":"name","text":"<p>name: <code>string</code></p> <p>Defined in: src/waldiez/models/Model/Model.ts:25</p>"},{"location":"reference/react/classes/WaldiezModel.html#requirements_1","title":"requirements","text":"<p>requirements: <code>string</code>[]</p> <p>Defined in: src/waldiez/models/Model/Model.ts:28</p>"},{"location":"reference/react/classes/WaldiezModel.html#rest_1","title":"rest?","text":"<p><code>optional</code> rest: <code>object</code> = <code>{}</code></p> <p>Defined in: src/waldiez/models/Model/Model.ts:32</p>"},{"location":"reference/react/classes/WaldiezModel.html#index-signature","title":"Index Signature","text":"<p>[<code>key</code>: <code>string</code>]: <code>unknown</code></p>"},{"location":"reference/react/classes/WaldiezModel.html#tags_1","title":"tags","text":"<p>tags: <code>string</code>[]</p> <p>Defined in: src/waldiez/models/Model/Model.ts:27</p>"},{"location":"reference/react/classes/WaldiezModel.html#type","title":"type","text":"<p>type: <code>string</code> = <code>\"model\"</code></p> <p>Defined in: src/waldiez/models/Model/Model.ts:23</p>"},{"location":"reference/react/classes/WaldiezModel.html#updatedat_1","title":"updatedAt","text":"<p>updatedAt: <code>string</code></p> <p>Defined in: src/waldiez/models/Model/Model.ts:30</p>"},{"location":"reference/react/classes/WaldiezModel.html#methods","title":"Methods","text":""},{"location":"reference/react/classes/WaldiezModel.html#create","title":"create()","text":"<p><code>static</code> create(): <code>WaldiezModel</code></p> <p>Defined in: src/waldiez/models/Model/Model.ts:56</p>"},{"location":"reference/react/classes/WaldiezModel.html#returns_1","title":"Returns","text":"<p><code>WaldiezModel</code></p>"},{"location":"reference/react/classes/WaldiezModelData.html","title":"WaldiezModelData","text":"<p>@waldiez/react v0.4.5</p> <p>Defined in: src/waldiez/models/Model/ModelData.ts:19</p> <p>ModelData</p>"},{"location":"reference/react/classes/WaldiezModelData.html#param","title":"Param","text":"<p>The base URL of the API</p>"},{"location":"reference/react/classes/WaldiezModelData.html#param_1","title":"Param","text":"<p>The API key</p>"},{"location":"reference/react/classes/WaldiezModelData.html#param_2","title":"Param","text":"<p>The type of the API</p>"},{"location":"reference/react/classes/WaldiezModelData.html#param_3","title":"Param","text":"<p>The version of the API</p>"},{"location":"reference/react/classes/WaldiezModelData.html#param_4","title":"Param","text":"<p>The temperature</p>"},{"location":"reference/react/classes/WaldiezModelData.html#param_5","title":"Param","text":"<p>The top P</p>"},{"location":"reference/react/classes/WaldiezModelData.html#param_6","title":"Param","text":"<p>The max tokens</p>"},{"location":"reference/react/classes/WaldiezModelData.html#param_7","title":"Param","text":"<p>The default headers</p>"},{"location":"reference/react/classes/WaldiezModelData.html#param_8","title":"Param","text":"<p>The price</p>"},{"location":"reference/react/classes/WaldiezModelData.html#constructors","title":"Constructors","text":""},{"location":"reference/react/classes/WaldiezModelData.html#constructor","title":"Constructor","text":"<p>new WaldiezModelData(<code>props</code>): <code>WaldiezModelData</code></p> <p>Defined in: src/waldiez/models/Model/ModelData.ts:30</p>"},{"location":"reference/react/classes/WaldiezModelData.html#parameters","title":"Parameters","text":""},{"location":"reference/react/classes/WaldiezModelData.html#props","title":"props","text":""},{"location":"reference/react/classes/WaldiezModelData.html#apikey","title":"apiKey","text":"<p><code>null</code> | <code>string</code></p>"},{"location":"reference/react/classes/WaldiezModelData.html#apitype","title":"apiType","text":"<p><code>WaldiezModelAPIType</code></p>"},{"location":"reference/react/classes/WaldiezModelData.html#apiversion","title":"apiVersion","text":"<p><code>null</code> | <code>string</code></p>"},{"location":"reference/react/classes/WaldiezModelData.html#baseurl","title":"baseUrl","text":"<p><code>null</code> | <code>string</code></p>"},{"location":"reference/react/classes/WaldiezModelData.html#defaultheaders","title":"defaultHeaders","text":"<p>{[<code>key</code>: <code>string</code>]: <code>string</code>; }</p>"},{"location":"reference/react/classes/WaldiezModelData.html#maxtokens","title":"maxTokens","text":"<p><code>null</code> | <code>number</code></p>"},{"location":"reference/react/classes/WaldiezModelData.html#price","title":"price","text":"<p><code>WaldiezModelPrice</code></p>"},{"location":"reference/react/classes/WaldiezModelData.html#temperature","title":"temperature","text":"<p><code>null</code> | <code>number</code></p>"},{"location":"reference/react/classes/WaldiezModelData.html#topp","title":"topP","text":"<p><code>null</code> | <code>number</code></p>"},{"location":"reference/react/classes/WaldiezModelData.html#returns","title":"Returns","text":"<p><code>WaldiezModelData</code></p>"},{"location":"reference/react/classes/WaldiezModelData.html#properties","title":"Properties","text":""},{"location":"reference/react/classes/WaldiezModelData.html#apikey_1","title":"apiKey","text":"<p>apiKey: <code>null</code> | <code>string</code></p> <p>Defined in: src/waldiez/models/Model/ModelData.ts:21</p>"},{"location":"reference/react/classes/WaldiezModelData.html#apitype_1","title":"apiType","text":"<p>apiType: <code>WaldiezModelAPIType</code></p> <p>Defined in: src/waldiez/models/Model/ModelData.ts:22</p>"},{"location":"reference/react/classes/WaldiezModelData.html#apiversion_1","title":"apiVersion","text":"<p>apiVersion: <code>null</code> | <code>string</code></p> <p>Defined in: src/waldiez/models/Model/ModelData.ts:23</p>"},{"location":"reference/react/classes/WaldiezModelData.html#baseurl_1","title":"baseUrl","text":"<p>baseUrl: <code>null</code> | <code>string</code></p> <p>Defined in: src/waldiez/models/Model/ModelData.ts:20</p>"},{"location":"reference/react/classes/WaldiezModelData.html#defaultheaders_1","title":"defaultHeaders","text":"<p>defaultHeaders: <code>object</code></p> <p>Defined in: src/waldiez/models/Model/ModelData.ts:27</p>"},{"location":"reference/react/classes/WaldiezModelData.html#index-signature","title":"Index Signature","text":"<p>[<code>key</code>: <code>string</code>]: <code>string</code></p>"},{"location":"reference/react/classes/WaldiezModelData.html#maxtokens_1","title":"maxTokens","text":"<p>maxTokens: <code>null</code> | <code>number</code></p> <p>Defined in: src/waldiez/models/Model/ModelData.ts:26</p>"},{"location":"reference/react/classes/WaldiezModelData.html#price_1","title":"price","text":"<p>price: <code>WaldiezModelPrice</code></p> <p>Defined in: src/waldiez/models/Model/ModelData.ts:28</p>"},{"location":"reference/react/classes/WaldiezModelData.html#temperature_1","title":"temperature","text":"<p>temperature: <code>null</code> | <code>number</code></p> <p>Defined in: src/waldiez/models/Model/ModelData.ts:24</p>"},{"location":"reference/react/classes/WaldiezModelData.html#topp_1","title":"topP","text":"<p>topP: <code>null</code> | <code>number</code></p> <p>Defined in: src/waldiez/models/Model/ModelData.ts:25</p>"},{"location":"reference/react/classes/WaldiezSkill.html","title":"WaldiezSkill","text":"<p>@waldiez/react v0.4.5</p> <p>Defined in: src/waldiez/models/Skill/Skill.ts:22</p> <p>Waldiez Skill</p>"},{"location":"reference/react/classes/WaldiezSkill.html#param","title":"Param","text":"<p>The type (skill)</p>"},{"location":"reference/react/classes/WaldiezSkill.html#param_1","title":"Param","text":"<p>The ID</p>"},{"location":"reference/react/classes/WaldiezSkill.html#param_2","title":"Param","text":"<p>The name of the skill</p>"},{"location":"reference/react/classes/WaldiezSkill.html#param_3","title":"Param","text":"<p>The description of the skill</p>"},{"location":"reference/react/classes/WaldiezSkill.html#param_4","title":"Param","text":"<p>The tags</p>"},{"location":"reference/react/classes/WaldiezSkill.html#param_5","title":"Param","text":"<p>The requirements</p>"},{"location":"reference/react/classes/WaldiezSkill.html#param_6","title":"Param","text":"<p>The created at date</p>"},{"location":"reference/react/classes/WaldiezSkill.html#param_7","title":"Param","text":"<p>The updated at date</p>"},{"location":"reference/react/classes/WaldiezSkill.html#param_8","title":"Param","text":"<p>The data</p>"},{"location":"reference/react/classes/WaldiezSkill.html#param_9","title":"Param","text":"<p>Any additional properties</p>"},{"location":"reference/react/classes/WaldiezSkill.html#see","title":"See","text":"<p>WaldiezSkillData</p>"},{"location":"reference/react/classes/WaldiezSkill.html#constructors","title":"Constructors","text":""},{"location":"reference/react/classes/WaldiezSkill.html#constructor","title":"Constructor","text":"<p>new WaldiezSkill(<code>props</code>): <code>WaldiezSkill</code></p> <p>Defined in: src/waldiez/models/Skill/Skill.ts:34</p>"},{"location":"reference/react/classes/WaldiezSkill.html#parameters","title":"Parameters","text":""},{"location":"reference/react/classes/WaldiezSkill.html#props","title":"props","text":""},{"location":"reference/react/classes/WaldiezSkill.html#createdat","title":"createdAt","text":"<p><code>string</code></p>"},{"location":"reference/react/classes/WaldiezSkill.html#data","title":"data","text":"<p><code>WaldiezSkillData</code></p>"},{"location":"reference/react/classes/WaldiezSkill.html#description","title":"description","text":"<p><code>string</code></p>"},{"location":"reference/react/classes/WaldiezSkill.html#id","title":"id","text":"<p><code>string</code></p>"},{"location":"reference/react/classes/WaldiezSkill.html#name","title":"name","text":"<p><code>string</code></p>"},{"location":"reference/react/classes/WaldiezSkill.html#requirements","title":"requirements","text":"<p><code>string</code>[]</p>"},{"location":"reference/react/classes/WaldiezSkill.html#rest","title":"rest?","text":"<p>{[<code>key</code>: <code>string</code>]: <code>unknown</code>; }</p>"},{"location":"reference/react/classes/WaldiezSkill.html#tags","title":"tags","text":"<p><code>string</code>[]</p>"},{"location":"reference/react/classes/WaldiezSkill.html#updatedat","title":"updatedAt","text":"<p><code>string</code></p>"},{"location":"reference/react/classes/WaldiezSkill.html#returns","title":"Returns","text":"<p><code>WaldiezSkill</code></p>"},{"location":"reference/react/classes/WaldiezSkill.html#properties","title":"Properties","text":""},{"location":"reference/react/classes/WaldiezSkill.html#createdat_1","title":"createdAt","text":"<p>createdAt: <code>string</code></p> <p>Defined in: src/waldiez/models/Skill/Skill.ts:29</p>"},{"location":"reference/react/classes/WaldiezSkill.html#data_1","title":"data","text":"<p>data: <code>WaldiezSkillData</code></p> <p>Defined in: src/waldiez/models/Skill/Skill.ts:31</p>"},{"location":"reference/react/classes/WaldiezSkill.html#description_1","title":"description","text":"<p>description: <code>string</code></p> <p>Defined in: src/waldiez/models/Skill/Skill.ts:26</p>"},{"location":"reference/react/classes/WaldiezSkill.html#id_1","title":"id","text":"<p>id: <code>string</code></p> <p>Defined in: src/waldiez/models/Skill/Skill.ts:24</p>"},{"location":"reference/react/classes/WaldiezSkill.html#name_1","title":"name","text":"<p>name: <code>string</code></p> <p>Defined in: src/waldiez/models/Skill/Skill.ts:25</p>"},{"location":"reference/react/classes/WaldiezSkill.html#requirements_1","title":"requirements","text":"<p>requirements: <code>string</code>[]</p> <p>Defined in: src/waldiez/models/Skill/Skill.ts:28</p>"},{"location":"reference/react/classes/WaldiezSkill.html#rest_1","title":"rest?","text":"<p><code>optional</code> rest: <code>object</code> = <code>{}</code></p> <p>Defined in: src/waldiez/models/Skill/Skill.ts:32</p>"},{"location":"reference/react/classes/WaldiezSkill.html#index-signature","title":"Index Signature","text":"<p>[<code>key</code>: <code>string</code>]: <code>unknown</code></p>"},{"location":"reference/react/classes/WaldiezSkill.html#tags_1","title":"tags","text":"<p>tags: <code>string</code>[]</p> <p>Defined in: src/waldiez/models/Skill/Skill.ts:27</p>"},{"location":"reference/react/classes/WaldiezSkill.html#type","title":"type","text":"<p>type: <code>string</code> = <code>\"skill\"</code></p> <p>Defined in: src/waldiez/models/Skill/Skill.ts:23</p>"},{"location":"reference/react/classes/WaldiezSkill.html#updatedat_1","title":"updatedAt","text":"<p>updatedAt: <code>string</code></p> <p>Defined in: src/waldiez/models/Skill/Skill.ts:30</p>"},{"location":"reference/react/classes/WaldiezSkill.html#methods","title":"Methods","text":""},{"location":"reference/react/classes/WaldiezSkill.html#create","title":"create()","text":"<p><code>static</code> create(): <code>WaldiezSkill</code></p> <p>Defined in: src/waldiez/models/Skill/Skill.ts:56</p>"},{"location":"reference/react/classes/WaldiezSkill.html#returns_1","title":"Returns","text":"<p><code>WaldiezSkill</code></p>"},{"location":"reference/react/classes/WaldiezSkillData.html","title":"WaldiezSkillData","text":"<p>@waldiez/react v0.4.5</p> <p>Defined in: src/waldiez/models/Skill/SkillData.ts:13</p> <p>Skill data.</p>"},{"location":"reference/react/classes/WaldiezSkillData.html#param","title":"Param","text":"<p>The content of the skill</p>"},{"location":"reference/react/classes/WaldiezSkillData.html#param_1","title":"Param","text":"<p>The type of the skill: shared, custom, langchain, crewai</p>"},{"location":"reference/react/classes/WaldiezSkillData.html#param_2","title":"Param","text":"<p>The secrets (environment variables) of the skill</p>"},{"location":"reference/react/classes/WaldiezSkillData.html#constructors","title":"Constructors","text":""},{"location":"reference/react/classes/WaldiezSkillData.html#constructor","title":"Constructor","text":"<p>new WaldiezSkillData(<code>props</code>): <code>WaldiezSkillData</code></p> <p>Defined in: src/waldiez/models/Skill/SkillData.ts:17</p>"},{"location":"reference/react/classes/WaldiezSkillData.html#parameters","title":"Parameters","text":""},{"location":"reference/react/classes/WaldiezSkillData.html#props","title":"props","text":""},{"location":"reference/react/classes/WaldiezSkillData.html#content","title":"content","text":"<p><code>string</code></p>"},{"location":"reference/react/classes/WaldiezSkillData.html#secrets","title":"secrets","text":"<p>{[<code>key</code>: <code>string</code>]: <code>string</code>; }</p>"},{"location":"reference/react/classes/WaldiezSkillData.html#skilltype","title":"skillType","text":"<p><code>WaldiezSkillType</code></p>"},{"location":"reference/react/classes/WaldiezSkillData.html#returns","title":"Returns","text":"<p><code>WaldiezSkillData</code></p>"},{"location":"reference/react/classes/WaldiezSkillData.html#properties","title":"Properties","text":""},{"location":"reference/react/classes/WaldiezSkillData.html#content_1","title":"content","text":"<p>content: <code>string</code></p> <p>Defined in: src/waldiez/models/Skill/SkillData.ts:14</p>"},{"location":"reference/react/classes/WaldiezSkillData.html#secrets_1","title":"secrets","text":"<p>secrets: <code>object</code></p> <p>Defined in: src/waldiez/models/Skill/SkillData.ts:16</p>"},{"location":"reference/react/classes/WaldiezSkillData.html#index-signature","title":"Index Signature","text":"<p>[<code>key</code>: <code>string</code>]: <code>string</code></p>"},{"location":"reference/react/classes/WaldiezSkillData.html#skilltype_1","title":"skillType","text":"<p>skillType: <code>WaldiezSkillType</code></p> <p>Defined in: src/waldiez/models/Skill/SkillData.ts:15</p>"},{"location":"reference/react/classes/WaldiezSwarmAfterWork.html","title":"WaldiezSwarmAfterWork","text":"<p>@waldiez/react v0.4.5</p> <p>Defined in: src/waldiez/models/Agent/Swarm/AfterWork.ts:10</p>"},{"location":"reference/react/classes/WaldiezSwarmAfterWork.html#constructors","title":"Constructors","text":""},{"location":"reference/react/classes/WaldiezSwarmAfterWork.html#constructor","title":"Constructor","text":"<p>new WaldiezSwarmAfterWork(<code>props</code>): <code>WaldiezSwarmAfterWork</code></p> <p>Defined in: src/waldiez/models/Agent/Swarm/AfterWork.ts:14</p>"},{"location":"reference/react/classes/WaldiezSwarmAfterWork.html#parameters","title":"Parameters","text":""},{"location":"reference/react/classes/WaldiezSwarmAfterWork.html#props","title":"props","text":""},{"location":"reference/react/classes/WaldiezSwarmAfterWork.html#recipient","title":"recipient","text":"<p><code>string</code></p>"},{"location":"reference/react/classes/WaldiezSwarmAfterWork.html#recipienttype","title":"recipientType","text":"<p><code>WaldiezSwarmAfterWorkRecipientType</code></p>"},{"location":"reference/react/classes/WaldiezSwarmAfterWork.html#returns","title":"Returns","text":"<p><code>WaldiezSwarmAfterWork</code></p>"},{"location":"reference/react/classes/WaldiezSwarmAfterWork.html#properties","title":"Properties","text":""},{"location":"reference/react/classes/WaldiezSwarmAfterWork.html#recipient_1","title":"recipient","text":"<p>recipient: <code>string</code></p> <p>Defined in: src/waldiez/models/Agent/Swarm/AfterWork.ts:12</p>"},{"location":"reference/react/classes/WaldiezSwarmAfterWork.html#recipienttype_1","title":"recipientType","text":"<p>recipientType: <code>WaldiezSwarmAfterWorkRecipientType</code></p> <p>Defined in: src/waldiez/models/Agent/Swarm/AfterWork.ts:11</p>"},{"location":"reference/react/classes/WaldiezSwarmOnCondition.html","title":"WaldiezSwarmOnCondition","text":"<p>@waldiez/react v0.4.5</p> <p>Defined in: src/waldiez/models/Agent/Swarm/OnCondition.ts:10</p>"},{"location":"reference/react/classes/WaldiezSwarmOnCondition.html#constructors","title":"Constructors","text":""},{"location":"reference/react/classes/WaldiezSwarmOnCondition.html#constructor","title":"Constructor","text":"<p>new WaldiezSwarmOnCondition(<code>props</code>): <code>WaldiezSwarmOnCondition</code></p> <p>Defined in: src/waldiez/models/Agent/Swarm/OnCondition.ts:16</p>"},{"location":"reference/react/classes/WaldiezSwarmOnCondition.html#parameters","title":"Parameters","text":""},{"location":"reference/react/classes/WaldiezSwarmOnCondition.html#props","title":"props","text":""},{"location":"reference/react/classes/WaldiezSwarmOnCondition.html#available","title":"available","text":"<p><code>WaldiezSwarmOnConditionAvailable</code></p>"},{"location":"reference/react/classes/WaldiezSwarmOnCondition.html#condition","title":"condition","text":"<p><code>string</code></p>"},{"location":"reference/react/classes/WaldiezSwarmOnCondition.html#target","title":"target","text":"<p>{ <code>id</code>: <code>string</code>; <code>order</code>: <code>number</code>; }</p>"},{"location":"reference/react/classes/WaldiezSwarmOnCondition.html#targetid","title":"target.id","text":"<p><code>string</code></p>"},{"location":"reference/react/classes/WaldiezSwarmOnCondition.html#targetorder","title":"target.order","text":"<p><code>number</code></p>"},{"location":"reference/react/classes/WaldiezSwarmOnCondition.html#targettype","title":"targetType","text":"<p><code>WaldiezSwarmOnConditionTargetType</code></p>"},{"location":"reference/react/classes/WaldiezSwarmOnCondition.html#returns","title":"Returns","text":"<p><code>WaldiezSwarmOnCondition</code></p>"},{"location":"reference/react/classes/WaldiezSwarmOnCondition.html#properties","title":"Properties","text":""},{"location":"reference/react/classes/WaldiezSwarmOnCondition.html#available_1","title":"available","text":"<p>available: <code>WaldiezSwarmOnConditionAvailable</code></p> <p>Defined in: src/waldiez/models/Agent/Swarm/OnCondition.ts:14</p>"},{"location":"reference/react/classes/WaldiezSwarmOnCondition.html#condition_1","title":"condition","text":"<p>condition: <code>string</code></p> <p>Defined in: src/waldiez/models/Agent/Swarm/OnCondition.ts:13</p>"},{"location":"reference/react/classes/WaldiezSwarmOnCondition.html#target_1","title":"target","text":"<p>target: <code>object</code></p> <p>Defined in: src/waldiez/models/Agent/Swarm/OnCondition.ts:11</p>"},{"location":"reference/react/classes/WaldiezSwarmOnCondition.html#id","title":"id","text":"<p>id: <code>string</code></p>"},{"location":"reference/react/classes/WaldiezSwarmOnCondition.html#order","title":"order","text":"<p>order: <code>number</code></p>"},{"location":"reference/react/classes/WaldiezSwarmOnCondition.html#targettype_1","title":"targetType","text":"<p>targetType: <code>WaldiezSwarmOnConditionTargetType</code></p> <p>Defined in: src/waldiez/models/Agent/Swarm/OnCondition.ts:12</p>"},{"location":"reference/react/classes/WaldiezSwarmUpdateSystemMessage.html","title":"WaldiezSwarmUpdateSystemMessage","text":"<p>@waldiez/react v0.4.5</p> <p>Defined in: src/waldiez/models/Agent/Swarm/UpdateSystemMessage.ts:7</p>"},{"location":"reference/react/classes/WaldiezSwarmUpdateSystemMessage.html#constructors","title":"Constructors","text":""},{"location":"reference/react/classes/WaldiezSwarmUpdateSystemMessage.html#constructor","title":"Constructor","text":"<p>new WaldiezSwarmUpdateSystemMessage(<code>props</code>): <code>WaldiezSwarmUpdateSystemMessage</code></p> <p>Defined in: src/waldiez/models/Agent/Swarm/UpdateSystemMessage.ts:11</p>"},{"location":"reference/react/classes/WaldiezSwarmUpdateSystemMessage.html#parameters","title":"Parameters","text":""},{"location":"reference/react/classes/WaldiezSwarmUpdateSystemMessage.html#props","title":"props","text":""},{"location":"reference/react/classes/WaldiezSwarmUpdateSystemMessage.html#updatefunction","title":"updateFunction","text":"<p><code>string</code></p>"},{"location":"reference/react/classes/WaldiezSwarmUpdateSystemMessage.html#updatefunctiontype","title":"updateFunctionType","text":"<p><code>WaldiezSwarmUpdateSystemMessageType</code></p>"},{"location":"reference/react/classes/WaldiezSwarmUpdateSystemMessage.html#returns","title":"Returns","text":"<p><code>WaldiezSwarmUpdateSystemMessage</code></p>"},{"location":"reference/react/classes/WaldiezSwarmUpdateSystemMessage.html#properties","title":"Properties","text":""},{"location":"reference/react/classes/WaldiezSwarmUpdateSystemMessage.html#updatefunction_1","title":"updateFunction","text":"<p>updateFunction: <code>string</code></p> <p>Defined in: src/waldiez/models/Agent/Swarm/UpdateSystemMessage.ts:9</p>"},{"location":"reference/react/classes/WaldiezSwarmUpdateSystemMessage.html#updatefunctiontype_1","title":"updateFunctionType","text":"<p>updateFunctionType: <code>WaldiezSwarmUpdateSystemMessageType</code></p> <p>Defined in: src/waldiez/models/Agent/Swarm/UpdateSystemMessage.ts:8</p>"},{"location":"reference/react/functions/WaldiezProvider.html","title":"WaldiezProvider","text":"<p>@waldiez/react v0.4.5</p> <p>WaldiezProvider(<code>__namedParameters</code>): <code>Element</code></p> <p>Defined in: src/waldiez/store/provider.tsx:11</p>"},{"location":"reference/react/functions/WaldiezProvider.html#parameters","title":"Parameters","text":""},{"location":"reference/react/functions/WaldiezProvider.html#__namedparameters","title":"__namedParameters","text":"<p><code>WaldiezProviderProps</code></p>"},{"location":"reference/react/functions/WaldiezProvider.html#returns","title":"Returns","text":"<p><code>Element</code></p>"},{"location":"reference/react/functions/createWaldiezStore.html","title":"createWaldiezStore","text":"<p>@waldiez/react v0.4.5</p> <p>createWaldiezStore(<code>props</code>): <code>Write</code>\\&lt;<code>StoreApi</code>\\&lt;<code>WaldiezState</code>&gt;, { }&gt;</p> <p>Defined in: src/waldiez/store/creator.ts:20</p>"},{"location":"reference/react/functions/createWaldiezStore.html#parameters","title":"Parameters","text":""},{"location":"reference/react/functions/createWaldiezStore.html#props","title":"props","text":"<p><code>WaldiezStoreProps</code></p>"},{"location":"reference/react/functions/createWaldiezStore.html#returns","title":"Returns","text":"<p><code>Write</code>\\&lt;<code>StoreApi</code>\\&lt;<code>WaldiezState</code>&gt;, { }&gt;</p>"},{"location":"reference/react/functions/useWaldiez.html","title":"useWaldiez","text":"<p>@waldiez/react v0.4.5</p> <p>useWaldiez\\&lt;<code>T</code>&gt;(<code>selector</code>): <code>T</code></p> <p>Defined in: src/waldiez/store/context.ts:15</p>"},{"location":"reference/react/functions/useWaldiez.html#type-parameters","title":"Type Parameters","text":""},{"location":"reference/react/functions/useWaldiez.html#t","title":"T","text":"<p><code>T</code></p>"},{"location":"reference/react/functions/useWaldiez.html#parameters","title":"Parameters","text":""},{"location":"reference/react/functions/useWaldiez.html#selector","title":"selector","text":"<p>(<code>state</code>) =&gt; <code>T</code></p>"},{"location":"reference/react/functions/useWaldiez.html#returns","title":"Returns","text":"<p><code>T</code></p>"},{"location":"reference/react/functions/useWaldiezHistory.html","title":"useWaldiezHistory","text":"<p>@waldiez/react v0.4.5</p> <p>useWaldiezHistory\\&lt;<code>T</code>&gt;(<code>selector</code>): <code>T</code></p> <p>Defined in: src/waldiez/store/context.ts:22</p>"},{"location":"reference/react/functions/useWaldiezHistory.html#type-parameters","title":"Type Parameters","text":""},{"location":"reference/react/functions/useWaldiezHistory.html#t","title":"T","text":"<p><code>T</code></p>"},{"location":"reference/react/functions/useWaldiezHistory.html#parameters","title":"Parameters","text":""},{"location":"reference/react/functions/useWaldiezHistory.html#selector","title":"selector","text":"<p>(<code>state</code>) =&gt; <code>T</code></p>"},{"location":"reference/react/functions/useWaldiezHistory.html#returns","title":"Returns","text":"<p><code>T</code></p>"},{"location":"reference/react/interfaces/IWaldiezAgentStore.html","title":"IWaldiezAgentStore","text":"<p>@waldiez/react v0.4.5</p> <p>Defined in: src/waldiez/models/Stores/IAgentStore.ts:13</p>"},{"location":"reference/react/interfaces/IWaldiezAgentStore.html#properties","title":"Properties","text":""},{"location":"reference/react/interfaces/IWaldiezAgentStore.html#addagent","title":"addAgent()","text":"<p>addAgent: (<code>agentType</code>, <code>position</code>, <code>parentId</code>) =&gt; <code>WaldiezNodeAgent</code></p> <p>Defined in: src/waldiez/models/Stores/IAgentStore.ts:16</p>"},{"location":"reference/react/interfaces/IWaldiezAgentStore.html#parameters","title":"Parameters","text":""},{"location":"reference/react/interfaces/IWaldiezAgentStore.html#agenttype","title":"agentType","text":"<p><code>WaldiezNodeAgentType</code></p>"},{"location":"reference/react/interfaces/IWaldiezAgentStore.html#position","title":"position","text":""},{"location":"reference/react/interfaces/IWaldiezAgentStore.html#x","title":"x","text":"<p><code>number</code></p>"},{"location":"reference/react/interfaces/IWaldiezAgentStore.html#y","title":"y","text":"<p><code>number</code></p>"},{"location":"reference/react/interfaces/IWaldiezAgentStore.html#parentid","title":"parentId","text":"<p><code>undefined</code> | <code>string</code></p>"},{"location":"reference/react/interfaces/IWaldiezAgentStore.html#returns","title":"Returns","text":"<p><code>WaldiezNodeAgent</code></p>"},{"location":"reference/react/interfaces/IWaldiezAgentStore.html#addgroupmember","title":"addGroupMember()","text":"<p>addGroupMember: (<code>groupId</code>, <code>memberId</code>) =&gt; <code>void</code></p> <p>Defined in: src/waldiez/models/Stores/IAgentStore.ts:34</p>"},{"location":"reference/react/interfaces/IWaldiezAgentStore.html#parameters_1","title":"Parameters","text":""},{"location":"reference/react/interfaces/IWaldiezAgentStore.html#groupid","title":"groupId","text":"<p><code>string</code></p>"},{"location":"reference/react/interfaces/IWaldiezAgentStore.html#memberid","title":"memberId","text":"<p><code>string</code></p>"},{"location":"reference/react/interfaces/IWaldiezAgentStore.html#returns_1","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/react/interfaces/IWaldiezAgentStore.html#cloneagent","title":"cloneAgent()","text":"<p>cloneAgent: (<code>id</code>) =&gt; <code>null</code> | <code>WaldiezNodeAgent</code></p> <p>Defined in: src/waldiez/models/Stores/IAgentStore.ts:21</p>"},{"location":"reference/react/interfaces/IWaldiezAgentStore.html#parameters_2","title":"Parameters","text":""},{"location":"reference/react/interfaces/IWaldiezAgentStore.html#id","title":"id","text":"<p><code>string</code></p>"},{"location":"reference/react/interfaces/IWaldiezAgentStore.html#returns_2","title":"Returns","text":"<p><code>null</code> | <code>WaldiezNodeAgent</code></p>"},{"location":"reference/react/interfaces/IWaldiezAgentStore.html#deleteagent","title":"deleteAgent()","text":"<p>deleteAgent: (<code>id</code>) =&gt; <code>void</code></p> <p>Defined in: src/waldiez/models/Stores/IAgentStore.ts:23</p>"},{"location":"reference/react/interfaces/IWaldiezAgentStore.html#parameters_3","title":"Parameters","text":""},{"location":"reference/react/interfaces/IWaldiezAgentStore.html#id_1","title":"id","text":"<p><code>string</code></p>"},{"location":"reference/react/interfaces/IWaldiezAgentStore.html#returns_3","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/react/interfaces/IWaldiezAgentStore.html#ensureswarmcontainer","title":"ensureSwarmContainer()","text":"<p>ensureSwarmContainer: (<code>flowId</code>, <code>position</code>) =&gt; <code>WaldiezNodeAgent</code></p> <p>Defined in: src/waldiez/models/Stores/IAgentStore.ts:44</p>"},{"location":"reference/react/interfaces/IWaldiezAgentStore.html#parameters_4","title":"Parameters","text":""},{"location":"reference/react/interfaces/IWaldiezAgentStore.html#flowid","title":"flowId","text":"<p><code>string</code></p>"},{"location":"reference/react/interfaces/IWaldiezAgentStore.html#position_1","title":"position","text":""},{"location":"reference/react/interfaces/IWaldiezAgentStore.html#x_1","title":"x","text":"<p><code>number</code></p>"},{"location":"reference/react/interfaces/IWaldiezAgentStore.html#y_1","title":"y","text":"<p><code>number</code></p>"},{"location":"reference/react/interfaces/IWaldiezAgentStore.html#returns_4","title":"Returns","text":"<p><code>WaldiezNodeAgent</code></p>"},{"location":"reference/react/interfaces/IWaldiezAgentStore.html#exportagent","title":"exportAgent()","text":"<p>exportAgent: (<code>agentId</code>, <code>hideSecrets</code>) =&gt; <code>object</code></p> <p>Defined in: src/waldiez/models/Stores/IAgentStore.ts:31</p>"},{"location":"reference/react/interfaces/IWaldiezAgentStore.html#parameters_5","title":"Parameters","text":""},{"location":"reference/react/interfaces/IWaldiezAgentStore.html#agentid","title":"agentId","text":"<p><code>string</code></p>"},{"location":"reference/react/interfaces/IWaldiezAgentStore.html#hidesecrets","title":"hideSecrets","text":"<p><code>boolean</code></p>"},{"location":"reference/react/interfaces/IWaldiezAgentStore.html#returns_5","title":"Returns","text":"<p><code>object</code></p>"},{"location":"reference/react/interfaces/IWaldiezAgentStore.html#getagentbyid","title":"getAgentById()","text":"<p>getAgentById: (<code>id</code>) =&gt; <code>null</code> | <code>WaldiezNodeAgent</code></p> <p>Defined in: src/waldiez/models/Stores/IAgentStore.ts:15</p>"},{"location":"reference/react/interfaces/IWaldiezAgentStore.html#parameters_6","title":"Parameters","text":""},{"location":"reference/react/interfaces/IWaldiezAgentStore.html#id_2","title":"id","text":"<p><code>string</code></p>"},{"location":"reference/react/interfaces/IWaldiezAgentStore.html#returns_6","title":"Returns","text":"<p><code>null</code> | <code>WaldiezNodeAgent</code></p>"},{"location":"reference/react/interfaces/IWaldiezAgentStore.html#getagentconnections","title":"getAgentConnections()","text":"<p>getAgentConnections: (<code>nodeId</code>, <code>options?</code>) =&gt; <code>object</code></p> <p>Defined in: src/waldiez/models/Stores/IAgentStore.ts:45</p>"},{"location":"reference/react/interfaces/IWaldiezAgentStore.html#parameters_7","title":"Parameters","text":""},{"location":"reference/react/interfaces/IWaldiezAgentStore.html#nodeid","title":"nodeId","text":"<p><code>string</code></p>"},{"location":"reference/react/interfaces/IWaldiezAgentStore.html#options","title":"options?","text":""},{"location":"reference/react/interfaces/IWaldiezAgentStore.html#skipmanagers","title":"skipManagers?","text":"<p><code>boolean</code></p>"},{"location":"reference/react/interfaces/IWaldiezAgentStore.html#sourcesonly","title":"sourcesOnly?","text":"<p><code>boolean</code></p>"},{"location":"reference/react/interfaces/IWaldiezAgentStore.html#targetsonly","title":"targetsOnly?","text":"<p><code>boolean</code></p>"},{"location":"reference/react/interfaces/IWaldiezAgentStore.html#returns_7","title":"Returns","text":"<p><code>object</code></p>"},{"location":"reference/react/interfaces/IWaldiezAgentStore.html#source","title":"source","text":"<p>source: <code>object</code></p>"},{"location":"reference/react/interfaces/IWaldiezAgentStore.html#sourceedges","title":"source.edges","text":"<p>edges: <code>WaldiezEdge</code>[]</p>"},{"location":"reference/react/interfaces/IWaldiezAgentStore.html#sourcenodes","title":"source.nodes","text":"<p>nodes: <code>WaldiezNodeAgent</code>[]</p>"},{"location":"reference/react/interfaces/IWaldiezAgentStore.html#target","title":"target","text":"<p>target: <code>object</code></p>"},{"location":"reference/react/interfaces/IWaldiezAgentStore.html#targetedges","title":"target.edges","text":"<p>edges: <code>WaldiezEdge</code>[]</p>"},{"location":"reference/react/interfaces/IWaldiezAgentStore.html#targetnodes","title":"target.nodes","text":"<p>nodes: <code>WaldiezNodeAgent</code>[]</p>"},{"location":"reference/react/interfaces/IWaldiezAgentStore.html#getagents","title":"getAgents()","text":"<p>getAgents: () =&gt; <code>WaldiezNodeAgent</code>[]</p> <p>Defined in: src/waldiez/models/Stores/IAgentStore.ts:14</p>"},{"location":"reference/react/interfaces/IWaldiezAgentStore.html#returns_8","title":"Returns","text":"<p><code>WaldiezNodeAgent</code>[]</p>"},{"location":"reference/react/interfaces/IWaldiezAgentStore.html#getgroupmembers","title":"getGroupMembers()","text":"<p>getGroupMembers: (<code>groupId</code>) =&gt; <code>WaldiezNodeAgent</code>[]</p> <p>Defined in: src/waldiez/models/Stores/IAgentStore.ts:33</p>"},{"location":"reference/react/interfaces/IWaldiezAgentStore.html#parameters_8","title":"Parameters","text":""},{"location":"reference/react/interfaces/IWaldiezAgentStore.html#groupid_1","title":"groupId","text":"<p><code>string</code></p>"},{"location":"reference/react/interfaces/IWaldiezAgentStore.html#returns_9","title":"Returns","text":"<p><code>WaldiezNodeAgent</code>[]</p>"},{"location":"reference/react/interfaces/IWaldiezAgentStore.html#getnonswarmagents","title":"getNonSwarmAgents()","text":"<p>getNonSwarmAgents: (<code>swarmContainerId</code>, <code>swarmAgents</code>, <code>edges</code>) =&gt; <code>object</code></p> <p>Defined in: src/waldiez/models/Stores/IAgentStore.ts:39</p>"},{"location":"reference/react/interfaces/IWaldiezAgentStore.html#parameters_9","title":"Parameters","text":""},{"location":"reference/react/interfaces/IWaldiezAgentStore.html#swarmcontainerid","title":"swarmContainerId","text":"<p><code>string</code></p>"},{"location":"reference/react/interfaces/IWaldiezAgentStore.html#swarmagents","title":"swarmAgents","text":"<p><code>WaldiezNodeAgent</code>[]</p>"},{"location":"reference/react/interfaces/IWaldiezAgentStore.html#edges","title":"edges","text":"<p><code>object</code>[]</p>"},{"location":"reference/react/interfaces/IWaldiezAgentStore.html#returns_10","title":"Returns","text":"<p><code>object</code></p>"},{"location":"reference/react/interfaces/IWaldiezAgentStore.html#swarmsources","title":"swarmSources","text":"<p>swarmSources: <code>WaldiezNodeAgent</code>[]</p>"},{"location":"reference/react/interfaces/IWaldiezAgentStore.html#swarmtargets","title":"swarmTargets","text":"<p>swarmTargets: <code>WaldiezNodeAgent</code>[]</p>"},{"location":"reference/react/interfaces/IWaldiezAgentStore.html#getswarmagents","title":"getSwarmAgents()","text":"<p>getSwarmAgents: () =&gt; <code>WaldiezNodeAgentSwarm</code>[]</p> <p>Defined in: src/waldiez/models/Stores/IAgentStore.ts:36</p>"},{"location":"reference/react/interfaces/IWaldiezAgentStore.html#returns_11","title":"Returns","text":"<p><code>WaldiezNodeAgentSwarm</code>[]</p>"},{"location":"reference/react/interfaces/IWaldiezAgentStore.html#importagent","title":"importAgent()","text":"<p>importAgent: (<code>agent</code>, <code>agentId</code>, <code>skipLinks</code>, <code>position</code>, <code>save</code>) =&gt; <code>WaldiezNodeAgent</code></p> <p>Defined in: src/waldiez/models/Stores/IAgentStore.ts:24</p>"},{"location":"reference/react/interfaces/IWaldiezAgentStore.html#parameters_10","title":"Parameters","text":""},{"location":"reference/react/interfaces/IWaldiezAgentStore.html#agent","title":"agent","text":""},{"location":"reference/react/interfaces/IWaldiezAgentStore.html#agentid_1","title":"agentId","text":"<p><code>string</code></p>"},{"location":"reference/react/interfaces/IWaldiezAgentStore.html#skiplinks","title":"skipLinks","text":"<p><code>boolean</code></p>"},{"location":"reference/react/interfaces/IWaldiezAgentStore.html#position_2","title":"position","text":"<p><code>undefined</code> | { <code>x</code>: <code>number</code>; <code>y</code>: <code>number</code>; }</p>"},{"location":"reference/react/interfaces/IWaldiezAgentStore.html#save","title":"save","text":"<p><code>boolean</code></p>"},{"location":"reference/react/interfaces/IWaldiezAgentStore.html#returns_12","title":"Returns","text":"<p><code>WaldiezNodeAgent</code></p>"},{"location":"reference/react/interfaces/IWaldiezAgentStore.html#removegroupmember","title":"removeGroupMember()","text":"<p>removeGroupMember: (<code>groupId</code>, <code>memberId</code>) =&gt; <code>void</code></p> <p>Defined in: src/waldiez/models/Stores/IAgentStore.ts:35</p>"},{"location":"reference/react/interfaces/IWaldiezAgentStore.html#parameters_11","title":"Parameters","text":""},{"location":"reference/react/interfaces/IWaldiezAgentStore.html#groupid_2","title":"groupId","text":"<p><code>string</code></p>"},{"location":"reference/react/interfaces/IWaldiezAgentStore.html#memberid_1","title":"memberId","text":"<p><code>string</code></p>"},{"location":"reference/react/interfaces/IWaldiezAgentStore.html#returns_13","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/react/interfaces/IWaldiezAgentStore.html#setagentgroup","title":"setAgentGroup()","text":"<p>setAgentGroup: (<code>agentId</code>, <code>groupId</code>) =&gt; <code>void</code></p> <p>Defined in: src/waldiez/models/Stores/IAgentStore.ts:32</p>"},{"location":"reference/react/interfaces/IWaldiezAgentStore.html#parameters_12","title":"Parameters","text":""},{"location":"reference/react/interfaces/IWaldiezAgentStore.html#agentid_2","title":"agentId","text":"<p><code>string</code></p>"},{"location":"reference/react/interfaces/IWaldiezAgentStore.html#groupid_3","title":"groupId","text":"<p><code>string</code></p>"},{"location":"reference/react/interfaces/IWaldiezAgentStore.html#returns_14","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/react/interfaces/IWaldiezAgentStore.html#setswarminitialagent","title":"setSwarmInitialAgent()","text":"<p>setSwarmInitialAgent: (<code>agentId</code>) =&gt; <code>void</code></p> <p>Defined in: src/waldiez/models/Stores/IAgentStore.ts:37</p>"},{"location":"reference/react/interfaces/IWaldiezAgentStore.html#parameters_13","title":"Parameters","text":""},{"location":"reference/react/interfaces/IWaldiezAgentStore.html#agentid_3","title":"agentId","text":"<p><code>string</code></p>"},{"location":"reference/react/interfaces/IWaldiezAgentStore.html#returns_15","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/react/interfaces/IWaldiezAgentStore.html#updateagentdata","title":"updateAgentData()","text":"<p>updateAgentData: (<code>id</code>, <code>data</code>) =&gt; <code>void</code></p> <p>Defined in: src/waldiez/models/Stores/IAgentStore.ts:22</p>"},{"location":"reference/react/interfaces/IWaldiezAgentStore.html#parameters_14","title":"Parameters","text":""},{"location":"reference/react/interfaces/IWaldiezAgentStore.html#id_3","title":"id","text":"<p><code>string</code></p>"},{"location":"reference/react/interfaces/IWaldiezAgentStore.html#data","title":"data","text":"<p><code>Partial</code>\\&lt;<code>WaldiezNodeAgentData</code>&gt;</p>"},{"location":"reference/react/interfaces/IWaldiezAgentStore.html#returns_16","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/react/interfaces/IWaldiezAgentStore.html#updateswarminitialagent","title":"updateSwarmInitialAgent()","text":"<p>updateSwarmInitialAgent: (<code>agentId</code>) =&gt; <code>void</code></p> <p>Defined in: src/waldiez/models/Stores/IAgentStore.ts:38</p>"},{"location":"reference/react/interfaces/IWaldiezAgentStore.html#parameters_15","title":"Parameters","text":""},{"location":"reference/react/interfaces/IWaldiezAgentStore.html#agentid_4","title":"agentId","text":"<p><code>string</code></p>"},{"location":"reference/react/interfaces/IWaldiezAgentStore.html#returns_17","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/react/interfaces/IWaldiezEdgeStore.html","title":"IWaldiezEdgeStore","text":"<p>@waldiez/react v0.4.5</p> <p>Defined in: src/waldiez/models/Stores/IEdgeStore.ts:15</p>"},{"location":"reference/react/interfaces/IWaldiezEdgeStore.html#properties","title":"Properties","text":""},{"location":"reference/react/interfaces/IWaldiezEdgeStore.html#addedge","title":"addEdge()","text":"<p>addEdge: (<code>connection</code>, <code>hidden</code>) =&gt; <code>null</code> | <code>WaldiezEdge</code></p> <p>Defined in: src/waldiez/models/Stores/IEdgeStore.ts:25</p>"},{"location":"reference/react/interfaces/IWaldiezEdgeStore.html#parameters","title":"Parameters","text":""},{"location":"reference/react/interfaces/IWaldiezEdgeStore.html#connection","title":"connection","text":"<p><code>Connection</code></p>"},{"location":"reference/react/interfaces/IWaldiezEdgeStore.html#hidden","title":"hidden","text":"<p><code>boolean</code></p>"},{"location":"reference/react/interfaces/IWaldiezEdgeStore.html#returns","title":"Returns","text":"<p><code>null</code> | <code>WaldiezEdge</code></p>"},{"location":"reference/react/interfaces/IWaldiezEdgeStore.html#deleteedge","title":"deleteEdge()","text":"<p>deleteEdge: (<code>id</code>) =&gt; <code>void</code></p> <p>Defined in: src/waldiez/models/Stores/IEdgeStore.ts:18</p>"},{"location":"reference/react/interfaces/IWaldiezEdgeStore.html#parameters_1","title":"Parameters","text":""},{"location":"reference/react/interfaces/IWaldiezEdgeStore.html#id","title":"id","text":"<p><code>string</code></p>"},{"location":"reference/react/interfaces/IWaldiezEdgeStore.html#returns_1","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/react/interfaces/IWaldiezEdgeStore.html#getedgebyid","title":"getEdgeById()","text":"<p>getEdgeById: (<code>id</code>) =&gt; <code>undefined</code> | <code>WaldiezEdge</code></p> <p>Defined in: src/waldiez/models/Stores/IEdgeStore.ts:17</p>"},{"location":"reference/react/interfaces/IWaldiezEdgeStore.html#parameters_2","title":"Parameters","text":""},{"location":"reference/react/interfaces/IWaldiezEdgeStore.html#id_1","title":"id","text":"<p><code>string</code></p>"},{"location":"reference/react/interfaces/IWaldiezEdgeStore.html#returns_2","title":"Returns","text":"<p><code>undefined</code> | <code>WaldiezEdge</code></p>"},{"location":"reference/react/interfaces/IWaldiezEdgeStore.html#getedges","title":"getEdges()","text":"<p>getEdges: () =&gt; <code>WaldiezEdge</code>[]</p> <p>Defined in: src/waldiez/models/Stores/IEdgeStore.ts:16</p>"},{"location":"reference/react/interfaces/IWaldiezEdgeStore.html#returns_3","title":"Returns","text":"<p><code>WaldiezEdge</code>[]</p>"},{"location":"reference/react/interfaces/IWaldiezEdgeStore.html#getedgesourceagent","title":"getEdgeSourceAgent()","text":"<p>getEdgeSourceAgent: (<code>edge</code>) =&gt; <code>undefined</code> | <code>WaldiezNodeAgent</code></p> <p>Defined in: src/waldiez/models/Stores/IEdgeStore.ts:22</p>"},{"location":"reference/react/interfaces/IWaldiezEdgeStore.html#parameters_3","title":"Parameters","text":""},{"location":"reference/react/interfaces/IWaldiezEdgeStore.html#edge","title":"edge","text":"<p><code>WaldiezEdge</code></p>"},{"location":"reference/react/interfaces/IWaldiezEdgeStore.html#returns_4","title":"Returns","text":"<p><code>undefined</code> | <code>WaldiezNodeAgent</code></p>"},{"location":"reference/react/interfaces/IWaldiezEdgeStore.html#getedgetargetagent","title":"getEdgeTargetAgent()","text":"<p>getEdgeTargetAgent: (<code>edge</code>) =&gt; <code>undefined</code> | <code>WaldiezNodeAgent</code></p> <p>Defined in: src/waldiez/models/Stores/IEdgeStore.ts:23</p>"},{"location":"reference/react/interfaces/IWaldiezEdgeStore.html#parameters_4","title":"Parameters","text":""},{"location":"reference/react/interfaces/IWaldiezEdgeStore.html#edge_1","title":"edge","text":"<p><code>WaldiezEdge</code></p>"},{"location":"reference/react/interfaces/IWaldiezEdgeStore.html#returns_5","title":"Returns","text":"<p><code>undefined</code> | <code>WaldiezNodeAgent</code></p>"},{"location":"reference/react/interfaces/IWaldiezEdgeStore.html#getswarmedges","title":"getSwarmEdges()","text":"<p>getSwarmEdges: () =&gt; <code>WaldiezEdge</code>[]</p> <p>Defined in: src/waldiez/models/Stores/IEdgeStore.ts:28</p>"},{"location":"reference/react/interfaces/IWaldiezEdgeStore.html#returns_6","title":"Returns","text":"<p><code>WaldiezEdge</code>[]</p>"},{"location":"reference/react/interfaces/IWaldiezEdgeStore.html#onedgedoubleclick","title":"onEdgeDoubleClick()","text":"<p>onEdgeDoubleClick: (<code>event</code>, <code>edge</code>) =&gt; <code>void</code></p> <p>Defined in: src/waldiez/models/Stores/IEdgeStore.ts:26</p>"},{"location":"reference/react/interfaces/IWaldiezEdgeStore.html#parameters_5","title":"Parameters","text":""},{"location":"reference/react/interfaces/IWaldiezEdgeStore.html#event","title":"event","text":"<p><code>MouseEvent</code></p>"},{"location":"reference/react/interfaces/IWaldiezEdgeStore.html#edge_2","title":"edge","text":"<p><code>WaldiezEdge</code></p>"},{"location":"reference/react/interfaces/IWaldiezEdgeStore.html#returns_7","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/react/interfaces/IWaldiezEdgeStore.html#onedgeschange","title":"onEdgesChange()","text":"<p>onEdgesChange: (<code>changes</code>) =&gt; <code>void</code></p> <p>Defined in: src/waldiez/models/Stores/IEdgeStore.ts:19</p>"},{"location":"reference/react/interfaces/IWaldiezEdgeStore.html#parameters_6","title":"Parameters","text":""},{"location":"reference/react/interfaces/IWaldiezEdgeStore.html#changes","title":"changes","text":"<p><code>EdgeChange</code>[]</p>"},{"location":"reference/react/interfaces/IWaldiezEdgeStore.html#returns_8","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/react/interfaces/IWaldiezEdgeStore.html#onreconnect","title":"onReconnect()","text":"<p>onReconnect: (<code>oldEdge</code>, <code>newConnection</code>) =&gt; <code>void</code></p> <p>Defined in: src/waldiez/models/Stores/IEdgeStore.ts:27</p>"},{"location":"reference/react/interfaces/IWaldiezEdgeStore.html#parameters_7","title":"Parameters","text":""},{"location":"reference/react/interfaces/IWaldiezEdgeStore.html#oldedge","title":"oldEdge","text":"<p><code>Edge</code></p>"},{"location":"reference/react/interfaces/IWaldiezEdgeStore.html#newconnection","title":"newConnection","text":"<p><code>Connection</code></p>"},{"location":"reference/react/interfaces/IWaldiezEdgeStore.html#returns_9","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/react/interfaces/IWaldiezEdgeStore.html#updateedgedata","title":"updateEdgeData()","text":"<p>updateEdgeData: (<code>id</code>, <code>data</code>) =&gt; <code>void</code></p> <p>Defined in: src/waldiez/models/Stores/IEdgeStore.ts:20</p>"},{"location":"reference/react/interfaces/IWaldiezEdgeStore.html#parameters_8","title":"Parameters","text":""},{"location":"reference/react/interfaces/IWaldiezEdgeStore.html#id_2","title":"id","text":"<p><code>string</code></p>"},{"location":"reference/react/interfaces/IWaldiezEdgeStore.html#data","title":"data","text":"<p><code>Partial</code>\\&lt;<code>WaldiezEdgeData</code>&gt;</p>"},{"location":"reference/react/interfaces/IWaldiezEdgeStore.html#returns_10","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/react/interfaces/IWaldiezEdgeStore.html#updateedgepath","title":"updateEdgePath()","text":"<p>updateEdgePath: (<code>id</code>, <code>agentType</code>) =&gt; <code>void</code></p> <p>Defined in: src/waldiez/models/Stores/IEdgeStore.ts:21</p>"},{"location":"reference/react/interfaces/IWaldiezEdgeStore.html#parameters_9","title":"Parameters","text":""},{"location":"reference/react/interfaces/IWaldiezEdgeStore.html#id_3","title":"id","text":"<p><code>string</code></p>"},{"location":"reference/react/interfaces/IWaldiezEdgeStore.html#agenttype","title":"agentType","text":"<p><code>WaldiezNodeAgentType</code></p>"},{"location":"reference/react/interfaces/IWaldiezEdgeStore.html#returns_11","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/react/interfaces/IWaldiezEdgeStore.html#updateedgetype","title":"updateEdgeType()","text":"<p>updateEdgeType: (<code>id</code>, <code>type</code>) =&gt; <code>void</code></p> <p>Defined in: src/waldiez/models/Stores/IEdgeStore.ts:24</p>"},{"location":"reference/react/interfaces/IWaldiezEdgeStore.html#parameters_10","title":"Parameters","text":""},{"location":"reference/react/interfaces/IWaldiezEdgeStore.html#id_4","title":"id","text":"<p><code>string</code></p>"},{"location":"reference/react/interfaces/IWaldiezEdgeStore.html#type","title":"type","text":"<p><code>WaldiezEdgeType</code></p>"},{"location":"reference/react/interfaces/IWaldiezEdgeStore.html#returns_12","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/react/interfaces/IWaldiezFlowStore.html","title":"IWaldiezFlowStore","text":"<p>@waldiez/react v0.4.5</p> <p>Defined in: src/waldiez/models/Stores/IFlowStore.ts:16</p>"},{"location":"reference/react/interfaces/IWaldiezFlowStore.html#properties","title":"Properties","text":""},{"location":"reference/react/interfaces/IWaldiezFlowStore.html#exportflow","title":"exportFlow()","text":"<p>exportFlow: (<code>hideSecrets</code>, <code>skipLinks</code>) =&gt; <code>WaldiezFlow</code></p> <p>Defined in: src/waldiez/models/Stores/IFlowStore.ts:26</p>"},{"location":"reference/react/interfaces/IWaldiezFlowStore.html#parameters","title":"Parameters","text":""},{"location":"reference/react/interfaces/IWaldiezFlowStore.html#hidesecrets","title":"hideSecrets","text":"<p><code>boolean</code></p>"},{"location":"reference/react/interfaces/IWaldiezFlowStore.html#skiplinks","title":"skipLinks","text":"<p><code>boolean</code></p>"},{"location":"reference/react/interfaces/IWaldiezFlowStore.html#returns","title":"Returns","text":"<p><code>WaldiezFlow</code></p>"},{"location":"reference/react/interfaces/IWaldiezFlowStore.html#getflowedges","title":"getFlowEdges()","text":"<p>getFlowEdges: (<code>skipSwarm</code>) =&gt; <code>object</code></p> <p>Defined in: src/waldiez/models/Stores/IFlowStore.ts:24</p>"},{"location":"reference/react/interfaces/IWaldiezFlowStore.html#parameters_1","title":"Parameters","text":""},{"location":"reference/react/interfaces/IWaldiezFlowStore.html#skipswarm","title":"skipSwarm","text":"<p><code>boolean</code></p>"},{"location":"reference/react/interfaces/IWaldiezFlowStore.html#returns_1","title":"Returns","text":"<p><code>object</code></p>"},{"location":"reference/react/interfaces/IWaldiezFlowStore.html#remaining","title":"remaining","text":"<p>remaining: <code>WaldiezEdge</code>[]</p>"},{"location":"reference/react/interfaces/IWaldiezFlowStore.html#used","title":"used","text":"<p>used: <code>WaldiezEdge</code>[]</p>"},{"location":"reference/react/interfaces/IWaldiezFlowStore.html#getflowinfo","title":"getFlowInfo()","text":"<p>getFlowInfo: () =&gt; <code>WaldiezFlowInfo</code></p> <p>Defined in: src/waldiez/models/Stores/IFlowStore.ts:20</p>"},{"location":"reference/react/interfaces/IWaldiezFlowStore.html#returns_2","title":"Returns","text":"<p><code>WaldiezFlowInfo</code></p>"},{"location":"reference/react/interfaces/IWaldiezFlowStore.html#getrfinstance","title":"getRfInstance()","text":"<p>getRfInstance: () =&gt; <code>undefined</code> | <code>ReactFlowInstance</code></p> <p>Defined in: src/waldiez/models/Stores/IFlowStore.ts:18</p>"},{"location":"reference/react/interfaces/IWaldiezFlowStore.html#returns_3","title":"Returns","text":"<p><code>undefined</code> | <code>ReactFlowInstance</code></p>"},{"location":"reference/react/interfaces/IWaldiezFlowStore.html#getviewport","title":"getViewport()","text":"<p>getViewport: () =&gt; <code>undefined</code> | <code>Viewport</code></p> <p>Defined in: src/waldiez/models/Stores/IFlowStore.ts:17</p>"},{"location":"reference/react/interfaces/IWaldiezFlowStore.html#returns_4","title":"Returns","text":"<p><code>undefined</code> | <code>Viewport</code></p>"},{"location":"reference/react/interfaces/IWaldiezFlowStore.html#importflow","title":"importFlow()","text":"<p>importFlow: (<code>items</code>, <code>flowData</code>, <code>typeShown</code>) =&gt; <code>void</code></p> <p>Defined in: src/waldiez/models/Stores/IFlowStore.ts:25</p>"},{"location":"reference/react/interfaces/IWaldiezFlowStore.html#parameters_2","title":"Parameters","text":""},{"location":"reference/react/interfaces/IWaldiezFlowStore.html#items","title":"items","text":"<p><code>ThingsToImport</code></p>"},{"location":"reference/react/interfaces/IWaldiezFlowStore.html#flowdata","title":"flowData","text":"<p><code>ImportedFlow</code></p>"},{"location":"reference/react/interfaces/IWaldiezFlowStore.html#typeshown","title":"typeShown","text":"<p><code>WaldiezNodeType</code></p>"},{"location":"reference/react/interfaces/IWaldiezFlowStore.html#returns_5","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/react/interfaces/IWaldiezFlowStore.html#onflowchanged","title":"onFlowChanged()","text":"<p>onFlowChanged: () =&gt; <code>WaldiezFlow</code></p> <p>Defined in: src/waldiez/models/Stores/IFlowStore.ts:21</p>"},{"location":"reference/react/interfaces/IWaldiezFlowStore.html#returns_6","title":"Returns","text":"<p><code>WaldiezFlow</code></p>"},{"location":"reference/react/interfaces/IWaldiezFlowStore.html#onviewportchange","title":"onViewportChange()","text":"<p>onViewportChange: (<code>viewport</code>, <code>nodeType</code>) =&gt; <code>void</code></p> <p>Defined in: src/waldiez/models/Stores/IFlowStore.ts:22</p>"},{"location":"reference/react/interfaces/IWaldiezFlowStore.html#parameters_3","title":"Parameters","text":""},{"location":"reference/react/interfaces/IWaldiezFlowStore.html#viewport","title":"viewport","text":""},{"location":"reference/react/interfaces/IWaldiezFlowStore.html#x","title":"x","text":"<p><code>number</code></p>"},{"location":"reference/react/interfaces/IWaldiezFlowStore.html#y","title":"y","text":"<p><code>number</code></p>"},{"location":"reference/react/interfaces/IWaldiezFlowStore.html#zoom","title":"zoom","text":"<p><code>number</code></p>"},{"location":"reference/react/interfaces/IWaldiezFlowStore.html#nodetype","title":"nodeType","text":"<p><code>WaldiezNodeType</code></p>"},{"location":"reference/react/interfaces/IWaldiezFlowStore.html#returns_7","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/react/interfaces/IWaldiezFlowStore.html#saveflow","title":"saveFlow()","text":"<p>saveFlow: () =&gt; <code>void</code></p> <p>Defined in: src/waldiez/models/Stores/IFlowStore.ts:23</p>"},{"location":"reference/react/interfaces/IWaldiezFlowStore.html#returns_8","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/react/interfaces/IWaldiezFlowStore.html#setrfinstance","title":"setRfInstance()","text":"<p>setRfInstance: (<code>rfInstance</code>) =&gt; <code>void</code></p> <p>Defined in: src/waldiez/models/Stores/IFlowStore.ts:19</p>"},{"location":"reference/react/interfaces/IWaldiezFlowStore.html#parameters_4","title":"Parameters","text":""},{"location":"reference/react/interfaces/IWaldiezFlowStore.html#rfinstance","title":"rfInstance","text":"<p><code>ReactFlowInstance</code></p>"},{"location":"reference/react/interfaces/IWaldiezFlowStore.html#returns_9","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/react/interfaces/IWaldiezFlowStore.html#updateflowinfo","title":"updateFlowInfo()","text":"<p>updateFlowInfo: (<code>data</code>) =&gt; <code>void</code></p> <p>Defined in: src/waldiez/models/Stores/IFlowStore.ts:29</p>"},{"location":"reference/react/interfaces/IWaldiezFlowStore.html#parameters_5","title":"Parameters","text":""},{"location":"reference/react/interfaces/IWaldiezFlowStore.html#data","title":"data","text":""},{"location":"reference/react/interfaces/IWaldiezFlowStore.html#cacheseed","title":"cacheSeed","text":"<p><code>null</code> | <code>number</code></p>"},{"location":"reference/react/interfaces/IWaldiezFlowStore.html#description","title":"description","text":"<p><code>string</code></p>"},{"location":"reference/react/interfaces/IWaldiezFlowStore.html#isasync","title":"isAsync","text":"<p><code>boolean</code></p>"},{"location":"reference/react/interfaces/IWaldiezFlowStore.html#name","title":"name","text":"<p><code>string</code></p>"},{"location":"reference/react/interfaces/IWaldiezFlowStore.html#requirements","title":"requirements","text":"<p><code>string</code>[]</p>"},{"location":"reference/react/interfaces/IWaldiezFlowStore.html#tags","title":"tags","text":"<p><code>string</code>[]</p>"},{"location":"reference/react/interfaces/IWaldiezFlowStore.html#returns_10","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/react/interfaces/IWaldiezFlowStore.html#updatefloworder","title":"updateFlowOrder()","text":"<p>updateFlowOrder: (<code>data</code>) =&gt; <code>void</code></p> <p>Defined in: src/waldiez/models/Stores/IFlowStore.ts:27</p>"},{"location":"reference/react/interfaces/IWaldiezFlowStore.html#parameters_6","title":"Parameters","text":""},{"location":"reference/react/interfaces/IWaldiezFlowStore.html#data_1","title":"data","text":"<p><code>object</code>[]</p>"},{"location":"reference/react/interfaces/IWaldiezFlowStore.html#returns_11","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/react/interfaces/IWaldiezFlowStore.html#updateflowprerequisites","title":"updateFlowPrerequisites()","text":"<p>updateFlowPrerequisites: (<code>edges</code>) =&gt; <code>void</code></p> <p>Defined in: src/waldiez/models/Stores/IFlowStore.ts:28</p>"},{"location":"reference/react/interfaces/IWaldiezFlowStore.html#parameters_7","title":"Parameters","text":""},{"location":"reference/react/interfaces/IWaldiezFlowStore.html#edges","title":"edges","text":"<p><code>WaldiezEdge</code>[]</p>"},{"location":"reference/react/interfaces/IWaldiezFlowStore.html#returns_12","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/react/interfaces/IWaldiezModelStore.html","title":"IWaldiezModelStore","text":"<p>@waldiez/react v0.4.5</p> <p>Defined in: src/waldiez/models/Stores/IModelStore.ts:7</p>"},{"location":"reference/react/interfaces/IWaldiezModelStore.html#properties","title":"Properties","text":""},{"location":"reference/react/interfaces/IWaldiezModelStore.html#addmodel","title":"addModel()","text":"<p>addModel: () =&gt; <code>WaldiezNodeModel</code></p> <p>Defined in: src/waldiez/models/Stores/IModelStore.ts:10</p>"},{"location":"reference/react/interfaces/IWaldiezModelStore.html#returns","title":"Returns","text":"<p><code>WaldiezNodeModel</code></p>"},{"location":"reference/react/interfaces/IWaldiezModelStore.html#clonemodel","title":"cloneModel()","text":"<p>cloneModel: (<code>id</code>) =&gt; <code>null</code> | <code>WaldiezNodeModel</code></p> <p>Defined in: src/waldiez/models/Stores/IModelStore.ts:11</p>"},{"location":"reference/react/interfaces/IWaldiezModelStore.html#parameters","title":"Parameters","text":""},{"location":"reference/react/interfaces/IWaldiezModelStore.html#id","title":"id","text":"<p><code>string</code></p>"},{"location":"reference/react/interfaces/IWaldiezModelStore.html#returns_1","title":"Returns","text":"<p><code>null</code> | <code>WaldiezNodeModel</code></p>"},{"location":"reference/react/interfaces/IWaldiezModelStore.html#deletemodel","title":"deleteModel()","text":"<p>deleteModel: (<code>id</code>) =&gt; <code>void</code></p> <p>Defined in: src/waldiez/models/Stores/IModelStore.ts:13</p>"},{"location":"reference/react/interfaces/IWaldiezModelStore.html#parameters_1","title":"Parameters","text":""},{"location":"reference/react/interfaces/IWaldiezModelStore.html#id_1","title":"id","text":"<p><code>string</code></p>"},{"location":"reference/react/interfaces/IWaldiezModelStore.html#returns_2","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/react/interfaces/IWaldiezModelStore.html#exportmodel","title":"exportModel()","text":"<p>exportModel: (<code>modelId</code>, <code>hideSecrets</code>) =&gt; <code>object</code></p> <p>Defined in: src/waldiez/models/Stores/IModelStore.ts:20</p>"},{"location":"reference/react/interfaces/IWaldiezModelStore.html#parameters_2","title":"Parameters","text":""},{"location":"reference/react/interfaces/IWaldiezModelStore.html#modelid","title":"modelId","text":"<p><code>string</code></p>"},{"location":"reference/react/interfaces/IWaldiezModelStore.html#hidesecrets","title":"hideSecrets","text":"<p><code>boolean</code></p>"},{"location":"reference/react/interfaces/IWaldiezModelStore.html#returns_3","title":"Returns","text":"<p><code>object</code></p>"},{"location":"reference/react/interfaces/IWaldiezModelStore.html#getmodelbyid","title":"getModelById()","text":"<p>getModelById: (<code>id</code>) =&gt; <code>null</code> | <code>WaldiezNodeModel</code></p> <p>Defined in: src/waldiez/models/Stores/IModelStore.ts:9</p>"},{"location":"reference/react/interfaces/IWaldiezModelStore.html#parameters_3","title":"Parameters","text":""},{"location":"reference/react/interfaces/IWaldiezModelStore.html#id_2","title":"id","text":"<p><code>string</code></p>"},{"location":"reference/react/interfaces/IWaldiezModelStore.html#returns_4","title":"Returns","text":"<p><code>null</code> | <code>WaldiezNodeModel</code></p>"},{"location":"reference/react/interfaces/IWaldiezModelStore.html#getmodels","title":"getModels()","text":"<p>getModels: () =&gt; <code>WaldiezNodeModel</code>[]</p> <p>Defined in: src/waldiez/models/Stores/IModelStore.ts:8</p>"},{"location":"reference/react/interfaces/IWaldiezModelStore.html#returns_5","title":"Returns","text":"<p><code>WaldiezNodeModel</code>[]</p>"},{"location":"reference/react/interfaces/IWaldiezModelStore.html#importmodel","title":"importModel()","text":"<p>importModel: (<code>model</code>, <code>modelId</code>, <code>position</code>, <code>save</code>) =&gt; <code>WaldiezNodeModel</code></p> <p>Defined in: src/waldiez/models/Stores/IModelStore.ts:14</p>"},{"location":"reference/react/interfaces/IWaldiezModelStore.html#parameters_4","title":"Parameters","text":""},{"location":"reference/react/interfaces/IWaldiezModelStore.html#model","title":"model","text":""},{"location":"reference/react/interfaces/IWaldiezModelStore.html#modelid_1","title":"modelId","text":"<p><code>string</code></p>"},{"location":"reference/react/interfaces/IWaldiezModelStore.html#position","title":"position","text":"<p><code>undefined</code> | { <code>x</code>: <code>number</code>; <code>y</code>: <code>number</code>; }</p>"},{"location":"reference/react/interfaces/IWaldiezModelStore.html#save","title":"save","text":"<p><code>boolean</code></p>"},{"location":"reference/react/interfaces/IWaldiezModelStore.html#returns_6","title":"Returns","text":"<p><code>WaldiezNodeModel</code></p>"},{"location":"reference/react/interfaces/IWaldiezModelStore.html#updatemodeldata","title":"updateModelData()","text":"<p>updateModelData: (<code>id</code>, <code>data</code>) =&gt; <code>void</code></p> <p>Defined in: src/waldiez/models/Stores/IModelStore.ts:12</p>"},{"location":"reference/react/interfaces/IWaldiezModelStore.html#parameters_5","title":"Parameters","text":""},{"location":"reference/react/interfaces/IWaldiezModelStore.html#id_3","title":"id","text":"<p><code>string</code></p>"},{"location":"reference/react/interfaces/IWaldiezModelStore.html#data","title":"data","text":"<p><code>Partial</code>\\&lt;<code>WaldiezNodeModelData</code>&gt;</p>"},{"location":"reference/react/interfaces/IWaldiezModelStore.html#returns_7","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/react/interfaces/IWaldiezNodeStore.html","title":"IWaldiezNodeStore","text":"<p>@waldiez/react v0.4.5</p> <p>Defined in: src/waldiez/models/Stores/INodeStore.ts:9</p>"},{"location":"reference/react/interfaces/IWaldiezNodeStore.html#properties","title":"Properties","text":""},{"location":"reference/react/interfaces/IWaldiezNodeStore.html#onnodedoubleclick","title":"onNodeDoubleClick()","text":"<p>onNodeDoubleClick: (<code>event</code>, <code>node</code>) =&gt; <code>void</code></p> <p>Defined in: src/waldiez/models/Stores/INodeStore.ts:13</p>"},{"location":"reference/react/interfaces/IWaldiezNodeStore.html#parameters","title":"Parameters","text":""},{"location":"reference/react/interfaces/IWaldiezNodeStore.html#event","title":"event","text":"<p><code>any</code></p>"},{"location":"reference/react/interfaces/IWaldiezNodeStore.html#node","title":"node","text":"<p><code>Node</code></p>"},{"location":"reference/react/interfaces/IWaldiezNodeStore.html#returns","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/react/interfaces/IWaldiezNodeStore.html#onnodeschange","title":"onNodesChange()","text":"<p>onNodesChange: (<code>changes</code>) =&gt; <code>void</code></p> <p>Defined in: src/waldiez/models/Stores/INodeStore.ts:10</p>"},{"location":"reference/react/interfaces/IWaldiezNodeStore.html#parameters_1","title":"Parameters","text":""},{"location":"reference/react/interfaces/IWaldiezNodeStore.html#changes","title":"changes","text":"<p><code>NodeChange</code>[]</p>"},{"location":"reference/react/interfaces/IWaldiezNodeStore.html#returns_1","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/react/interfaces/IWaldiezNodeStore.html#reselectnode","title":"reselectNode()","text":"<p>reselectNode: (<code>id</code>) =&gt; <code>void</code></p> <p>Defined in: src/waldiez/models/Stores/INodeStore.ts:12</p>"},{"location":"reference/react/interfaces/IWaldiezNodeStore.html#parameters_2","title":"Parameters","text":""},{"location":"reference/react/interfaces/IWaldiezNodeStore.html#id","title":"id","text":"<p><code>string</code></p>"},{"location":"reference/react/interfaces/IWaldiezNodeStore.html#returns_2","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/react/interfaces/IWaldiezNodeStore.html#shownodes","title":"showNodes()","text":"<p>showNodes: (<code>nodeType</code>) =&gt; <code>void</code></p> <p>Defined in: src/waldiez/models/Stores/INodeStore.ts:11</p>"},{"location":"reference/react/interfaces/IWaldiezNodeStore.html#parameters_3","title":"Parameters","text":""},{"location":"reference/react/interfaces/IWaldiezNodeStore.html#nodetype","title":"nodeType","text":"<p><code>WaldiezNodeType</code></p>"},{"location":"reference/react/interfaces/IWaldiezNodeStore.html#returns_3","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/react/interfaces/IWaldiezSkillStore.html","title":"IWaldiezSkillStore","text":"<p>@waldiez/react v0.4.5</p> <p>Defined in: src/waldiez/models/Stores/ISkillStore.ts:7</p>"},{"location":"reference/react/interfaces/IWaldiezSkillStore.html#properties","title":"Properties","text":""},{"location":"reference/react/interfaces/IWaldiezSkillStore.html#addskill","title":"addSkill()","text":"<p>addSkill: () =&gt; <code>WaldiezNodeSkill</code></p> <p>Defined in: src/waldiez/models/Stores/ISkillStore.ts:10</p>"},{"location":"reference/react/interfaces/IWaldiezSkillStore.html#returns","title":"Returns","text":"<p><code>WaldiezNodeSkill</code></p>"},{"location":"reference/react/interfaces/IWaldiezSkillStore.html#cloneskill","title":"cloneSkill()","text":"<p>cloneSkill: (<code>id</code>) =&gt; <code>null</code> | <code>WaldiezNodeSkill</code></p> <p>Defined in: src/waldiez/models/Stores/ISkillStore.ts:11</p>"},{"location":"reference/react/interfaces/IWaldiezSkillStore.html#parameters","title":"Parameters","text":""},{"location":"reference/react/interfaces/IWaldiezSkillStore.html#id","title":"id","text":"<p><code>string</code></p>"},{"location":"reference/react/interfaces/IWaldiezSkillStore.html#returns_1","title":"Returns","text":"<p><code>null</code> | <code>WaldiezNodeSkill</code></p>"},{"location":"reference/react/interfaces/IWaldiezSkillStore.html#deleteskill","title":"deleteSkill()","text":"<p>deleteSkill: (<code>id</code>) =&gt; <code>void</code></p> <p>Defined in: src/waldiez/models/Stores/ISkillStore.ts:13</p>"},{"location":"reference/react/interfaces/IWaldiezSkillStore.html#parameters_1","title":"Parameters","text":""},{"location":"reference/react/interfaces/IWaldiezSkillStore.html#id_1","title":"id","text":"<p><code>string</code></p>"},{"location":"reference/react/interfaces/IWaldiezSkillStore.html#returns_2","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/react/interfaces/IWaldiezSkillStore.html#exportskill","title":"exportSkill()","text":"<p>exportSkill: (<code>skillId</code>, <code>hideSecrets</code>) =&gt; <code>object</code></p> <p>Defined in: src/waldiez/models/Stores/ISkillStore.ts:20</p>"},{"location":"reference/react/interfaces/IWaldiezSkillStore.html#parameters_2","title":"Parameters","text":""},{"location":"reference/react/interfaces/IWaldiezSkillStore.html#skillid","title":"skillId","text":"<p><code>string</code></p>"},{"location":"reference/react/interfaces/IWaldiezSkillStore.html#hidesecrets","title":"hideSecrets","text":"<p><code>boolean</code></p>"},{"location":"reference/react/interfaces/IWaldiezSkillStore.html#returns_3","title":"Returns","text":"<p><code>object</code></p>"},{"location":"reference/react/interfaces/IWaldiezSkillStore.html#getskillbyid","title":"getSkillById()","text":"<p>getSkillById: (<code>id</code>) =&gt; <code>null</code> | <code>WaldiezNodeSkill</code></p> <p>Defined in: src/waldiez/models/Stores/ISkillStore.ts:9</p>"},{"location":"reference/react/interfaces/IWaldiezSkillStore.html#parameters_3","title":"Parameters","text":""},{"location":"reference/react/interfaces/IWaldiezSkillStore.html#id_2","title":"id","text":"<p><code>string</code></p>"},{"location":"reference/react/interfaces/IWaldiezSkillStore.html#returns_4","title":"Returns","text":"<p><code>null</code> | <code>WaldiezNodeSkill</code></p>"},{"location":"reference/react/interfaces/IWaldiezSkillStore.html#getskills","title":"getSkills()","text":"<p>getSkills: () =&gt; <code>WaldiezNodeSkill</code>[]</p> <p>Defined in: src/waldiez/models/Stores/ISkillStore.ts:8</p>"},{"location":"reference/react/interfaces/IWaldiezSkillStore.html#returns_5","title":"Returns","text":"<p><code>WaldiezNodeSkill</code>[]</p>"},{"location":"reference/react/interfaces/IWaldiezSkillStore.html#importskill","title":"importSkill()","text":"<p>importSkill: (<code>skill</code>, <code>skillId</code>, <code>position</code>, <code>save</code>) =&gt; <code>WaldiezNodeSkill</code></p> <p>Defined in: src/waldiez/models/Stores/ISkillStore.ts:14</p>"},{"location":"reference/react/interfaces/IWaldiezSkillStore.html#parameters_4","title":"Parameters","text":""},{"location":"reference/react/interfaces/IWaldiezSkillStore.html#skill","title":"skill","text":""},{"location":"reference/react/interfaces/IWaldiezSkillStore.html#skillid_1","title":"skillId","text":"<p><code>string</code></p>"},{"location":"reference/react/interfaces/IWaldiezSkillStore.html#position","title":"position","text":"<p><code>undefined</code> | { <code>x</code>: <code>number</code>; <code>y</code>: <code>number</code>; }</p>"},{"location":"reference/react/interfaces/IWaldiezSkillStore.html#save","title":"save","text":"<p><code>boolean</code></p>"},{"location":"reference/react/interfaces/IWaldiezSkillStore.html#returns_6","title":"Returns","text":"<p><code>WaldiezNodeSkill</code></p>"},{"location":"reference/react/interfaces/IWaldiezSkillStore.html#updateskilldata","title":"updateSkillData()","text":"<p>updateSkillData: (<code>id</code>, <code>data</code>) =&gt; <code>void</code></p> <p>Defined in: src/waldiez/models/Stores/ISkillStore.ts:12</p>"},{"location":"reference/react/interfaces/IWaldiezSkillStore.html#parameters_5","title":"Parameters","text":""},{"location":"reference/react/interfaces/IWaldiezSkillStore.html#id_3","title":"id","text":"<p><code>string</code></p>"},{"location":"reference/react/interfaces/IWaldiezSkillStore.html#data","title":"data","text":"<p><code>Partial</code>\\&lt;<code>WaldiezNodeSkillData</code>&gt;</p>"},{"location":"reference/react/interfaces/IWaldiezSkillStore.html#returns_7","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/react/type-aliases/GroupChatSpeakerSelectionMethodOption.html","title":"GroupChatSpeakerSelectionMethodOption","text":"<p>@waldiez/react v0.4.5</p> <p>GroupChatSpeakerSelectionMethodOption = <code>\"auto\"</code> | <code>\"manual\"</code> | <code>\"random\"</code> | <code>\"round_robin\"</code> | <code>\"custom\"</code></p> <p>Defined in: src/waldiez/models/Agent/GroupManager/types.ts:10</p>"},{"location":"reference/react/type-aliases/GroupChatSpeakerSelectionMode.html","title":"GroupChatSpeakerSelectionMode","text":"<p>@waldiez/react v0.4.5</p> <p>GroupChatSpeakerSelectionMode = <code>\"repeat\"</code> | <code>\"transition\"</code></p> <p>Defined in: src/waldiez/models/Agent/GroupManager/types.ts:12</p>"},{"location":"reference/react/type-aliases/GroupChatSpeakerTransitionsType.html","title":"GroupChatSpeakerTransitionsType","text":"<p>@waldiez/react v0.4.5</p> <p>GroupChatSpeakerTransitionsType = <code>\"allowed\"</code> | <code>\"disallowed\"</code></p> <p>Defined in: src/waldiez/models/Agent/GroupManager/types.ts:13</p>"},{"location":"reference/react/type-aliases/ImportedFlow.html","title":"ImportedFlow","text":"<p>@waldiez/react v0.4.5</p> <p>ImportedFlow = <code>object</code></p> <p>Defined in: src/waldiez/store/types.ts:55</p>"},{"location":"reference/react/type-aliases/ImportedFlow.html#properties","title":"Properties","text":""},{"location":"reference/react/type-aliases/ImportedFlow.html#cacheseed","title":"cacheSeed?","text":"<p><code>optional</code> cacheSeed: <code>number</code> | <code>null</code></p> <p>Defined in: src/waldiez/store/types.ts:62</p>"},{"location":"reference/react/type-aliases/ImportedFlow.html#createdat","title":"createdAt?","text":"<p><code>optional</code> createdAt: <code>string</code></p> <p>Defined in: src/waldiez/store/types.ts:59</p>"},{"location":"reference/react/type-aliases/ImportedFlow.html#description","title":"description","text":"<p>description: <code>string</code></p> <p>Defined in: src/waldiez/store/types.ts:57</p>"},{"location":"reference/react/type-aliases/ImportedFlow.html#edges","title":"edges","text":"<p>edges: <code>Edge</code>[]</p> <p>Defined in: src/waldiez/store/types.ts:65</p>"},{"location":"reference/react/type-aliases/ImportedFlow.html#isasync","title":"isAsync?","text":"<p><code>optional</code> isAsync: <code>boolean</code></p> <p>Defined in: src/waldiez/store/types.ts:61</p>"},{"location":"reference/react/type-aliases/ImportedFlow.html#name","title":"name","text":"<p>name: <code>string</code></p> <p>Defined in: src/waldiez/store/types.ts:56</p>"},{"location":"reference/react/type-aliases/ImportedFlow.html#nodes","title":"nodes","text":"<p>nodes: <code>Node</code>[]</p> <p>Defined in: src/waldiez/store/types.ts:64</p>"},{"location":"reference/react/type-aliases/ImportedFlow.html#requirements","title":"requirements","text":"<p>requirements: <code>string</code>[]</p> <p>Defined in: src/waldiez/store/types.ts:58</p>"},{"location":"reference/react/type-aliases/ImportedFlow.html#tags","title":"tags","text":"<p>tags: <code>string</code>[]</p> <p>Defined in: src/waldiez/store/types.ts:63</p>"},{"location":"reference/react/type-aliases/ImportedFlow.html#updatedat","title":"updatedAt?","text":"<p><code>optional</code> updatedAt: <code>string</code></p> <p>Defined in: src/waldiez/store/types.ts:60</p>"},{"location":"reference/react/type-aliases/ReasoningConfigAnswerApproach.html","title":"ReasoningConfigAnswerApproach","text":"<p>@waldiez/react v0.4.5</p> <p>ReasoningConfigAnswerApproach = <code>\"pool\"</code> | <code>\"best\"</code></p> <p>Defined in: src/waldiez/models/Agent/Reasoning/types.ts:10</p>"},{"location":"reference/react/type-aliases/ReasoningConfigMethod.html","title":"ReasoningConfigMethod","text":"<p>@waldiez/react v0.4.5</p> <p>ReasoningConfigMethod = <code>\"beam_search\"</code> | <code>\"mcts\"</code> | <code>\"lats\"</code> | <code>\"dfs\"</code></p> <p>Defined in: src/waldiez/models/Agent/Reasoning/types.ts:9</p>"},{"location":"reference/react/type-aliases/ThingsToImport.html","title":"ThingsToImport","text":"<p>@waldiez/react v0.4.5</p> <p>ThingsToImport = <code>object</code></p> <p>Defined in: src/waldiez/store/types.ts:68</p>"},{"location":"reference/react/type-aliases/ThingsToImport.html#properties","title":"Properties","text":""},{"location":"reference/react/type-aliases/ThingsToImport.html#cacheseed","title":"cacheSeed?","text":"<p><code>optional</code> cacheSeed: <code>boolean</code> | <code>null</code></p> <p>Defined in: src/waldiez/store/types.ts:76</p>"},{"location":"reference/react/type-aliases/ThingsToImport.html#description","title":"description","text":"<p>description: <code>boolean</code></p> <p>Defined in: src/waldiez/store/types.ts:72</p>"},{"location":"reference/react/type-aliases/ThingsToImport.html#edges","title":"edges","text":"<p>edges: <code>Edge</code>[]</p> <p>Defined in: src/waldiez/store/types.ts:82</p>"},{"location":"reference/react/type-aliases/ThingsToImport.html#everything","title":"everything","text":"<p>everything: <code>boolean</code></p> <p>Defined in: src/waldiez/store/types.ts:70</p>"},{"location":"reference/react/type-aliases/ThingsToImport.html#isasync","title":"isAsync","text":"<p>isAsync: <code>boolean</code></p> <p>Defined in: src/waldiez/store/types.ts:75</p>"},{"location":"reference/react/type-aliases/ThingsToImport.html#name","title":"name","text":"<p>name: <code>boolean</code></p> <p>Defined in: src/waldiez/store/types.ts:71</p>"},{"location":"reference/react/type-aliases/ThingsToImport.html#nodes","title":"nodes","text":"<p>nodes: <code>object</code></p> <p>Defined in: src/waldiez/store/types.ts:77</p>"},{"location":"reference/react/type-aliases/ThingsToImport.html#agents","title":"agents","text":"<p>agents: <code>Node</code>[]</p>"},{"location":"reference/react/type-aliases/ThingsToImport.html#models","title":"models","text":"<p>models: <code>Node</code>[]</p>"},{"location":"reference/react/type-aliases/ThingsToImport.html#skills","title":"skills","text":"<p>skills: <code>Node</code>[]</p>"},{"location":"reference/react/type-aliases/ThingsToImport.html#override","title":"override","text":"<p>override: <code>boolean</code></p> <p>Defined in: src/waldiez/store/types.ts:69</p>"},{"location":"reference/react/type-aliases/ThingsToImport.html#requirements","title":"requirements","text":"<p>requirements: <code>boolean</code></p> <p>Defined in: src/waldiez/store/types.ts:74</p>"},{"location":"reference/react/type-aliases/ThingsToImport.html#tags","title":"tags","text":"<p>tags: <code>boolean</code></p> <p>Defined in: src/waldiez/store/types.ts:73</p>"},{"location":"reference/react/type-aliases/WaldiezAgentCodeExecutionConfig.html","title":"WaldiezAgentCodeExecutionConfig","text":"<p>@waldiez/react v0.4.5</p> <p>WaldiezAgentCodeExecutionConfig = <code>WaldiezAgentCodeExecutionConfigDict</code> | <code>false</code></p> <p>Defined in: src/waldiez/models/Agent/Common/types.ts:28</p> <p>Code execution configuration. either a WaldiezAgentCodeExecutionConfigDict or false (to disable)</p>"},{"location":"reference/react/type-aliases/WaldiezAgentCodeExecutionConfigDict.html","title":"WaldiezAgentCodeExecutionConfigDict","text":"<p>@waldiez/react v0.4.5</p> <p>WaldiezAgentCodeExecutionConfigDict = <code>object</code></p> <p>Defined in: src/waldiez/models/Agent/Common/types.ts:17</p> <p>Code execution configuration.</p>"},{"location":"reference/react/type-aliases/WaldiezAgentCodeExecutionConfigDict.html#param","title":"Param","text":"<p>The working directory</p>"},{"location":"reference/react/type-aliases/WaldiezAgentCodeExecutionConfigDict.html#param_1","title":"Param","text":"<p>Either boolean (to enable/disable) or string (to specify the images)</p>"},{"location":"reference/react/type-aliases/WaldiezAgentCodeExecutionConfigDict.html#param_2","title":"Param","text":"<p>The timeout</p>"},{"location":"reference/react/type-aliases/WaldiezAgentCodeExecutionConfigDict.html#param_3","title":"Param","text":"<p>The last N messages</p>"},{"location":"reference/react/type-aliases/WaldiezAgentCodeExecutionConfigDict.html#param_4","title":"Param","text":"<p>The functions (skill ids) to use</p>"},{"location":"reference/react/type-aliases/WaldiezAgentCodeExecutionConfigDict.html#properties","title":"Properties","text":""},{"location":"reference/react/type-aliases/WaldiezAgentCodeExecutionConfigDict.html#functions","title":"functions?","text":"<p><code>optional</code> functions: <code>string</code>[]</p> <p>Defined in: src/waldiez/models/Agent/Common/types.ts:22</p>"},{"location":"reference/react/type-aliases/WaldiezAgentCodeExecutionConfigDict.html#lastnmessages","title":"lastNMessages?","text":"<p><code>optional</code> lastNMessages: <code>number</code> | <code>\"auto\"</code></p> <p>Defined in: src/waldiez/models/Agent/Common/types.ts:21</p>"},{"location":"reference/react/type-aliases/WaldiezAgentCodeExecutionConfigDict.html#timeout","title":"timeout?","text":"<p><code>optional</code> timeout: <code>number</code></p> <p>Defined in: src/waldiez/models/Agent/Common/types.ts:20</p>"},{"location":"reference/react/type-aliases/WaldiezAgentCodeExecutionConfigDict.html#usedocker","title":"useDocker?","text":"<p><code>optional</code> useDocker: <code>string</code> | <code>string</code>[] | <code>boolean</code></p> <p>Defined in: src/waldiez/models/Agent/Common/types.ts:19</p>"},{"location":"reference/react/type-aliases/WaldiezAgentCodeExecutionConfigDict.html#workdir","title":"workDir?","text":"<p><code>optional</code> workDir: <code>string</code></p> <p>Defined in: src/waldiez/models/Agent/Common/types.ts:18</p>"},{"location":"reference/react/type-aliases/WaldiezAgentCommonData.html","title":"WaldiezAgentCommonData","text":"<p>@waldiez/react v0.4.5</p> <p>WaldiezAgentCommonData = <code>object</code></p> <p>Defined in: src/waldiez/models/Agent/Common/types.ts:94</p> <p>Waldiez agent common (for all agent types) data.</p>"},{"location":"reference/react/type-aliases/WaldiezAgentCommonData.html#param","title":"Param","text":"<p>The name</p>"},{"location":"reference/react/type-aliases/WaldiezAgentCommonData.html#param_1","title":"Param","text":"<p>The description</p>"},{"location":"reference/react/type-aliases/WaldiezAgentCommonData.html#param_2","title":"Param","text":"<p>The parent id</p>"},{"location":"reference/react/type-aliases/WaldiezAgentCommonData.html#param_3","title":"Param","text":"<p>The agent type</p>"},{"location":"reference/react/type-aliases/WaldiezAgentCommonData.html#param_4","title":"Param","text":"<p>The system message</p>"},{"location":"reference/react/type-aliases/WaldiezAgentCommonData.html#param_5","title":"Param","text":"<p>The human input mode</p>"},{"location":"reference/react/type-aliases/WaldiezAgentCommonData.html#param_6","title":"Param","text":"<p>The code execution configuration</p>"},{"location":"reference/react/type-aliases/WaldiezAgentCommonData.html#param_7","title":"Param","text":"<p>The agent default auto reply</p>"},{"location":"reference/react/type-aliases/WaldiezAgentCommonData.html#param_8","title":"Param","text":"<p>The max consecutive auto reply</p>"},{"location":"reference/react/type-aliases/WaldiezAgentCommonData.html#param_9","title":"Param","text":"<p>The termination message check</p>"},{"location":"reference/react/type-aliases/WaldiezAgentCommonData.html#param_10","title":"Param","text":"<p>The nested chats</p>"},{"location":"reference/react/type-aliases/WaldiezAgentCommonData.html#param_11","title":"Param","text":"<p>The model ids</p>"},{"location":"reference/react/type-aliases/WaldiezAgentCommonData.html#param_12","title":"Param","text":"<p>The linked skills</p>"},{"location":"reference/react/type-aliases/WaldiezAgentCommonData.html#param_13","title":"Param","text":"<p>The tags</p>"},{"location":"reference/react/type-aliases/WaldiezAgentCommonData.html#param_14","title":"Param","text":"<p>The requirements</p>"},{"location":"reference/react/type-aliases/WaldiezAgentCommonData.html#param_15","title":"Param","text":"<p>The created at date</p>"},{"location":"reference/react/type-aliases/WaldiezAgentCommonData.html#param_16","title":"Param","text":"<p>The updated at date</p>"},{"location":"reference/react/type-aliases/WaldiezAgentCommonData.html#properties","title":"Properties","text":""},{"location":"reference/react/type-aliases/WaldiezAgentCommonData.html#agentdefaultautoreply","title":"agentDefaultAutoReply","text":"<p>agentDefaultAutoReply: <code>string</code> | <code>null</code></p> <p>Defined in: src/waldiez/models/Agent/Common/types.ts:102</p>"},{"location":"reference/react/type-aliases/WaldiezAgentCommonData.html#agenttype","title":"agentType","text":"<p>agentType: <code>WaldiezNodeAgentType</code></p> <p>Defined in: src/waldiez/models/Agent/Common/types.ts:98</p>"},{"location":"reference/react/type-aliases/WaldiezAgentCommonData.html#codeexecutionconfig","title":"codeExecutionConfig","text":"<p>codeExecutionConfig: <code>WaldiezAgentCodeExecutionConfig</code></p> <p>Defined in: src/waldiez/models/Agent/Common/types.ts:101</p>"},{"location":"reference/react/type-aliases/WaldiezAgentCommonData.html#createdat","title":"createdAt","text":"<p>createdAt: <code>string</code></p> <p>Defined in: src/waldiez/models/Agent/Common/types.ts:112</p>"},{"location":"reference/react/type-aliases/WaldiezAgentCommonData.html#description","title":"description","text":"<p>description: <code>string</code></p> <p>Defined in: src/waldiez/models/Agent/Common/types.ts:96</p>"},{"location":"reference/react/type-aliases/WaldiezAgentCommonData.html#humaninputmode","title":"humanInputMode","text":"<p>humanInputMode: <code>WaldiezAgentHumanInputMode</code></p> <p>Defined in: src/waldiez/models/Agent/Common/types.ts:100</p>"},{"location":"reference/react/type-aliases/WaldiezAgentCommonData.html#maxconsecutiveautoreply","title":"maxConsecutiveAutoReply","text":"<p>maxConsecutiveAutoReply: <code>number</code> | <code>null</code></p> <p>Defined in: src/waldiez/models/Agent/Common/types.ts:103</p>"},{"location":"reference/react/type-aliases/WaldiezAgentCommonData.html#modelids","title":"modelIds","text":"<p>modelIds: <code>string</code>[]</p> <p>Defined in: src/waldiez/models/Agent/Common/types.ts:107</p>"},{"location":"reference/react/type-aliases/WaldiezAgentCommonData.html#name","title":"name","text":"<p>name: <code>string</code></p> <p>Defined in: src/waldiez/models/Agent/Common/types.ts:95</p>"},{"location":"reference/react/type-aliases/WaldiezAgentCommonData.html#nestedchats","title":"nestedChats","text":"<p>nestedChats: <code>WaldiezAgentNestedChat</code>[]</p> <p>Defined in: src/waldiez/models/Agent/Common/types.ts:105</p>"},{"location":"reference/react/type-aliases/WaldiezAgentCommonData.html#parentid","title":"parentId","text":"<p>parentId: <code>string</code> | <code>undefined</code> | <code>null</code></p> <p>Defined in: src/waldiez/models/Agent/Common/types.ts:97</p>"},{"location":"reference/react/type-aliases/WaldiezAgentCommonData.html#requirements","title":"requirements","text":"<p>requirements: <code>string</code>[]</p> <p>Defined in: src/waldiez/models/Agent/Common/types.ts:111</p>"},{"location":"reference/react/type-aliases/WaldiezAgentCommonData.html#skills","title":"skills","text":"<p>skills: <code>WaldiezAgentLinkedSkill</code>[]</p> <p>Defined in: src/waldiez/models/Agent/Common/types.ts:108</p>"},{"location":"reference/react/type-aliases/WaldiezAgentCommonData.html#systemmessage","title":"systemMessage","text":"<p>systemMessage: <code>string</code> | <code>null</code></p> <p>Defined in: src/waldiez/models/Agent/Common/types.ts:99</p>"},{"location":"reference/react/type-aliases/WaldiezAgentCommonData.html#tags","title":"tags","text":"<p>tags: <code>string</code>[]</p> <p>Defined in: src/waldiez/models/Agent/Common/types.ts:110</p>"},{"location":"reference/react/type-aliases/WaldiezAgentCommonData.html#termination","title":"termination","text":"<p>termination: <code>WaldiezAgentTerminationMessageCheck</code></p> <p>Defined in: src/waldiez/models/Agent/Common/types.ts:104</p>"},{"location":"reference/react/type-aliases/WaldiezAgentCommonData.html#updatedat","title":"updatedAt","text":"<p>updatedAt: <code>string</code></p> <p>Defined in: src/waldiez/models/Agent/Common/types.ts:113</p>"},{"location":"reference/react/type-aliases/WaldiezAgentHumanInputMode.html","title":"WaldiezAgentHumanInputMode","text":"<p>@waldiez/react v0.4.5</p> <p>WaldiezAgentHumanInputMode = <code>\"ALWAYS\"</code> | <code>\"NEVER\"</code> | <code>\"TERMINATE\"</code></p> <p>Defined in: src/waldiez/models/Agent/Common/types.ts:8</p> <p>Human input mode.</p>"},{"location":"reference/react/type-aliases/WaldiezAgentLinkedSkill.html","title":"WaldiezAgentLinkedSkill","text":"<p>@waldiez/react v0.4.5</p> <p>WaldiezAgentLinkedSkill = <code>object</code></p> <p>Defined in: src/waldiez/models/Agent/Common/types.ts:70</p> <p>Waldiez agent linked skill.</p>"},{"location":"reference/react/type-aliases/WaldiezAgentLinkedSkill.html#param","title":"Param","text":"<p>The skill id</p>"},{"location":"reference/react/type-aliases/WaldiezAgentLinkedSkill.html#param_1","title":"Param","text":"<p>The executor (agent) id</p>"},{"location":"reference/react/type-aliases/WaldiezAgentLinkedSkill.html#properties","title":"Properties","text":""},{"location":"reference/react/type-aliases/WaldiezAgentLinkedSkill.html#executorid","title":"executorId","text":"<p>executorId: <code>string</code></p> <p>Defined in: src/waldiez/models/Agent/Common/types.ts:72</p>"},{"location":"reference/react/type-aliases/WaldiezAgentLinkedSkill.html#id","title":"id","text":"<p>id: <code>string</code></p> <p>Defined in: src/waldiez/models/Agent/Common/types.ts:71</p>"},{"location":"reference/react/type-aliases/WaldiezAgentNestedChat.html","title":"WaldiezAgentNestedChat","text":"<p>@waldiez/react v0.4.5</p> <p>WaldiezAgentNestedChat = <code>object</code></p> <p>Defined in: src/waldiez/models/Agent/Common/types.ts:48</p> <p>Waldiez agent nested chat.</p>"},{"location":"reference/react/type-aliases/WaldiezAgentNestedChat.html#param","title":"Param","text":"<p>The agent ids that trigger the nested chat</p>"},{"location":"reference/react/type-aliases/WaldiezAgentNestedChat.html#param_1","title":"Param","text":"<p>The messages to include in the chat queue</p>"},{"location":"reference/react/type-aliases/WaldiezAgentNestedChat.html#properties","title":"Properties","text":""},{"location":"reference/react/type-aliases/WaldiezAgentNestedChat.html#messages","title":"messages","text":"<p>messages: <code>object</code>[]</p> <p>Defined in: src/waldiez/models/Agent/Common/types.ts:50</p>"},{"location":"reference/react/type-aliases/WaldiezAgentNestedChat.html#id","title":"id","text":"<p>id: <code>string</code></p>"},{"location":"reference/react/type-aliases/WaldiezAgentNestedChat.html#isreply","title":"isReply","text":"<p>isReply: <code>boolean</code></p>"},{"location":"reference/react/type-aliases/WaldiezAgentNestedChat.html#triggeredby","title":"triggeredBy","text":"<p>triggeredBy: <code>string</code>[]</p> <p>Defined in: src/waldiez/models/Agent/Common/types.ts:49</p>"},{"location":"reference/react/type-aliases/WaldiezAgentTerminationCriterionOption.html","title":"WaldiezAgentTerminationCriterionOption","text":"<p>@waldiez/react v0.4.5</p> <p>WaldiezAgentTerminationCriterionOption = <code>\"found\"</code> | <code>\"ending\"</code> | <code>\"exact\"</code></p> <p>Defined in: src/waldiez/models/Agent/Common/types.ts:42</p> <p>Termination criterion (if the termination type is \"keyword\").</p>"},{"location":"reference/react/type-aliases/WaldiezAgentTerminationCriterionOption.html#param","title":"Param","text":"<p>Termination when found</p>"},{"location":"reference/react/type-aliases/WaldiezAgentTerminationCriterionOption.html#param_1","title":"Param","text":"<p>Termination when ending</p>"},{"location":"reference/react/type-aliases/WaldiezAgentTerminationCriterionOption.html#param_2","title":"Param","text":"<p>Termination when exact</p>"},{"location":"reference/react/type-aliases/WaldiezAgentTerminationMessageCheck.html","title":"WaldiezAgentTerminationMessageCheck","text":"<p>@waldiez/react v0.4.5</p> <p>WaldiezAgentTerminationMessageCheck = <code>object</code></p> <p>Defined in: src/waldiez/models/Agent/Common/types.ts:59</p> <p>Waldiez agent termination message check.</p>"},{"location":"reference/react/type-aliases/WaldiezAgentTerminationMessageCheck.html#param","title":"Param","text":"<p>The termination type option WaldiezAgentTypeTerminationTypeOption</p>"},{"location":"reference/react/type-aliases/WaldiezAgentTerminationMessageCheck.html#param_1","title":"Param","text":"<p>The keywords (if the termination type is \"keyword\")</p>"},{"location":"reference/react/type-aliases/WaldiezAgentTerminationMessageCheck.html#param_2","title":"Param","text":"<p>The criterion (if the termination type is \"keyword\") WaldiezAgentTerminationCriterionOption</p>"},{"location":"reference/react/type-aliases/WaldiezAgentTerminationMessageCheck.html#param_3","title":"Param","text":"<p>The method content (if the termination type is \"method\")</p>"},{"location":"reference/react/type-aliases/WaldiezAgentTerminationMessageCheck.html#properties","title":"Properties","text":""},{"location":"reference/react/type-aliases/WaldiezAgentTerminationMessageCheck.html#criterion","title":"criterion","text":"<p>criterion: <code>WaldiezAgentTerminationCriterionOption</code> | <code>null</code></p> <p>Defined in: src/waldiez/models/Agent/Common/types.ts:62</p>"},{"location":"reference/react/type-aliases/WaldiezAgentTerminationMessageCheck.html#keywords","title":"keywords","text":"<p>keywords: <code>string</code>[]</p> <p>Defined in: src/waldiez/models/Agent/Common/types.ts:61</p>"},{"location":"reference/react/type-aliases/WaldiezAgentTerminationMessageCheck.html#methodcontent","title":"methodContent","text":"<p>methodContent: <code>string</code> | <code>null</code></p> <p>Defined in: src/waldiez/models/Agent/Common/types.ts:63</p>"},{"location":"reference/react/type-aliases/WaldiezAgentTerminationMessageCheck.html#type","title":"type","text":"<p>type: <code>WaldiezAgentTypeTerminationTypeOption</code></p> <p>Defined in: src/waldiez/models/Agent/Common/types.ts:60</p>"},{"location":"reference/react/type-aliases/WaldiezAgentType.html","title":"WaldiezAgentType","text":"<p>@waldiez/react v0.4.5</p> <p>WaldiezAgentType = <code>\"user\"</code> | <code>\"assistant\"</code> | <code>\"manager\"</code> | <code>\"rag_user\"</code> | <code>\"swarm\"</code> | <code>\"reasoning\"</code> | <code>\"captain\"</code></p> <p>Defined in: src/waldiez/models/Agent/Common/types.ts:116</p>"},{"location":"reference/react/type-aliases/WaldiezAgentTypeTerminationTypeOption.html","title":"WaldiezAgentTypeTerminationTypeOption","text":"<p>@waldiez/react v0.4.5</p> <p>WaldiezAgentTypeTerminationTypeOption = <code>\"none\"</code> | <code>\"keyword\"</code> | <code>\"method\"</code></p> <p>Defined in: src/waldiez/models/Agent/Common/types.ts:35</p> <p>Termination type.</p>"},{"location":"reference/react/type-aliases/WaldiezAgentTypeTerminationTypeOption.html#param","title":"Param","text":"<p>No termination</p>"},{"location":"reference/react/type-aliases/WaldiezAgentTypeTerminationTypeOption.html#param_1","title":"Param","text":"<p>Termination by keyword</p>"},{"location":"reference/react/type-aliases/WaldiezAgentTypeTerminationTypeOption.html#param_2","title":"Param","text":"<p>Termination by method</p>"},{"location":"reference/react/type-aliases/WaldiezCaptainAgentLibEntry.html","title":"WaldiezCaptainAgentLibEntry","text":"<p>@waldiez/react v0.4.5</p> <p>WaldiezCaptainAgentLibEntry = <code>object</code></p> <p>Defined in: src/waldiez/models/Agent/Captain/types.ts:9</p>"},{"location":"reference/react/type-aliases/WaldiezCaptainAgentLibEntry.html#properties","title":"Properties","text":""},{"location":"reference/react/type-aliases/WaldiezCaptainAgentLibEntry.html#description","title":"description","text":"<p>description: <code>string</code></p> <p>Defined in: src/waldiez/models/Agent/Captain/types.ts:11</p>"},{"location":"reference/react/type-aliases/WaldiezCaptainAgentLibEntry.html#name","title":"name","text":"<p>name: <code>string</code></p> <p>Defined in: src/waldiez/models/Agent/Captain/types.ts:10</p>"},{"location":"reference/react/type-aliases/WaldiezCaptainAgentLibEntry.html#systemmessage","title":"systemMessage","text":"<p>systemMessage: <code>string</code></p> <p>Defined in: src/waldiez/models/Agent/Captain/types.ts:12</p>"},{"location":"reference/react/type-aliases/WaldiezChatDataCommon.html","title":"WaldiezChatDataCommon","text":"<p>@waldiez/react v0.4.5</p> <p>WaldiezChatDataCommon = <code>object</code></p> <p>Defined in: src/waldiez/models/Chat/types.ts:24</p>"},{"location":"reference/react/type-aliases/WaldiezChatDataCommon.html#properties","title":"Properties","text":""},{"location":"reference/react/type-aliases/WaldiezChatDataCommon.html#afterwork","title":"afterWork","text":"<p>afterWork: <code>WaldiezSwarmAfterWork</code> | <code>null</code></p> <p>Defined in: src/waldiez/models/Chat/types.ts:35</p>"},{"location":"reference/react/type-aliases/WaldiezChatDataCommon.html#available","title":"available","text":"<p>available: <code>WaldiezSwarmOnConditionAvailable</code></p> <p>Defined in: src/waldiez/models/Chat/types.ts:38</p>"},{"location":"reference/react/type-aliases/WaldiezChatDataCommon.html#clearhistory","title":"clearHistory","text":"<p>clearHistory: <code>boolean</code></p> <p>Defined in: src/waldiez/models/Chat/types.ts:28</p>"},{"location":"reference/react/type-aliases/WaldiezChatDataCommon.html#contextvariables","title":"contextVariables","text":"<p>contextVariables: <code>object</code></p> <p>Defined in: src/waldiez/models/Chat/types.ts:37</p>"},{"location":"reference/react/type-aliases/WaldiezChatDataCommon.html#index-signature","title":"Index Signature","text":"<p>[<code>key</code>: <code>string</code>]: <code>string</code></p>"},{"location":"reference/react/type-aliases/WaldiezChatDataCommon.html#description","title":"description","text":"<p>description: <code>string</code></p> <p>Defined in: src/waldiez/models/Chat/types.ts:25</p>"},{"location":"reference/react/type-aliases/WaldiezChatDataCommon.html#flowafterwork","title":"flowAfterWork","text":"<p>flowAfterWork: <code>WaldiezSwarmAfterWork</code> | <code>null</code></p> <p>Defined in: src/waldiez/models/Chat/types.ts:36</p>"},{"location":"reference/react/type-aliases/WaldiezChatDataCommon.html#maxrounds","title":"maxRounds","text":"<p>maxRounds: <code>number</code></p> <p>Defined in: src/waldiez/models/Chat/types.ts:34</p>"},{"location":"reference/react/type-aliases/WaldiezChatDataCommon.html#maxturns","title":"maxTurns","text":"<p>maxTurns: <code>number</code> | <code>null</code></p> <p>Defined in: src/waldiez/models/Chat/types.ts:33</p>"},{"location":"reference/react/type-aliases/WaldiezChatDataCommon.html#message","title":"message","text":"<p>message: <code>WaldiezMessage</code></p> <p>Defined in: src/waldiez/models/Chat/types.ts:29</p>"},{"location":"reference/react/type-aliases/WaldiezChatDataCommon.html#nestedchat","title":"nestedChat","text":"<p>nestedChat: <code>WaldiezNestedChat</code></p> <p>Defined in: src/waldiez/models/Chat/types.ts:31</p>"},{"location":"reference/react/type-aliases/WaldiezChatDataCommon.html#order","title":"order","text":"<p>order: <code>number</code></p> <p>Defined in: src/waldiez/models/Chat/types.ts:27</p>"},{"location":"reference/react/type-aliases/WaldiezChatDataCommon.html#position","title":"position","text":"<p>position: <code>number</code></p> <p>Defined in: src/waldiez/models/Chat/types.ts:26</p>"},{"location":"reference/react/type-aliases/WaldiezChatDataCommon.html#prerequisites","title":"prerequisites","text":"<p>prerequisites: <code>string</code>[]</p> <p>Defined in: src/waldiez/models/Chat/types.ts:32</p>"},{"location":"reference/react/type-aliases/WaldiezChatDataCommon.html#realsource","title":"realSource","text":"<p>realSource: <code>string</code> | <code>null</code></p> <p>Defined in: src/waldiez/models/Chat/types.ts:39</p>"},{"location":"reference/react/type-aliases/WaldiezChatDataCommon.html#realtarget","title":"realTarget","text":"<p>realTarget: <code>string</code> | <code>null</code></p> <p>Defined in: src/waldiez/models/Chat/types.ts:40</p>"},{"location":"reference/react/type-aliases/WaldiezChatDataCommon.html#summary","title":"summary","text":"<p>summary: <code>WaldiezChatSummary</code></p> <p>Defined in: src/waldiez/models/Chat/types.ts:30</p>"},{"location":"reference/react/type-aliases/WaldiezChatLlmSummaryMethod.html","title":"WaldiezChatLlmSummaryMethod","text":"<p>@waldiez/react v0.4.5</p> <p>WaldiezChatLlmSummaryMethod = <code>\"reflection_with_llm\"</code> | <code>\"last_msg\"</code> | <code>null</code></p> <p>Defined in: src/waldiez/models/Chat/types.ts:12</p>"},{"location":"reference/react/type-aliases/WaldiezChatSummary.html","title":"WaldiezChatSummary","text":"<p>@waldiez/react v0.4.5</p> <p>WaldiezChatSummary = <code>object</code></p> <p>Defined in: src/waldiez/models/Chat/types.ts:13</p>"},{"location":"reference/react/type-aliases/WaldiezChatSummary.html#properties","title":"Properties","text":""},{"location":"reference/react/type-aliases/WaldiezChatSummary.html#args","title":"args","text":"<p>args: <code>object</code></p> <p>Defined in: src/waldiez/models/Chat/types.ts:16</p>"},{"location":"reference/react/type-aliases/WaldiezChatSummary.html#index-signature","title":"Index Signature","text":"<p>[<code>key</code>: <code>string</code>]: <code>any</code></p>"},{"location":"reference/react/type-aliases/WaldiezChatSummary.html#method","title":"method","text":"<p>method: <code>WaldiezChatLlmSummaryMethod</code></p> <p>Defined in: src/waldiez/models/Chat/types.ts:14</p>"},{"location":"reference/react/type-aliases/WaldiezChatSummary.html#prompt","title":"prompt","text":"<p>prompt: <code>string</code></p> <p>Defined in: src/waldiez/models/Chat/types.ts:15</p>"},{"location":"reference/react/type-aliases/WaldiezEdge.html","title":"WaldiezEdge","text":"<p>@waldiez/react v0.4.5</p> <p>WaldiezEdge = <code>Edge</code>\\&lt;<code>WaldiezEdgeData</code>, <code>WaldiezEdgeType</code>&gt;</p> <p>Defined in: src/waldiez/models/Chat/types.ts:48</p>"},{"location":"reference/react/type-aliases/WaldiezEdgeData.html","title":"WaldiezEdgeData","text":"<p>@waldiez/react v0.4.5</p> <p>WaldiezEdgeData = <code>WaldiezChatDataCommon</code> &amp; <code>object</code></p> <p>Defined in: src/waldiez/models/Chat/types.ts:42</p>"},{"location":"reference/react/type-aliases/WaldiezEdgeData.html#type-declaration","title":"Type declaration","text":""},{"location":"reference/react/type-aliases/WaldiezEdgeData.html#label","title":"label","text":"<p>label: <code>string</code></p>"},{"location":"reference/react/type-aliases/WaldiezEdgeType.html","title":"WaldiezEdgeType","text":"<p>@waldiez/react v0.4.5</p> <p>WaldiezEdgeType = <code>\"chat\"</code> | <code>\"group\"</code> | <code>\"nested\"</code> | <code>\"hidden\"</code> | <code>\"swarm\"</code></p> <p>Defined in: src/waldiez/models/Chat/types.ts:46</p>"},{"location":"reference/react/type-aliases/WaldiezFlowInfo.html","title":"WaldiezFlowInfo","text":"<p>@waldiez/react v0.4.5</p> <p>WaldiezFlowInfo = <code>object</code></p> <p>Defined in: src/waldiez/store/types.ts:44</p>"},{"location":"reference/react/type-aliases/WaldiezFlowInfo.html#properties","title":"Properties","text":""},{"location":"reference/react/type-aliases/WaldiezFlowInfo.html#cacheseed","title":"cacheSeed","text":"<p>cacheSeed: <code>number</code> | <code>null</code></p> <p>Defined in: src/waldiez/store/types.ts:52</p>"},{"location":"reference/react/type-aliases/WaldiezFlowInfo.html#description","title":"description","text":"<p>description: <code>string</code></p> <p>Defined in: src/waldiez/store/types.ts:48</p>"},{"location":"reference/react/type-aliases/WaldiezFlowInfo.html#flowid","title":"flowId","text":"<p>flowId: <code>string</code></p> <p>Defined in: src/waldiez/store/types.ts:45</p>"},{"location":"reference/react/type-aliases/WaldiezFlowInfo.html#isasync","title":"isAsync","text":"<p>isAsync: <code>boolean</code></p> <p>Defined in: src/waldiez/store/types.ts:51</p>"},{"location":"reference/react/type-aliases/WaldiezFlowInfo.html#name","title":"name","text":"<p>name: <code>string</code></p> <p>Defined in: src/waldiez/store/types.ts:47</p>"},{"location":"reference/react/type-aliases/WaldiezFlowInfo.html#requirements","title":"requirements","text":"<p>requirements: <code>string</code>[]</p> <p>Defined in: src/waldiez/store/types.ts:50</p>"},{"location":"reference/react/type-aliases/WaldiezFlowInfo.html#storageid","title":"storageId","text":"<p>storageId: <code>string</code></p> <p>Defined in: src/waldiez/store/types.ts:46</p>"},{"location":"reference/react/type-aliases/WaldiezFlowInfo.html#tags","title":"tags","text":"<p>tags: <code>string</code>[]</p> <p>Defined in: src/waldiez/store/types.ts:49</p>"},{"location":"reference/react/type-aliases/WaldiezFlowProps.html","title":"WaldiezFlowProps","text":"<p>@waldiez/react v0.4.5</p> <p>WaldiezFlowProps = <code>ReactFlowJsonObject</code> &amp; <code>object</code></p> <p>Defined in: src/waldiez/types.ts:10</p>"},{"location":"reference/react/type-aliases/WaldiezFlowProps.html#type-declaration","title":"Type declaration","text":""},{"location":"reference/react/type-aliases/WaldiezFlowProps.html#cacheseed","title":"cacheSeed?","text":"<p><code>optional</code> cacheSeed: <code>number</code> | <code>null</code></p>"},{"location":"reference/react/type-aliases/WaldiezFlowProps.html#createdat","title":"createdAt?","text":"<p><code>optional</code> createdAt: <code>string</code></p>"},{"location":"reference/react/type-aliases/WaldiezFlowProps.html#description","title":"description","text":"<p>description: <code>string</code></p>"},{"location":"reference/react/type-aliases/WaldiezFlowProps.html#flowid","title":"flowId","text":"<p>flowId: <code>string</code></p>"},{"location":"reference/react/type-aliases/WaldiezFlowProps.html#isasync","title":"isAsync?","text":"<p><code>optional</code> isAsync: <code>boolean</code></p>"},{"location":"reference/react/type-aliases/WaldiezFlowProps.html#name","title":"name","text":"<p>name: <code>string</code></p>"},{"location":"reference/react/type-aliases/WaldiezFlowProps.html#requirements","title":"requirements","text":"<p>requirements: <code>string</code>[]</p>"},{"location":"reference/react/type-aliases/WaldiezFlowProps.html#storageid","title":"storageId","text":"<p>storageId: <code>string</code></p>"},{"location":"reference/react/type-aliases/WaldiezFlowProps.html#tags","title":"tags","text":"<p>tags: <code>string</code>[]</p>"},{"location":"reference/react/type-aliases/WaldiezFlowProps.html#updatedat","title":"updatedAt?","text":"<p><code>optional</code> updatedAt: <code>string</code></p>"},{"location":"reference/react/type-aliases/WaldiezFlowProps.html#viewport","title":"viewport?","text":"<p><code>optional</code> viewport: <code>Viewport</code></p>"},{"location":"reference/react/type-aliases/WaldiezMessageType.html","title":"WaldiezMessageType","text":"<p>@waldiez/react v0.4.5</p> <p>WaldiezMessageType = <code>\"string\"</code> | <code>\"method\"</code> | <code>\"rag_message_generator\"</code> | <code>\"none\"</code></p> <p>Defined in: src/waldiez/models/Chat/types.ts:10</p>"},{"location":"reference/react/type-aliases/WaldiezModelAPIType.html","title":"WaldiezModelAPIType","text":"<p>@waldiez/react v0.4.5</p> <p>WaldiezModelAPIType = <code>\"openai\"</code> | <code>\"azure\"</code> | <code>\"deepseek\"</code> | <code>\"google\"</code> | <code>\"anthropic\"</code> | <code>\"cohere\"</code> | <code>\"mistral\"</code> | <code>\"groq\"</code> | <code>\"together\"</code> | <code>\"nim\"</code> | <code>\"other\"</code></p> <p>Defined in: src/waldiez/models/Model/types.ts:7</p>"},{"location":"reference/react/type-aliases/WaldiezModelDataCommon.html","title":"WaldiezModelDataCommon","text":"<p>@waldiez/react v0.4.5</p> <p>WaldiezModelDataCommon = <code>object</code></p> <p>Defined in: src/waldiez/models/Model/types.ts:25</p>"},{"location":"reference/react/type-aliases/WaldiezModelDataCommon.html#properties","title":"Properties","text":""},{"location":"reference/react/type-aliases/WaldiezModelDataCommon.html#apikey","title":"apiKey","text":"<p>apiKey: <code>string</code> | <code>null</code></p> <p>Defined in: src/waldiez/models/Model/types.ts:28</p>"},{"location":"reference/react/type-aliases/WaldiezModelDataCommon.html#apitype","title":"apiType","text":"<p>apiType: <code>WaldiezModelAPIType</code></p> <p>Defined in: src/waldiez/models/Model/types.ts:29</p>"},{"location":"reference/react/type-aliases/WaldiezModelDataCommon.html#apiversion","title":"apiVersion","text":"<p>apiVersion: <code>string</code> | <code>null</code></p> <p>Defined in: src/waldiez/models/Model/types.ts:30</p>"},{"location":"reference/react/type-aliases/WaldiezModelDataCommon.html#baseurl","title":"baseUrl","text":"<p>baseUrl: <code>string</code> | <code>null</code></p> <p>Defined in: src/waldiez/models/Model/types.ts:27</p>"},{"location":"reference/react/type-aliases/WaldiezModelDataCommon.html#createdat","title":"createdAt","text":"<p>createdAt: <code>string</code></p> <p>Defined in: src/waldiez/models/Model/types.ts:38</p>"},{"location":"reference/react/type-aliases/WaldiezModelDataCommon.html#defaultheaders","title":"defaultHeaders","text":"<p>defaultHeaders: <code>object</code></p> <p>Defined in: src/waldiez/models/Model/types.ts:34</p>"},{"location":"reference/react/type-aliases/WaldiezModelDataCommon.html#index-signature","title":"Index Signature","text":"<p>[<code>key</code>: <code>string</code>]: <code>string</code></p>"},{"location":"reference/react/type-aliases/WaldiezModelDataCommon.html#description","title":"description","text":"<p>description: <code>string</code></p> <p>Defined in: src/waldiez/models/Model/types.ts:26</p>"},{"location":"reference/react/type-aliases/WaldiezModelDataCommon.html#maxtokens","title":"maxTokens","text":"<p>maxTokens: <code>number</code> | <code>null</code></p> <p>Defined in: src/waldiez/models/Model/types.ts:33</p>"},{"location":"reference/react/type-aliases/WaldiezModelDataCommon.html#price","title":"price","text":"<p>price: <code>WaldiezModelPrice</code></p> <p>Defined in: src/waldiez/models/Model/types.ts:35</p>"},{"location":"reference/react/type-aliases/WaldiezModelDataCommon.html#requirements","title":"requirements","text":"<p>requirements: <code>string</code>[]</p> <p>Defined in: src/waldiez/models/Model/types.ts:36</p>"},{"location":"reference/react/type-aliases/WaldiezModelDataCommon.html#tags","title":"tags","text":"<p>tags: <code>string</code>[]</p> <p>Defined in: src/waldiez/models/Model/types.ts:37</p>"},{"location":"reference/react/type-aliases/WaldiezModelDataCommon.html#temperature","title":"temperature","text":"<p>temperature: <code>number</code> | <code>null</code></p> <p>Defined in: src/waldiez/models/Model/types.ts:31</p>"},{"location":"reference/react/type-aliases/WaldiezModelDataCommon.html#topp","title":"topP","text":"<p>topP: <code>number</code> | <code>null</code></p> <p>Defined in: src/waldiez/models/Model/types.ts:32</p>"},{"location":"reference/react/type-aliases/WaldiezModelDataCommon.html#updatedat","title":"updatedAt","text":"<p>updatedAt: <code>string</code></p> <p>Defined in: src/waldiez/models/Model/types.ts:39</p>"},{"location":"reference/react/type-aliases/WaldiezModelPrice.html","title":"WaldiezModelPrice","text":"<p>@waldiez/react v0.4.5</p> <p>WaldiezModelPrice = <code>object</code></p> <p>Defined in: src/waldiez/models/Model/types.ts:20</p>"},{"location":"reference/react/type-aliases/WaldiezModelPrice.html#properties","title":"Properties","text":""},{"location":"reference/react/type-aliases/WaldiezModelPrice.html#completiontokenpriceper1k","title":"completionTokenPricePer1k","text":"<p>completionTokenPricePer1k: <code>number</code> | <code>null</code></p> <p>Defined in: src/waldiez/models/Model/types.ts:22</p>"},{"location":"reference/react/type-aliases/WaldiezModelPrice.html#promptpriceper1k","title":"promptPricePer1k","text":"<p>promptPricePer1k: <code>number</code> | <code>null</code></p> <p>Defined in: src/waldiez/models/Model/types.ts:21</p>"},{"location":"reference/react/type-aliases/WaldiezNestedChat.html","title":"WaldiezNestedChat","text":"<p>@waldiez/react v0.4.5</p> <p>WaldiezNestedChat = <code>object</code></p> <p>Defined in: src/waldiez/models/Chat/types.ts:19</p>"},{"location":"reference/react/type-aliases/WaldiezNestedChat.html#properties","title":"Properties","text":""},{"location":"reference/react/type-aliases/WaldiezNestedChat.html#message","title":"message","text":"<p>message: <code>WaldiezMessage</code> | <code>null</code></p> <p>Defined in: src/waldiez/models/Chat/types.ts:20</p>"},{"location":"reference/react/type-aliases/WaldiezNestedChat.html#reply","title":"reply","text":"<p>reply: <code>WaldiezMessage</code> | <code>null</code></p> <p>Defined in: src/waldiez/models/Chat/types.ts:21</p>"},{"location":"reference/react/type-aliases/WaldiezNodeAgent.html","title":"WaldiezNodeAgent","text":"<p>@waldiez/react v0.4.5</p> <p>WaldiezNodeAgent = <code>WaldiezNodeAgentAssistant</code> | <code>WaldiezNodeAgentGroupManager</code> | <code>WaldiezNodeAgentRagUser</code> | <code>WaldiezNodeAgentReasoning</code> | <code>WaldiezNodeAgentSwarm</code> | <code>WaldiezNodeAgentSwarmContainer</code> | <code>WaldiezNodeAgentUserProxy</code> | <code>WaldiezNodeAgentCaptain</code></p> <p>Defined in: src/waldiez/models/Agent/types.ts:39</p>"},{"location":"reference/react/type-aliases/WaldiezNodeAgentAssistant.html","title":"WaldiezNodeAgentAssistant","text":"<p>@waldiez/react v0.4.5</p> <p>WaldiezNodeAgentAssistant = <code>Node</code>\\&lt;<code>WaldiezNodeAgentAssistantData</code>, <code>\"agent\"</code>&gt;</p> <p>Defined in: src/waldiez/models/Agent/Assistant/types.ts:13</p>"},{"location":"reference/react/type-aliases/WaldiezNodeAgentAssistantData.html","title":"WaldiezNodeAgentAssistantData","text":"<p>@waldiez/react v0.4.5</p> <p>WaldiezNodeAgentAssistantData = <code>WaldiezAgentCommonData</code> &amp; <code>object</code></p> <p>Defined in: src/waldiez/models/Agent/Assistant/types.ts:9</p>"},{"location":"reference/react/type-aliases/WaldiezNodeAgentAssistantData.html#type-declaration","title":"Type declaration","text":""},{"location":"reference/react/type-aliases/WaldiezNodeAgentAssistantData.html#label","title":"label","text":"<p>label: <code>string</code></p>"},{"location":"reference/react/type-aliases/WaldiezNodeAgentCaptain.html","title":"WaldiezNodeAgentCaptain","text":"<p>@waldiez/react v0.4.5</p> <p>WaldiezNodeAgentCaptain = <code>Node</code>\\&lt;<code>WaldiezNodeAgentCaptainData</code>, <code>\"agent\"</code>&gt;</p> <p>Defined in: src/waldiez/models/Agent/Captain/types.ts:23</p>"},{"location":"reference/react/type-aliases/WaldiezNodeAgentCaptainData.html","title":"WaldiezNodeAgentCaptainData","text":"<p>@waldiez/react v0.4.5</p> <p>WaldiezNodeAgentCaptainData = <code>WaldiezAgentCommonData</code> &amp; <code>object</code></p> <p>Defined in: src/waldiez/models/Agent/Captain/types.ts:15</p>"},{"location":"reference/react/type-aliases/WaldiezNodeAgentCaptainData.html#type-declaration","title":"Type declaration","text":""},{"location":"reference/react/type-aliases/WaldiezNodeAgentCaptainData.html#agentlib","title":"agentLib","text":"<p>agentLib: <code>WaldiezCaptainAgentLibEntry</code>[]</p>"},{"location":"reference/react/type-aliases/WaldiezNodeAgentCaptainData.html#label","title":"label","text":"<p>label: <code>string</code></p>"},{"location":"reference/react/type-aliases/WaldiezNodeAgentCaptainData.html#maxround","title":"maxRound","text":"<p>maxRound: <code>number</code></p>"},{"location":"reference/react/type-aliases/WaldiezNodeAgentCaptainData.html#maxturns","title":"maxTurns","text":"<p>maxTurns: <code>number</code></p>"},{"location":"reference/react/type-aliases/WaldiezNodeAgentCaptainData.html#toollib","title":"toolLib","text":"<p>toolLib: <code>\"default\"</code> | <code>null</code></p>"},{"location":"reference/react/type-aliases/WaldiezNodeAgentData.html","title":"WaldiezNodeAgentData","text":"<p>@waldiez/react v0.4.5</p> <p>WaldiezNodeAgentData = <code>WaldiezNodeAgentAssistantData</code> | <code>WaldiezNodeAgentUserProxyData</code> | <code>WaldiezNodeAgentGroupManagerData</code> | <code>WaldiezNodeAgentRagUserData</code> | <code>WaldiezNodeAgentReasoningData</code> | <code>WaldiezNodeAgentSwarmData</code> | <code>WaldiezNodeAgentSwarmContainerData</code> | <code>WaldiezNodeAgentCaptainData</code></p> <p>Defined in: src/waldiez/models/Agent/types.ts:29</p>"},{"location":"reference/react/type-aliases/WaldiezNodeAgentGroupManager.html","title":"WaldiezNodeAgentGroupManager","text":"<p>@waldiez/react v0.4.5</p> <p>WaldiezNodeAgentGroupManager = <code>Node</code>\\&lt;<code>WaldiezNodeAgentGroupManagerData</code>, <code>\"agent\"</code>&gt;</p> <p>Defined in: src/waldiez/models/Agent/GroupManager/types.ts:23</p>"},{"location":"reference/react/type-aliases/WaldiezNodeAgentGroupManagerData.html","title":"WaldiezNodeAgentGroupManagerData","text":"<p>@waldiez/react v0.4.5</p> <p>WaldiezNodeAgentGroupManagerData = <code>WaldiezAgentCommonData</code> &amp; <code>object</code></p> <p>Defined in: src/waldiez/models/Agent/GroupManager/types.ts:14</p>"},{"location":"reference/react/type-aliases/WaldiezNodeAgentGroupManagerData.html#type-declaration","title":"Type declaration","text":""},{"location":"reference/react/type-aliases/WaldiezNodeAgentGroupManagerData.html#adminname","title":"adminName","text":"<p>adminName: <code>string</code> | <code>null</code></p>"},{"location":"reference/react/type-aliases/WaldiezNodeAgentGroupManagerData.html#enableclearhistory","title":"enableClearHistory?","text":"<p><code>optional</code> enableClearHistory: <code>boolean</code></p>"},{"location":"reference/react/type-aliases/WaldiezNodeAgentGroupManagerData.html#label","title":"label","text":"<p>label: <code>string</code></p>"},{"location":"reference/react/type-aliases/WaldiezNodeAgentGroupManagerData.html#maxround","title":"maxRound","text":"<p>maxRound: <code>number</code> | <code>null</code></p>"},{"location":"reference/react/type-aliases/WaldiezNodeAgentGroupManagerData.html#sendintroductions","title":"sendIntroductions?","text":"<p><code>optional</code> sendIntroductions: <code>boolean</code></p>"},{"location":"reference/react/type-aliases/WaldiezNodeAgentGroupManagerData.html#speakers","title":"speakers","text":"<p>speakers: <code>WaldiezAgentGroupManagerSpeakers</code></p>"},{"location":"reference/react/type-aliases/WaldiezNodeAgentRagUser.html","title":"WaldiezNodeAgentRagUser","text":"<p>@waldiez/react v0.4.5</p> <p>WaldiezNodeAgentRagUser = <code>Node</code>\\&lt;<code>WaldiezNodeAgentRagUserData</code>, <code>\"agent\"</code>&gt;</p> <p>Defined in: src/waldiez/models/Agent/RagUser/types.ts:51</p>"},{"location":"reference/react/type-aliases/WaldiezNodeAgentRagUserData.html","title":"WaldiezNodeAgentRagUserData","text":"<p>@waldiez/react v0.4.5</p> <p>WaldiezNodeAgentRagUserData = <code>WaldiezAgentCommonData</code> &amp; <code>object</code></p> <p>Defined in: src/waldiez/models/Agent/RagUser/types.ts:46</p>"},{"location":"reference/react/type-aliases/WaldiezNodeAgentRagUserData.html#type-declaration","title":"Type declaration","text":""},{"location":"reference/react/type-aliases/WaldiezNodeAgentRagUserData.html#label","title":"label","text":"<p>label: <code>string</code></p>"},{"location":"reference/react/type-aliases/WaldiezNodeAgentRagUserData.html#retrieveconfig","title":"retrieveConfig","text":"<p>retrieveConfig: <code>WaldiezRagUserRetrieveConfig</code></p>"},{"location":"reference/react/type-aliases/WaldiezNodeAgentReasoning.html","title":"WaldiezNodeAgentReasoning","text":"<p>@waldiez/react v0.4.5</p> <p>WaldiezNodeAgentReasoning = <code>Node</code>\\&lt;<code>WaldiezNodeAgentReasoningData</code>, <code>\"agent\"</code>&gt;</p> <p>Defined in: src/waldiez/models/Agent/Reasoning/types.ts:28</p>"},{"location":"reference/react/type-aliases/WaldiezNodeAgentReasoningData.html","title":"WaldiezNodeAgentReasoningData","text":"<p>@waldiez/react v0.4.5</p> <p>WaldiezNodeAgentReasoningData = <code>WaldiezAgentCommonData</code> &amp; <code>object</code></p> <p>Defined in: src/waldiez/models/Agent/Reasoning/types.ts:22</p>"},{"location":"reference/react/type-aliases/WaldiezNodeAgentReasoningData.html#type-declaration","title":"Type declaration","text":""},{"location":"reference/react/type-aliases/WaldiezNodeAgentReasoningData.html#label","title":"label","text":"<p>label: <code>string</code></p>"},{"location":"reference/react/type-aliases/WaldiezNodeAgentReasoningData.html#reasonconfig","title":"reasonConfig","text":"<p>reasonConfig: <code>WaldiezReasoningAgentReasonConfig</code></p>"},{"location":"reference/react/type-aliases/WaldiezNodeAgentReasoningData.html#verbose","title":"verbose","text":"<p>verbose: <code>boolean</code></p>"},{"location":"reference/react/type-aliases/WaldiezNodeAgentSwarm.html","title":"WaldiezNodeAgentSwarm","text":"<p>@waldiez/react v0.4.5</p> <p>WaldiezNodeAgentSwarm = <code>Node</code>\\&lt;<code>WaldiezNodeAgentSwarmData</code>, <code>\"agent\"</code>&gt;</p> <p>Defined in: src/waldiez/models/Agent/Swarm/types.ts:40</p>"},{"location":"reference/react/type-aliases/WaldiezNodeAgentSwarmContainer.html","title":"WaldiezNodeAgentSwarmContainer","text":"<p>@waldiez/react v0.4.5</p> <p>WaldiezNodeAgentSwarmContainer = <code>Node</code>\\&lt;<code>WaldiezNodeAgentSwarmContainerData</code>, <code>\"agent\"</code>&gt;</p> <p>Defined in: src/waldiez/models/Agent/Swarm/types.ts:41</p>"},{"location":"reference/react/type-aliases/WaldiezNodeAgentSwarmContainerData.html","title":"WaldiezNodeAgentSwarmContainerData","text":"<p>@waldiez/react v0.4.5</p> <p>WaldiezNodeAgentSwarmContainerData = <code>WaldiezAgentCommonData</code> &amp; <code>object</code></p> <p>Defined in: src/waldiez/models/Agent/Swarm/types.ts:31</p>"},{"location":"reference/react/type-aliases/WaldiezNodeAgentSwarmContainerData.html#type-declaration","title":"Type declaration","text":""},{"location":"reference/react/type-aliases/WaldiezNodeAgentSwarmContainerData.html#afterwork","title":"afterWork","text":"<p>afterWork: <code>WaldiezSwarmAfterWork</code> | <code>null</code></p>"},{"location":"reference/react/type-aliases/WaldiezNodeAgentSwarmContainerData.html#agenttype","title":"agentType","text":"<p>agentType: <code>\"swarm_container\"</code></p>"},{"location":"reference/react/type-aliases/WaldiezNodeAgentSwarmContainerData.html#contextvariables","title":"contextVariables","text":"<p>contextVariables: <code>object</code></p>"},{"location":"reference/react/type-aliases/WaldiezNodeAgentSwarmContainerData.html#index-signature","title":"Index Signature","text":"<p>[<code>key</code>: <code>string</code>]: <code>string</code></p>"},{"location":"reference/react/type-aliases/WaldiezNodeAgentSwarmContainerData.html#initialagent","title":"initialAgent","text":"<p>initialAgent: <code>string</code> | <code>null</code></p>"},{"location":"reference/react/type-aliases/WaldiezNodeAgentSwarmContainerData.html#label","title":"label","text":"<p>label: <code>string</code></p>"},{"location":"reference/react/type-aliases/WaldiezNodeAgentSwarmContainerData.html#maxrounds","title":"maxRounds","text":"<p>maxRounds: <code>number</code></p>"},{"location":"reference/react/type-aliases/WaldiezNodeAgentSwarmData.html","title":"WaldiezNodeAgentSwarmData","text":"<p>@waldiez/react v0.4.5</p> <p>WaldiezNodeAgentSwarmData = <code>WaldiezAgentCommonData</code> &amp; <code>object</code></p> <p>Defined in: src/waldiez/models/Agent/Swarm/types.ts:22</p>"},{"location":"reference/react/type-aliases/WaldiezNodeAgentSwarmData.html#type-declaration","title":"Type declaration","text":""},{"location":"reference/react/type-aliases/WaldiezNodeAgentSwarmData.html#agenttype","title":"agentType","text":"<p>agentType: <code>\"swarm\"</code></p>"},{"location":"reference/react/type-aliases/WaldiezNodeAgentSwarmData.html#functions","title":"functions","text":"<p>functions: <code>string</code>[]</p>"},{"location":"reference/react/type-aliases/WaldiezNodeAgentSwarmData.html#handoffs","title":"handoffs","text":"<p>handoffs: <code>WaldiezSwarmHandoff</code>[]</p>"},{"location":"reference/react/type-aliases/WaldiezNodeAgentSwarmData.html#isinitial","title":"isInitial","text":"<p>isInitial: <code>boolean</code></p>"},{"location":"reference/react/type-aliases/WaldiezNodeAgentSwarmData.html#label","title":"label","text":"<p>label: <code>string</code></p>"},{"location":"reference/react/type-aliases/WaldiezNodeAgentSwarmData.html#updateagentstatebeforereply","title":"updateAgentStateBeforeReply","text":"<p>updateAgentStateBeforeReply: <code>WaldiezSwarmUpdateSystemMessage</code>[]</p>"},{"location":"reference/react/type-aliases/WaldiezNodeAgentType.html","title":"WaldiezNodeAgentType","text":"<p>@waldiez/react v0.4.5</p> <p>WaldiezNodeAgentType = <code>WaldiezAgentType</code> | <code>\"swarm_container\"</code></p> <p>Defined in: src/waldiez/models/Agent/Common/types.ts:125</p>"},{"location":"reference/react/type-aliases/WaldiezNodeAgentUserProxy.html","title":"WaldiezNodeAgentUserProxy","text":"<p>@waldiez/react v0.4.5</p> <p>WaldiezNodeAgentUserProxy = <code>Node</code>\\&lt;<code>WaldiezNodeAgentUserProxyData</code>, <code>\"agent\"</code>&gt;</p> <p>Defined in: src/waldiez/models/Agent/UserProxy/types.ts:12</p>"},{"location":"reference/react/type-aliases/WaldiezNodeAgentUserProxyData.html","title":"WaldiezNodeAgentUserProxyData","text":"<p>@waldiez/react v0.4.5</p> <p>WaldiezNodeAgentUserProxyData = <code>WaldiezAgentCommonData</code> &amp; <code>object</code></p> <p>Defined in: src/waldiez/models/Agent/UserProxy/types.ts:9</p>"},{"location":"reference/react/type-aliases/WaldiezNodeAgentUserProxyData.html#type-declaration","title":"Type declaration","text":""},{"location":"reference/react/type-aliases/WaldiezNodeAgentUserProxyData.html#label","title":"label","text":"<p>label: <code>string</code></p>"},{"location":"reference/react/type-aliases/WaldiezNodeModel.html","title":"WaldiezNodeModel","text":"<p>@waldiez/react v0.4.5</p> <p>WaldiezNodeModel = <code>Node</code>\\&lt;<code>WaldiezNodeModelData</code>, <code>\"model\"</code>&gt;</p> <p>Defined in: src/waldiez/models/Model/types.ts:46</p>"},{"location":"reference/react/type-aliases/WaldiezNodeModelData.html","title":"WaldiezNodeModelData","text":"<p>@waldiez/react v0.4.5</p> <p>WaldiezNodeModelData = <code>WaldiezModelDataCommon</code> &amp; <code>object</code></p> <p>Defined in: src/waldiez/models/Model/types.ts:42</p>"},{"location":"reference/react/type-aliases/WaldiezNodeModelData.html#type-declaration","title":"Type declaration","text":""},{"location":"reference/react/type-aliases/WaldiezNodeModelData.html#label","title":"label","text":"<p>label: <code>string</code></p>"},{"location":"reference/react/type-aliases/WaldiezNodeSkill.html","title":"WaldiezNodeSkill","text":"<p>@waldiez/react v0.4.5</p> <p>WaldiezNodeSkill = <code>Node</code>\\&lt;<code>WaldiezNodeSkillData</code>, <code>\"skill\"</code>&gt;</p> <p>Defined in: src/waldiez/models/Skill/types.ts:24</p>"},{"location":"reference/react/type-aliases/WaldiezNodeSkillData.html","title":"WaldiezNodeSkillData","text":"<p>@waldiez/react v0.4.5</p> <p>WaldiezNodeSkillData = <code>WaldiezSkillDataCommon</code> &amp; <code>object</code></p> <p>Defined in: src/waldiez/models/Skill/types.ts:20</p>"},{"location":"reference/react/type-aliases/WaldiezNodeSkillData.html#type-declaration","title":"Type declaration","text":""},{"location":"reference/react/type-aliases/WaldiezNodeSkillData.html#label","title":"label","text":"<p>label: <code>string</code></p>"},{"location":"reference/react/type-aliases/WaldiezNodeType.html","title":"WaldiezNodeType","text":"<p>@waldiez/react v0.4.5</p> <p>WaldiezNodeType = <code>\"agent\"</code> | <code>\"model\"</code> | <code>\"skill\"</code></p> <p>Defined in: src/waldiez/models/index.ts:12</p>"},{"location":"reference/react/type-aliases/WaldiezProps.html","title":"WaldiezProps","text":"<p>@waldiez/react v0.4.5</p> <p>WaldiezProps = <code>WaldiezFlowProps</code> &amp; <code>object</code></p> <p>Defined in: src/waldiez/types.ts:23</p>"},{"location":"reference/react/type-aliases/WaldiezProps.html#type-declaration","title":"Type declaration","text":""},{"location":"reference/react/type-aliases/WaldiezProps.html#edges","title":"edges","text":"<p>edges: <code>Edge</code>[]</p>"},{"location":"reference/react/type-aliases/WaldiezProps.html#inputprompt","title":"inputPrompt?","text":"<p><code>optional</code> inputPrompt: { <code>previousMessages</code>: <code>string</code>[]; <code>prompt</code>: <code>string</code>; } | <code>null</code></p>"},{"location":"reference/react/type-aliases/WaldiezProps.html#monacovspath","title":"monacoVsPath?","text":"<p><code>optional</code> monacoVsPath: <code>string</code> | <code>null</code></p>"},{"location":"reference/react/type-aliases/WaldiezProps.html#nodes","title":"nodes","text":"<p>nodes: <code>Node</code>[]</p>"},{"location":"reference/react/type-aliases/WaldiezProps.html#onchange","title":"onChange?","text":"<p><code>optional</code> onChange: (<code>flow</code>) =&gt; <code>void</code> | <code>null</code></p>"},{"location":"reference/react/type-aliases/WaldiezProps.html#onconvert","title":"onConvert?","text":"<p><code>optional</code> onConvert: (<code>flow</code>, <code>to</code>) =&gt; <code>void</code> | <code>null</code></p>"},{"location":"reference/react/type-aliases/WaldiezProps.html#onrun","title":"onRun?","text":"<p><code>optional</code> onRun: (<code>flow</code>) =&gt; <code>void</code> | <code>null</code></p>"},{"location":"reference/react/type-aliases/WaldiezProps.html#onsave","title":"onSave?","text":"<p><code>optional</code> onSave: (<code>flow</code>) =&gt; <code>void</code> | <code>null</code></p>"},{"location":"reference/react/type-aliases/WaldiezProps.html#onupload","title":"onUpload?","text":"<p><code>optional</code> onUpload: (<code>files</code>) =&gt; <code>Promise</code>\\&lt;<code>string</code>[]&gt; | <code>null</code></p>"},{"location":"reference/react/type-aliases/WaldiezProps.html#onuserinput","title":"onUserInput?","text":"<p><code>optional</code> onUserInput: (<code>input</code>) =&gt; <code>void</code> | <code>null</code></p>"},{"location":"reference/react/type-aliases/WaldiezProps.html#readonly","title":"readOnly?","text":"<p><code>optional</code> readOnly: <code>boolean</code> | <code>null</code></p>"},{"location":"reference/react/type-aliases/WaldiezProps.html#skipexport","title":"skipExport?","text":"<p><code>optional</code> skipExport: <code>boolean</code> | <code>null</code></p>"},{"location":"reference/react/type-aliases/WaldiezProps.html#skiphub","title":"skipHub?","text":"<p><code>optional</code> skipHub: <code>boolean</code> | <code>null</code></p>"},{"location":"reference/react/type-aliases/WaldiezProps.html#skipimport","title":"skipImport?","text":"<p><code>optional</code> skipImport: <code>boolean</code> | <code>null</code></p>"},{"location":"reference/react/type-aliases/WaldiezProps.html#viewport","title":"viewport?","text":"<p><code>optional</code> viewport: <code>Viewport</code></p>"},{"location":"reference/react/type-aliases/WaldiezProviderProps.html","title":"WaldiezProviderProps","text":"<p>@waldiez/react v0.4.5</p> <p>WaldiezProviderProps = <code>React.PropsWithChildren</code>\\&lt;<code>WaldiezStoreProps</code>&gt;</p> <p>Defined in: src/waldiez/store/types.ts:103</p>"},{"location":"reference/react/type-aliases/WaldiezRagUserRetrieveConfig.html","title":"WaldiezRagUserRetrieveConfig","text":"<p>@waldiez/react v0.4.5</p> <p>WaldiezRagUserRetrieveConfig = <code>object</code></p> <p>Defined in: src/waldiez/models/Agent/RagUser/types.ts:17</p>"},{"location":"reference/react/type-aliases/WaldiezRagUserRetrieveConfig.html#properties","title":"Properties","text":""},{"location":"reference/react/type-aliases/WaldiezRagUserRetrieveConfig.html#chunkmode","title":"chunkMode","text":"<p>chunkMode: <code>\"multi_lines\"</code> | <code>\"one_line\"</code></p> <p>Defined in: src/waldiez/models/Agent/RagUser/types.ts:26</p>"},{"location":"reference/react/type-aliases/WaldiezRagUserRetrieveConfig.html#chunktokensize","title":"chunkTokenSize","text":"<p>chunkTokenSize: <code>number</code> | <code>null</code></p> <p>Defined in: src/waldiez/models/Agent/RagUser/types.ts:24</p>"},{"location":"reference/react/type-aliases/WaldiezRagUserRetrieveConfig.html#collectionname","title":"collectionName","text":"<p>collectionName: <code>string</code> | <code>null</code></p> <p>Defined in: src/waldiez/models/Agent/RagUser/types.ts:33</p>"},{"location":"reference/react/type-aliases/WaldiezRagUserRetrieveConfig.html#contextmaxtokens","title":"contextMaxTokens","text":"<p>contextMaxTokens: <code>number</code> | <code>null</code></p> <p>Defined in: src/waldiez/models/Agent/RagUser/types.ts:25</p>"},{"location":"reference/react/type-aliases/WaldiezRagUserRetrieveConfig.html#customizedanswerprefix","title":"customizedAnswerPrefix","text":"<p>customizedAnswerPrefix: <code>string</code> | <code>null</code></p> <p>Defined in: src/waldiez/models/Agent/RagUser/types.ts:31</p>"},{"location":"reference/react/type-aliases/WaldiezRagUserRetrieveConfig.html#customizedprompt","title":"customizedPrompt","text":"<p>customizedPrompt: <code>string</code> | <code>null</code></p> <p>Defined in: src/waldiez/models/Agent/RagUser/types.ts:30</p>"},{"location":"reference/react/type-aliases/WaldiezRagUserRetrieveConfig.html#customtextsplitfunction","title":"customTextSplitFunction","text":"<p>customTextSplitFunction: <code>string</code> | <code>null</code></p> <p>Defined in: src/waldiez/models/Agent/RagUser/types.ts:39</p>"},{"location":"reference/react/type-aliases/WaldiezRagUserRetrieveConfig.html#customtexttypes","title":"customTextTypes","text":"<p>customTextTypes: <code>string</code>[]</p> <p>Defined in: src/waldiez/models/Agent/RagUser/types.ts:40</p>"},{"location":"reference/react/type-aliases/WaldiezRagUserRetrieveConfig.html#customtokencountfunction","title":"customTokenCountFunction","text":"<p>customTokenCountFunction: <code>string</code> | <code>null</code></p> <p>Defined in: src/waldiez/models/Agent/RagUser/types.ts:37</p>"},{"location":"reference/react/type-aliases/WaldiezRagUserRetrieveConfig.html#dbconfig","title":"dbConfig","text":"<p>dbConfig: <code>WaldiezVectorDbConfig</code></p> <p>Defined in: src/waldiez/models/Agent/RagUser/types.ts:20</p>"},{"location":"reference/react/type-aliases/WaldiezRagUserRetrieveConfig.html#distancethreshold","title":"distanceThreshold","text":"<p>distanceThreshold: <code>number</code> | <code>null</code></p> <p>Defined in: src/waldiez/models/Agent/RagUser/types.ts:42</p>"},{"location":"reference/react/type-aliases/WaldiezRagUserRetrieveConfig.html#docspath","title":"docsPath","text":"<p>docsPath: <code>string</code>[]</p> <p>Defined in: src/waldiez/models/Agent/RagUser/types.ts:21</p>"},{"location":"reference/react/type-aliases/WaldiezRagUserRetrieveConfig.html#embeddingfunction","title":"embeddingFunction","text":"<p>embeddingFunction: <code>string</code> | <code>null</code></p> <p>Defined in: src/waldiez/models/Agent/RagUser/types.ts:29</p>"},{"location":"reference/react/type-aliases/WaldiezRagUserRetrieveConfig.html#getorcreate","title":"getOrCreate","text":"<p>getOrCreate: <code>boolean</code></p> <p>Defined in: src/waldiez/models/Agent/RagUser/types.ts:34</p>"},{"location":"reference/react/type-aliases/WaldiezRagUserRetrieveConfig.html#model","title":"model","text":"<p>model: <code>string</code> | <code>null</code></p> <p>Defined in: src/waldiez/models/Agent/RagUser/types.ts:23</p>"},{"location":"reference/react/type-aliases/WaldiezRagUserRetrieveConfig.html#mustbreakatemptyline","title":"mustBreakAtEmptyLine","text":"<p>mustBreakAtEmptyLine: <code>boolean</code></p> <p>Defined in: src/waldiez/models/Agent/RagUser/types.ts:27</p>"},{"location":"reference/react/type-aliases/WaldiezRagUserRetrieveConfig.html#n_results","title":"n_results","text":"<p>n_results: <code>number</code> | <code>null</code></p> <p>Defined in: src/waldiez/models/Agent/RagUser/types.ts:43</p>"},{"location":"reference/react/type-aliases/WaldiezRagUserRetrieveConfig.html#newdocs","title":"newDocs","text":"<p>newDocs: <code>boolean</code></p> <p>Defined in: src/waldiez/models/Agent/RagUser/types.ts:22</p>"},{"location":"reference/react/type-aliases/WaldiezRagUserRetrieveConfig.html#overwrite","title":"overwrite","text":"<p>overwrite: <code>boolean</code></p> <p>Defined in: src/waldiez/models/Agent/RagUser/types.ts:35</p>"},{"location":"reference/react/type-aliases/WaldiezRagUserRetrieveConfig.html#recursive","title":"recursive","text":"<p>recursive: <code>boolean</code></p> <p>Defined in: src/waldiez/models/Agent/RagUser/types.ts:41</p>"},{"location":"reference/react/type-aliases/WaldiezRagUserRetrieveConfig.html#task","title":"task","text":"<p>task: <code>\"code\"</code> | <code>\"qa\"</code> | <code>\"default\"</code></p> <p>Defined in: src/waldiez/models/Agent/RagUser/types.ts:18</p>"},{"location":"reference/react/type-aliases/WaldiezRagUserRetrieveConfig.html#updatecontext","title":"updateContext","text":"<p>updateContext: <code>boolean</code></p> <p>Defined in: src/waldiez/models/Agent/RagUser/types.ts:32</p>"},{"location":"reference/react/type-aliases/WaldiezRagUserRetrieveConfig.html#usecustomembedding","title":"useCustomEmbedding","text":"<p>useCustomEmbedding: <code>boolean</code></p> <p>Defined in: src/waldiez/models/Agent/RagUser/types.ts:28</p>"},{"location":"reference/react/type-aliases/WaldiezRagUserRetrieveConfig.html#usecustomtextsplit","title":"useCustomTextSplit","text":"<p>useCustomTextSplit: <code>boolean</code></p> <p>Defined in: src/waldiez/models/Agent/RagUser/types.ts:38</p>"},{"location":"reference/react/type-aliases/WaldiezRagUserRetrieveConfig.html#usecustomtokencount","title":"useCustomTokenCount","text":"<p>useCustomTokenCount: <code>boolean</code></p> <p>Defined in: src/waldiez/models/Agent/RagUser/types.ts:36</p>"},{"location":"reference/react/type-aliases/WaldiezRagUserRetrieveConfig.html#vectordb","title":"vectorDb","text":"<p>vectorDb: <code>\"chroma\"</code> | <code>\"pgvector\"</code> | <code>\"mongodb\"</code> | <code>\"qdrant\"</code></p> <p>Defined in: src/waldiez/models/Agent/RagUser/types.ts:19</p>"},{"location":"reference/react/type-aliases/WaldiezReasoningAgentReasonConfig.html","title":"WaldiezReasoningAgentReasonConfig","text":"<p>@waldiez/react v0.4.5</p> <p>WaldiezReasoningAgentReasonConfig = <code>object</code></p> <p>Defined in: src/waldiez/models/Agent/Reasoning/types.ts:11</p>"},{"location":"reference/react/type-aliases/WaldiezReasoningAgentReasonConfig.html#properties","title":"Properties","text":""},{"location":"reference/react/type-aliases/WaldiezReasoningAgentReasonConfig.html#answer_approach","title":"answer_approach","text":"<p>answer_approach: <code>ReasoningConfigAnswerApproach</code></p> <p>Defined in: src/waldiez/models/Agent/Reasoning/types.ts:17</p>"},{"location":"reference/react/type-aliases/WaldiezReasoningAgentReasonConfig.html#beam_size","title":"beam_size","text":"<p>beam_size: <code>number</code></p> <p>Defined in: src/waldiez/models/Agent/Reasoning/types.ts:16</p>"},{"location":"reference/react/type-aliases/WaldiezReasoningAgentReasonConfig.html#exploration_constant","title":"exploration_constant","text":"<p>exploration_constant: <code>number</code></p> <p>Defined in: src/waldiez/models/Agent/Reasoning/types.ts:19</p>"},{"location":"reference/react/type-aliases/WaldiezReasoningAgentReasonConfig.html#forest_size","title":"forest_size","text":"<p>forest_size: <code>number</code></p> <p>Defined in: src/waldiez/models/Agent/Reasoning/types.ts:14</p>"},{"location":"reference/react/type-aliases/WaldiezReasoningAgentReasonConfig.html#max_depth","title":"max_depth","text":"<p>max_depth: <code>number</code></p> <p>Defined in: src/waldiez/models/Agent/Reasoning/types.ts:13</p>"},{"location":"reference/react/type-aliases/WaldiezReasoningAgentReasonConfig.html#method","title":"method","text":"<p>method: <code>ReasoningConfigMethod</code></p> <p>Defined in: src/waldiez/models/Agent/Reasoning/types.ts:12</p>"},{"location":"reference/react/type-aliases/WaldiezReasoningAgentReasonConfig.html#nsim","title":"nsim","text":"<p>nsim: <code>number</code></p> <p>Defined in: src/waldiez/models/Agent/Reasoning/types.ts:18</p>"},{"location":"reference/react/type-aliases/WaldiezReasoningAgentReasonConfig.html#rating_scale","title":"rating_scale","text":"<p>rating_scale: <code>number</code></p> <p>Defined in: src/waldiez/models/Agent/Reasoning/types.ts:15</p>"},{"location":"reference/react/type-aliases/WaldiezSkillDataCommon.html","title":"WaldiezSkillDataCommon","text":"<p>@waldiez/react v0.4.5</p> <p>WaldiezSkillDataCommon = <code>object</code></p> <p>Defined in: src/waldiez/models/Skill/types.ts:9</p>"},{"location":"reference/react/type-aliases/WaldiezSkillDataCommon.html#properties","title":"Properties","text":""},{"location":"reference/react/type-aliases/WaldiezSkillDataCommon.html#content","title":"content","text":"<p>content: <code>string</code></p> <p>Defined in: src/waldiez/models/Skill/types.ts:10</p>"},{"location":"reference/react/type-aliases/WaldiezSkillDataCommon.html#createdat","title":"createdAt","text":"<p>createdAt: <code>string</code></p> <p>Defined in: src/waldiez/models/Skill/types.ts:16</p>"},{"location":"reference/react/type-aliases/WaldiezSkillDataCommon.html#description","title":"description","text":"<p>description: <code>string</code></p> <p>Defined in: src/waldiez/models/Skill/types.ts:12</p>"},{"location":"reference/react/type-aliases/WaldiezSkillDataCommon.html#requirements","title":"requirements","text":"<p>requirements: <code>string</code>[]</p> <p>Defined in: src/waldiez/models/Skill/types.ts:14</p>"},{"location":"reference/react/type-aliases/WaldiezSkillDataCommon.html#secrets","title":"secrets","text":"<p>secrets: <code>object</code></p> <p>Defined in: src/waldiez/models/Skill/types.ts:13</p>"},{"location":"reference/react/type-aliases/WaldiezSkillDataCommon.html#index-signature","title":"Index Signature","text":"<p>[<code>key</code>: <code>string</code>]: <code>string</code></p>"},{"location":"reference/react/type-aliases/WaldiezSkillDataCommon.html#skilltype","title":"skillType","text":"<p>skillType: <code>WaldiezSkillType</code></p> <p>Defined in: src/waldiez/models/Skill/types.ts:11</p>"},{"location":"reference/react/type-aliases/WaldiezSkillDataCommon.html#tags","title":"tags","text":"<p>tags: <code>string</code>[]</p> <p>Defined in: src/waldiez/models/Skill/types.ts:15</p>"},{"location":"reference/react/type-aliases/WaldiezSkillDataCommon.html#updatedat","title":"updatedAt","text":"<p>updatedAt: <code>string</code></p> <p>Defined in: src/waldiez/models/Skill/types.ts:17</p>"},{"location":"reference/react/type-aliases/WaldiezSkillType.html","title":"WaldiezSkillType","text":"<p>@waldiez/react v0.4.5</p> <p>WaldiezSkillType = <code>\"shared\"</code> | <code>\"custom\"</code> | <code>\"langchain\"</code> | <code>\"crewai\"</code></p> <p>Defined in: src/waldiez/models/Skill/types.ts:7</p>"},{"location":"reference/react/type-aliases/WaldiezState.html","title":"WaldiezState","text":"<p>@waldiez/react v0.4.5</p> <p>WaldiezState = <code>WaldiezStoreProps</code> &amp; <code>IWaldiezSkillStore</code> &amp; <code>IWaldiezEdgeStore</code> &amp; <code>IWaldiezModelStore</code> &amp; <code>IWaldiezAgentStore</code> &amp; <code>IWaldiezNodeStore</code> &amp; <code>IWaldiezFlowStore</code></p> <p>Defined in: src/waldiez/store/types.ts:84</p>"},{"location":"reference/react/type-aliases/WaldiezStore.html","title":"WaldiezStore","text":"<p>@waldiez/react v0.4.5</p> <p>WaldiezStore = <code>ReturnType</code>\\&lt;typeof <code>createWaldiezStore</code>&gt;</p> <p>Defined in: src/waldiez/store/types.ts:102</p>"},{"location":"reference/react/type-aliases/WaldiezStoreProps.html","title":"WaldiezStoreProps","text":"<p>@waldiez/react v0.4.5</p> <p>WaldiezStoreProps = <code>object</code></p> <p>Defined in: src/waldiez/store/types.ts:19</p>"},{"location":"reference/react/type-aliases/WaldiezStoreProps.html#properties","title":"Properties","text":""},{"location":"reference/react/type-aliases/WaldiezStoreProps.html#cacheseed","title":"cacheSeed?","text":"<p><code>optional</code> cacheSeed: <code>number</code> | <code>null</code></p> <p>Defined in: src/waldiez/store/types.ts:27</p>"},{"location":"reference/react/type-aliases/WaldiezStoreProps.html#createdat","title":"createdAt?","text":"<p><code>optional</code> createdAt: <code>string</code></p> <p>Defined in: src/waldiez/store/types.ts:32</p>"},{"location":"reference/react/type-aliases/WaldiezStoreProps.html#description","title":"description?","text":"<p><code>optional</code> description: <code>string</code></p> <p>Defined in: src/waldiez/store/types.ts:29</p>"},{"location":"reference/react/type-aliases/WaldiezStoreProps.html#edges","title":"edges","text":"<p>edges: <code>Edge</code>[]</p> <p>Defined in: src/waldiez/store/types.ts:21</p>"},{"location":"reference/react/type-aliases/WaldiezStoreProps.html#flowid","title":"flowId","text":"<p>flowId: <code>string</code></p> <p>Defined in: src/waldiez/store/types.ts:20</p>"},{"location":"reference/react/type-aliases/WaldiezStoreProps.html#isasync","title":"isAsync?","text":"<p><code>optional</code> isAsync: <code>boolean</code></p> <p>Defined in: src/waldiez/store/types.ts:23</p>"},{"location":"reference/react/type-aliases/WaldiezStoreProps.html#isreadonly","title":"isReadOnly?","text":"<p><code>optional</code> isReadOnly: <code>boolean</code></p> <p>Defined in: src/waldiez/store/types.ts:24</p>"},{"location":"reference/react/type-aliases/WaldiezStoreProps.html#name","title":"name?","text":"<p><code>optional</code> name: <code>string</code></p> <p>Defined in: src/waldiez/store/types.ts:28</p>"},{"location":"reference/react/type-aliases/WaldiezStoreProps.html#nodes","title":"nodes","text":"<p>nodes: <code>Node</code>[]</p> <p>Defined in: src/waldiez/store/types.ts:22</p>"},{"location":"reference/react/type-aliases/WaldiezStoreProps.html#onchange","title":"onChange?","text":"<p><code>optional</code> onChange: (<code>content</code>) =&gt; <code>void</code> | <code>null</code></p> <p>Defined in: src/waldiez/store/types.ts:40</p>"},{"location":"reference/react/type-aliases/WaldiezStoreProps.html#onconvert","title":"onConvert?","text":"<p><code>optional</code> onConvert: (<code>flow</code>, <code>to</code>) =&gt; <code>void</code> | <code>null</code></p> <p>Defined in: src/waldiez/store/types.ts:38</p>"},{"location":"reference/react/type-aliases/WaldiezStoreProps.html#onrun","title":"onRun?","text":"<p><code>optional</code> onRun: (<code>flow</code>) =&gt; <code>void</code> | <code>null</code></p> <p>Defined in: src/waldiez/store/types.ts:37</p>"},{"location":"reference/react/type-aliases/WaldiezStoreProps.html#onsave","title":"onSave?","text":"<p><code>optional</code> onSave: (<code>flow</code>) =&gt; <code>void</code> | <code>null</code></p> <p>Defined in: src/waldiez/store/types.ts:41</p>"},{"location":"reference/react/type-aliases/WaldiezStoreProps.html#onupload","title":"onUpload?","text":"<p><code>optional</code> onUpload: (<code>files</code>) =&gt; <code>Promise</code>\\&lt;<code>string</code>[]&gt; | <code>null</code></p> <p>Defined in: src/waldiez/store/types.ts:39</p>"},{"location":"reference/react/type-aliases/WaldiezStoreProps.html#requirements","title":"requirements?","text":"<p><code>optional</code> requirements: <code>string</code>[]</p> <p>Defined in: src/waldiez/store/types.ts:30</p>"},{"location":"reference/react/type-aliases/WaldiezStoreProps.html#rfinstance","title":"rfInstance?","text":"<p><code>optional</code> rfInstance: <code>ReactFlowInstance</code></p> <p>Defined in: src/waldiez/store/types.ts:35</p>"},{"location":"reference/react/type-aliases/WaldiezStoreProps.html#skipexport","title":"skipExport?","text":"<p><code>optional</code> skipExport: <code>boolean</code></p> <p>Defined in: src/waldiez/store/types.ts:26</p>"},{"location":"reference/react/type-aliases/WaldiezStoreProps.html#skipimport","title":"skipImport?","text":"<p><code>optional</code> skipImport: <code>boolean</code></p> <p>Defined in: src/waldiez/store/types.ts:25</p>"},{"location":"reference/react/type-aliases/WaldiezStoreProps.html#storageid","title":"storageId?","text":"<p><code>optional</code> storageId: <code>string</code></p> <p>Defined in: src/waldiez/store/types.ts:31</p>"},{"location":"reference/react/type-aliases/WaldiezStoreProps.html#tags","title":"tags?","text":"<p><code>optional</code> tags: <code>string</code>[]</p> <p>Defined in: src/waldiez/store/types.ts:34</p>"},{"location":"reference/react/type-aliases/WaldiezStoreProps.html#updatedat","title":"updatedAt?","text":"<p><code>optional</code> updatedAt: <code>string</code></p> <p>Defined in: src/waldiez/store/types.ts:33</p>"},{"location":"reference/react/type-aliases/WaldiezStoreProps.html#viewport","title":"viewport?","text":"<p><code>optional</code> viewport: <code>Viewport</code></p> <p>Defined in: src/waldiez/store/types.ts:36</p>"},{"location":"reference/react/type-aliases/WaldiezSwarmAfterWorkOption.html","title":"WaldiezSwarmAfterWorkOption","text":"<p>@waldiez/react v0.4.5</p> <p>WaldiezSwarmAfterWorkOption = <code>\"TERMINATE\"</code> | <code>\"REVERT_TO_USER\"</code> | <code>\"STAY\"</code> | <code>\"SWARM_MANAGER\"</code></p> <p>Defined in: src/waldiez/models/Agent/Swarm/types.ts:13</p>"},{"location":"reference/react/type-aliases/WaldiezSwarmAfterWorkRecipientType.html","title":"WaldiezSwarmAfterWorkRecipientType","text":"<p>@waldiez/react v0.4.5</p> <p>WaldiezSwarmAfterWorkRecipientType = <code>\"agent\"</code> | <code>\"option\"</code> | <code>\"callable\"</code></p> <p>Defined in: src/waldiez/models/Agent/Swarm/types.ts:12</p>"},{"location":"reference/react/type-aliases/WaldiezSwarmHandoff.html","title":"WaldiezSwarmHandoff","text":"<p>@waldiez/react v0.4.5</p> <p>WaldiezSwarmHandoff = <code>WaldiezSwarmAfterWork</code> | <code>WaldiezSwarmOnCondition</code></p> <p>Defined in: src/waldiez/models/Agent/Swarm/types.ts:17</p>"},{"location":"reference/react/type-aliases/WaldiezSwarmOnConditionAvailable.html","title":"WaldiezSwarmOnConditionAvailable","text":"<p>@waldiez/react v0.4.5</p> <p>WaldiezSwarmOnConditionAvailable = <code>object</code></p> <p>Defined in: src/waldiez/models/Agent/Swarm/types.ts:18</p>"},{"location":"reference/react/type-aliases/WaldiezSwarmOnConditionAvailable.html#properties","title":"Properties","text":""},{"location":"reference/react/type-aliases/WaldiezSwarmOnConditionAvailable.html#type","title":"type","text":"<p>type: <code>WaldiezSwarmOnConditionAvailableCheckType</code></p> <p>Defined in: src/waldiez/models/Agent/Swarm/types.ts:19</p>"},{"location":"reference/react/type-aliases/WaldiezSwarmOnConditionAvailable.html#value","title":"value","text":"<p>value: <code>string</code> | <code>null</code></p> <p>Defined in: src/waldiez/models/Agent/Swarm/types.ts:20</p>"},{"location":"reference/react/type-aliases/WaldiezSwarmOnConditionAvailableCheckType.html","title":"WaldiezSwarmOnConditionAvailableCheckType","text":"<p>@waldiez/react v0.4.5</p> <p>WaldiezSwarmOnConditionAvailableCheckType = <code>\"string\"</code> | <code>\"callable\"</code> | <code>\"none\"</code></p> <p>Defined in: src/waldiez/models/Agent/Swarm/types.ts:15</p>"},{"location":"reference/react/type-aliases/WaldiezSwarmOnConditionTargetType.html","title":"WaldiezSwarmOnConditionTargetType","text":"<p>@waldiez/react v0.4.5</p> <p>WaldiezSwarmOnConditionTargetType = <code>\"agent\"</code> | <code>\"nested_chat\"</code></p> <p>Defined in: src/waldiez/models/Agent/Swarm/types.ts:14</p>"},{"location":"reference/react/type-aliases/WaldiezSwarmUpdateSystemMessageType.html","title":"WaldiezSwarmUpdateSystemMessageType","text":"<p>@waldiez/react v0.4.5</p> <p>WaldiezSwarmUpdateSystemMessageType = <code>\"string\"</code> | <code>\"callable\"</code></p> <p>Defined in: src/waldiez/models/Agent/Swarm/types.ts:16</p>"},{"location":"reference/react/type-aliases/WaldiezVectorDbConfig.html","title":"WaldiezVectorDbConfig","text":"<p>@waldiez/react v0.4.5</p> <p>WaldiezVectorDbConfig = <code>object</code></p> <p>Defined in: src/waldiez/models/Agent/RagUser/types.ts:9</p>"},{"location":"reference/react/type-aliases/WaldiezVectorDbConfig.html#properties","title":"Properties","text":""},{"location":"reference/react/type-aliases/WaldiezVectorDbConfig.html#connectionurl","title":"connectionUrl","text":"<p>connectionUrl: <code>string</code> | <code>null</code></p> <p>Defined in: src/waldiez/models/Agent/RagUser/types.ts:14</p>"},{"location":"reference/react/type-aliases/WaldiezVectorDbConfig.html#localstoragepath","title":"localStoragePath","text":"<p>localStoragePath: <code>string</code> | <code>null</code></p> <p>Defined in: src/waldiez/models/Agent/RagUser/types.ts:13</p>"},{"location":"reference/react/type-aliases/WaldiezVectorDbConfig.html#model","title":"model","text":"<p>model: <code>string</code></p> <p>Defined in: src/waldiez/models/Agent/RagUser/types.ts:10</p>"},{"location":"reference/react/type-aliases/WaldiezVectorDbConfig.html#uselocalstorage","title":"useLocalStorage","text":"<p>useLocalStorage: <code>boolean</code></p> <p>Defined in: src/waldiez/models/Agent/RagUser/types.ts:12</p>"},{"location":"reference/react/type-aliases/WaldiezVectorDbConfig.html#usememory","title":"useMemory","text":"<p>useMemory: <code>boolean</code></p> <p>Defined in: src/waldiez/models/Agent/RagUser/types.ts:11</p>"},{"location":"reference/react/type-aliases/typeOfGet.html","title":"typeOfGet","text":"<p>@waldiez/react v0.4.5</p> <p>typeOfGet = () =&gt; <code>WaldiezState</code></p> <p>Defined in: src/waldiez/store/types.ts:101</p>"},{"location":"reference/react/type-aliases/typeOfGet.html#returns","title":"Returns","text":"<p><code>WaldiezState</code></p>"},{"location":"reference/react/type-aliases/typeOfSet.html","title":"typeOfSet","text":"<p>@waldiez/react v0.4.5</p> <p>typeOfSet = (<code>partial</code>, <code>replace?</code>) =&gt; <code>void</code></p> <p>Defined in: src/waldiez/store/types.ts:92</p>"},{"location":"reference/react/type-aliases/typeOfSet.html#parameters","title":"Parameters","text":""},{"location":"reference/react/type-aliases/typeOfSet.html#partial","title":"partial","text":"<p><code>WaldiezState</code> | <code>Partial</code>\\&lt;<code>WaldiezState</code>&gt; | (<code>state</code>) =&gt; <code>WaldiezState</code> | <code>Partial</code>\\&lt;<code>WaldiezState</code>&gt;</p>"},{"location":"reference/react/type-aliases/typeOfSet.html#replace","title":"replace?","text":"<p><code>false</code></p>"},{"location":"reference/react/type-aliases/typeOfSet.html#returns","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/react/variables/DEFAULT_CREWAI_SKILL_CONTENT.html","title":"DEFAULT CREWAI SKILL CONTENT","text":"<p>@waldiez/react v0.4.5</p> <p><code>const</code> DEFAULT_CREWAI_SKILL_CONTENT: \"\\n\\\"\\\"\\\"Replace this with your code.\\n\\nYou can define any of the tools available in the crewai_tools package.\\nYou can explore the full list of available tools in the CrewAI Tools repository:\\nhttps://github.com/crewAIInc/crewAI-tools/tree/main\\n\\nMake sure you have a variable named with the same name as the skill.\\n\\\"\\\"\\\"\\n\\n# Example:\\n# # skill name: 'scrape_tool'\\n#\\n# from crewai_tools import ScrapeWebsiteTool\\n# scrape_tool = ScrapeWebsiteTool()\\n#\\n# Add your code below\\n\\n\"</p> <p>Defined in: src/waldiez/models/Skill/SkillData.ts:102</p>"},{"location":"reference/react/variables/DEFAULT_CUSTOM_SKILL_CONTENT.html","title":"DEFAULT CUSTOM SKILL CONTENT","text":"<p>@waldiez/react v0.4.5</p> <p><code>const</code> DEFAULT_CUSTOM_SKILL_CONTENT: \"\\n\\\"\\\"\\\"Replace this with your code.\\n\\nmake sure a function with the same name\\nas the skill is defined in the code.\\n\\\"\\\"\\\"\\n\\n# Example:\\n# skill name: 'new_skill'\\n#\\n# def new_skill() -&gt; str:\\n#     \\\"\\\"\\\"Skill entry point.\\\"\\\"\\\"\\n#     return \\\"Hello, world!\\\"\\n#\\n# Add your code below\\n\\ndef new_skill() -&gt; None:\\n    \\\"\\\"\\\"Skill entry point.\\\"\\\"\\\"\\n    ...\\n\"</p> <p>Defined in: src/waldiez/models/Skill/SkillData.ts:35</p>"},{"location":"reference/react/variables/DEFAULT_LANGCHAIN_SKILL_CONTENT.html","title":"DEFAULT LANGCHAIN SKILL CONTENT","text":"<p>@waldiez/react v0.4.5</p> <p><code>const</code> DEFAULT_LANGCHAIN_SKILL_CONTENT: \"\\n\\\"\\\"\\\"Replace this with your code.\\n\\nYou can define any of the tools available in the langchain_community package.\\nYou can explore the available tools in the LangChain Community Tools folder:\\nhttps://github.com/langchain-ai/langchain/tree/master/libs/community/langchain_community/tools\\n\\nMake sure you have a variable named with the same name as the skill\\n\\\"\\\"\\\"\\n\\n# Example:\\n# # skill name: 'wiki_tool'\\n#\\n# from langchain_community.tools import WikipediaQueryRun\\n# from langchain_community.utilities import WikipediaAPIWrapper\\n#\\n# api_wrapper = WikipediaAPIWrapper(top_k_results=1, doc_content_chars_max=1000)\\n# wiki_tool = WikipediaQueryRun(api_wrapper=api_wrapper)\\n#\\n# Add your code below\\n\\n\"</p> <p>Defined in: src/waldiez/models/Skill/SkillData.ts:79</p>"},{"location":"reference/react/variables/DEFAULT_SHARED_SKILL_CONTENT.html","title":"DEFAULT SHARED SKILL CONTENT","text":"<p>@waldiez/react v0.4.5</p> <p><code>const</code> DEFAULT_SHARED_SKILL_CONTENT: \"\\n\\\"\\\"\\\"Replace this with your code.\\n\\nAdd any code here that will be placed at the top of the whole flow.\\n\\\"\\\"\\\"\\n\\n# Example:\\n# global variable\\n# DATABASE = {\\n#     \\\"users\\\": [\\n#         {\\\"id\\\": 1, \\\"name\\\": \\\"Alice\\\"},\\n#         {\\\"id\\\": 2, \\\"name\\\": \\\"Bob\\\"},\\n#     ],\\n#     \\\"posts\\\": [\\n#         {\\\"id\\\": 1, \\\"title\\\": \\\"Hello, world!\\\", \\\"author_id\\\": 1},\\n#         {\\\"id\\\": 2, \\\"title\\\": \\\"Another post\\\", \\\"author_id\\\": 2},\\n#     ],\\n# }\\n#\\n# Add your code below\\n\\n\"</p> <p>Defined in: src/waldiez/models/Skill/SkillData.ts:56</p>"},{"location":"reference/react/variables/DEFAULT_SKILL_CONTENT_MAP.html","title":"DEFAULT SKILL CONTENT MAP","text":"<p>@waldiez/react v0.4.5</p> <p><code>const</code> DEFAULT_SKILL_CONTENT_MAP: <code>Record</code>\\&lt;<code>WaldiezSkillType</code>, <code>string</code>&gt;</p> <p>Defined in: src/waldiez/models/Skill/SkillData.ts:122</p>"},{"location":"reference/react/variables/agentMapper.html","title":"agentMapper","text":"<p>@waldiez/react v0.4.5</p> <p><code>const</code> agentMapper: <code>object</code></p> <p>Defined in: src/waldiez/models/mappers/agent/agentMapper.ts:52</p>"},{"location":"reference/react/variables/agentMapper.html#type-declaration","title":"Type declaration","text":""},{"location":"reference/react/variables/agentMapper.html#asnode","title":"asNode()","text":"<p>asNode: (<code>agent</code>, <code>position?</code>, <code>skipLinks?</code>) =&gt; <code>WaldiezNodeAgent</code></p>"},{"location":"reference/react/variables/agentMapper.html#parameters","title":"Parameters","text":""},{"location":"reference/react/variables/agentMapper.html#agent","title":"agent","text":"<p><code>WaldiezAgent</code></p>"},{"location":"reference/react/variables/agentMapper.html#position","title":"position?","text":""},{"location":"reference/react/variables/agentMapper.html#x","title":"x","text":"<p><code>number</code></p>"},{"location":"reference/react/variables/agentMapper.html#y","title":"y","text":"<p><code>number</code></p>"},{"location":"reference/react/variables/agentMapper.html#skiplinks","title":"skipLinks?","text":"<p><code>boolean</code></p>"},{"location":"reference/react/variables/agentMapper.html#returns","title":"Returns","text":"<p><code>WaldiezNodeAgent</code></p>"},{"location":"reference/react/variables/agentMapper.html#exportagent","title":"exportAgent()","text":"<p>exportAgent: (<code>agentNode</code>, <code>skipLinks?</code>) =&gt; <code>any</code></p>"},{"location":"reference/react/variables/agentMapper.html#parameters_1","title":"Parameters","text":""},{"location":"reference/react/variables/agentMapper.html#agentnode","title":"agentNode","text":"<p><code>WaldiezNodeAgent</code></p>"},{"location":"reference/react/variables/agentMapper.html#skiplinks_1","title":"skipLinks?","text":"<p><code>boolean</code></p>"},{"location":"reference/react/variables/agentMapper.html#returns_1","title":"Returns","text":"<p><code>any</code></p>"},{"location":"reference/react/variables/agentMapper.html#importagent","title":"importAgent()","text":"<p>importAgent: (<code>thing</code>, <code>agentId?</code>) =&gt; <code>WaldiezAgent</code></p>"},{"location":"reference/react/variables/agentMapper.html#parameters_2","title":"Parameters","text":""},{"location":"reference/react/variables/agentMapper.html#thing","title":"thing","text":"<p><code>unknown</code></p>"},{"location":"reference/react/variables/agentMapper.html#agentid","title":"agentId?","text":"<p><code>string</code></p>"},{"location":"reference/react/variables/agentMapper.html#returns_2","title":"Returns","text":"<p><code>WaldiezAgent</code></p>"},{"location":"reference/react/variables/chatMapper.html","title":"chatMapper","text":"<p>@waldiez/react v0.4.5</p> <p><code>const</code> chatMapper: <code>object</code></p> <p>Defined in: src/waldiez/models/mappers/chat/chatMapper.ts:38</p>"},{"location":"reference/react/variables/chatMapper.html#type-declaration","title":"Type declaration","text":""},{"location":"reference/react/variables/chatMapper.html#asedge","title":"asEdge()","text":"<p>asEdge: (<code>chat</code>) =&gt; <code>WaldiezEdge</code></p>"},{"location":"reference/react/variables/chatMapper.html#parameters","title":"Parameters","text":""},{"location":"reference/react/variables/chatMapper.html#chat","title":"chat","text":"<p><code>WaldiezChat</code></p>"},{"location":"reference/react/variables/chatMapper.html#returns","title":"Returns","text":"<p><code>WaldiezEdge</code></p>"},{"location":"reference/react/variables/chatMapper.html#exportchat","title":"exportChat()","text":"<p>exportChat: (<code>edge</code>, <code>index</code>) =&gt; <code>any</code></p>"},{"location":"reference/react/variables/chatMapper.html#parameters_1","title":"Parameters","text":""},{"location":"reference/react/variables/chatMapper.html#edge","title":"edge","text":"<p><code>WaldiezEdge</code></p>"},{"location":"reference/react/variables/chatMapper.html#index","title":"index","text":"<p><code>number</code></p>"},{"location":"reference/react/variables/chatMapper.html#returns_1","title":"Returns","text":"<p><code>any</code></p>"},{"location":"reference/react/variables/chatMapper.html#importchat","title":"importChat()","text":"<p>importChat: (<code>json</code>, <code>edges</code>, <code>nodes</code>, <code>index</code>) =&gt; <code>object</code></p>"},{"location":"reference/react/variables/chatMapper.html#parameters_2","title":"Parameters","text":""},{"location":"reference/react/variables/chatMapper.html#json","title":"json","text":"<p><code>unknown</code></p>"},{"location":"reference/react/variables/chatMapper.html#edges","title":"edges","text":"<p><code>Edge</code>[]</p>"},{"location":"reference/react/variables/chatMapper.html#nodes","title":"nodes","text":"<p><code>Node</code>[]</p>"},{"location":"reference/react/variables/chatMapper.html#index_1","title":"index","text":"<p><code>number</code></p>"},{"location":"reference/react/variables/chatMapper.html#returns_2","title":"Returns","text":"<p><code>object</code></p>"},{"location":"reference/react/variables/chatMapper.html#chat_1","title":"chat","text":"<p>chat: <code>WaldiezChat</code></p>"},{"location":"reference/react/variables/chatMapper.html#edge_1","title":"edge","text":"<p>edge: <code>Edge</code></p>"},{"location":"reference/react/variables/defaultReasonConfig.html","title":"defaultReasonConfig","text":"<p>@waldiez/react v0.4.5</p> <p><code>const</code> defaultReasonConfig: <code>WaldiezReasoningAgentReasonConfig</code></p> <p>Defined in: src/waldiez/models/Agent/Reasoning/ReasoningAgentData.ts:15</p>"},{"location":"reference/react/variables/defaultRetrieveConfig.html","title":"defaultRetrieveConfig","text":"<p>@waldiez/react v0.4.5</p> <p><code>const</code> defaultRetrieveConfig: <code>WaldiezRagUserRetrieveConfig</code></p> <p>Defined in: src/waldiez/models/Agent/RagUser/RagUserData.ts:15</p>"},{"location":"reference/react/variables/emptyFlow.html","title":"emptyFlow","text":"<p>@waldiez/react v0.4.5</p> <p><code>const</code> emptyFlow: <code>WaldiezFlow</code></p> <p>Defined in: src/waldiez/models/Flow/Flow.ts:67</p>"},{"location":"reference/react/variables/flowMapper.html","title":"flowMapper","text":"<p>@waldiez/react v0.4.5</p> <p><code>const</code> flowMapper: <code>object</code></p> <p>Defined in: src/waldiez/models/mappers/flow/flowMapper.ts:42</p>"},{"location":"reference/react/variables/flowMapper.html#type-declaration","title":"Type declaration","text":""},{"location":"reference/react/variables/flowMapper.html#exportflow","title":"exportFlow()","text":"<p>exportFlow: (<code>flow</code>, <code>hideSecrets</code>, <code>skipLinks</code>) =&gt; <code>WaldiezFlow</code></p>"},{"location":"reference/react/variables/flowMapper.html#parameters","title":"Parameters","text":""},{"location":"reference/react/variables/flowMapper.html#flow","title":"flow","text":"<p><code>WaldiezFlowProps</code></p>"},{"location":"reference/react/variables/flowMapper.html#hidesecrets","title":"hideSecrets","text":"<p><code>boolean</code></p>"},{"location":"reference/react/variables/flowMapper.html#skiplinks","title":"skipLinks","text":"<p><code>boolean</code> = <code>false</code></p>"},{"location":"reference/react/variables/flowMapper.html#returns","title":"Returns","text":"<p><code>WaldiezFlow</code></p>"},{"location":"reference/react/variables/flowMapper.html#importflow","title":"importFlow()","text":"<p>importFlow: (<code>item</code>, <code>newId?</code>) =&gt; <code>WaldiezFlow</code></p>"},{"location":"reference/react/variables/flowMapper.html#parameters_1","title":"Parameters","text":""},{"location":"reference/react/variables/flowMapper.html#item","title":"item","text":"<p><code>any</code></p>"},{"location":"reference/react/variables/flowMapper.html#newid","title":"newId?","text":"<p><code>string</code></p>"},{"location":"reference/react/variables/flowMapper.html#returns_1","title":"Returns","text":"<p><code>WaldiezFlow</code></p>"},{"location":"reference/react/variables/flowMapper.html#toreactflow","title":"toReactFlow()","text":"<p>toReactFlow(<code>flow</code>): <code>WaldiezFlowProps</code></p>"},{"location":"reference/react/variables/flowMapper.html#parameters_2","title":"Parameters","text":""},{"location":"reference/react/variables/flowMapper.html#flow_1","title":"flow","text":"<p><code>WaldiezFlow</code></p>"},{"location":"reference/react/variables/flowMapper.html#returns_2","title":"Returns","text":"<p><code>WaldiezFlowProps</code></p>"},{"location":"reference/react/variables/modelMapper.html","title":"modelMapper","text":"<p>@waldiez/react v0.4.5</p> <p><code>const</code> modelMapper: <code>object</code></p> <p>Defined in: src/waldiez/models/mappers/model/modelMapper.ts:25</p>"},{"location":"reference/react/variables/modelMapper.html#type-declaration","title":"Type declaration","text":""},{"location":"reference/react/variables/modelMapper.html#asnode","title":"asNode()","text":"<p>asNode: (<code>model</code>, <code>position?</code>) =&gt; <code>WaldiezNodeModel</code></p>"},{"location":"reference/react/variables/modelMapper.html#parameters","title":"Parameters","text":""},{"location":"reference/react/variables/modelMapper.html#model","title":"model","text":"<p><code>WaldiezModel</code></p>"},{"location":"reference/react/variables/modelMapper.html#position","title":"position?","text":""},{"location":"reference/react/variables/modelMapper.html#x","title":"x","text":"<p><code>number</code></p>"},{"location":"reference/react/variables/modelMapper.html#y","title":"y","text":"<p><code>number</code></p>"},{"location":"reference/react/variables/modelMapper.html#returns","title":"Returns","text":"<p><code>WaldiezNodeModel</code></p>"},{"location":"reference/react/variables/modelMapper.html#exportmodel","title":"exportModel()","text":"<p>exportModel: (<code>modelNode</code>, <code>replaceSecrets</code>) =&gt; <code>object</code></p>"},{"location":"reference/react/variables/modelMapper.html#parameters_1","title":"Parameters","text":""},{"location":"reference/react/variables/modelMapper.html#modelnode","title":"modelNode","text":"<p><code>WaldiezNodeModel</code></p>"},{"location":"reference/react/variables/modelMapper.html#replacesecrets","title":"replaceSecrets","text":"<p><code>boolean</code></p>"},{"location":"reference/react/variables/modelMapper.html#returns_1","title":"Returns","text":"<p><code>object</code></p>"},{"location":"reference/react/variables/modelMapper.html#createdat","title":"createdAt","text":"<p>createdAt: <code>string</code> = <code>modelNode.data.createdAt</code></p>"},{"location":"reference/react/variables/modelMapper.html#data","title":"data","text":"<p>data: <code>object</code></p>"},{"location":"reference/react/variables/modelMapper.html#dataapikey","title":"data.apiKey","text":"<p>apiKey: <code>null</code> | <code>string</code></p>"},{"location":"reference/react/variables/modelMapper.html#dataapitype","title":"data.apiType","text":"<p>apiType: <code>WaldiezModelAPIType</code> = <code>modelNode.data.apiType</code></p>"},{"location":"reference/react/variables/modelMapper.html#dataapiversion","title":"data.apiVersion","text":"<p>apiVersion: <code>null</code> | <code>string</code> = <code>modelNode.data.apiVersion</code></p>"},{"location":"reference/react/variables/modelMapper.html#databaseurl","title":"data.baseUrl","text":"<p>baseUrl: <code>null</code> | <code>string</code> = <code>modelNode.data.baseUrl</code></p>"},{"location":"reference/react/variables/modelMapper.html#datadefaultheaders","title":"data.defaultHeaders","text":"<p>defaultHeaders: <code>object</code></p>"},{"location":"reference/react/variables/modelMapper.html#index-signature","title":"Index Signature","text":"<p>[<code>key</code>: <code>string</code>]: <code>string</code></p>"},{"location":"reference/react/variables/modelMapper.html#datamaxtokens","title":"data.maxTokens","text":"<p>maxTokens: <code>null</code> | <code>number</code> = <code>modelNode.data.maxTokens</code></p>"},{"location":"reference/react/variables/modelMapper.html#dataprice","title":"data.price","text":"<p>price: <code>WaldiezModelPrice</code> = <code>modelNode.data.price</code></p>"},{"location":"reference/react/variables/modelMapper.html#datatemperature","title":"data.temperature","text":"<p>temperature: <code>null</code> | <code>number</code> = <code>modelNode.data.temperature</code></p>"},{"location":"reference/react/variables/modelMapper.html#datatopp","title":"data.topP","text":"<p>topP: <code>null</code> | <code>number</code> = <code>modelNode.data.topP</code></p>"},{"location":"reference/react/variables/modelMapper.html#description","title":"description","text":"<p>description: <code>string</code> = <code>modelNode.data.description</code></p>"},{"location":"reference/react/variables/modelMapper.html#id","title":"id","text":"<p>id: <code>string</code> = <code>modelNode.id</code></p>"},{"location":"reference/react/variables/modelMapper.html#name","title":"name","text":"<p>name: <code>string</code> = <code>modelNode.data.label</code></p>"},{"location":"reference/react/variables/modelMapper.html#requirements","title":"requirements","text":"<p>requirements: <code>string</code>[] = <code>modelNode.data.requirements</code></p>"},{"location":"reference/react/variables/modelMapper.html#tags","title":"tags","text":"<p>tags: <code>string</code>[] = <code>modelNode.data.tags</code></p>"},{"location":"reference/react/variables/modelMapper.html#type","title":"type","text":"<p>type: <code>string</code> = <code>\"model\"</code></p>"},{"location":"reference/react/variables/modelMapper.html#updatedat","title":"updatedAt","text":"<p>updatedAt: <code>string</code> = <code>modelNode.data.updatedAt</code></p>"},{"location":"reference/react/variables/modelMapper.html#importmodel","title":"importModel()","text":"<p>importModel: (<code>json</code>) =&gt; <code>WaldiezModel</code></p>"},{"location":"reference/react/variables/modelMapper.html#parameters_2","title":"Parameters","text":""},{"location":"reference/react/variables/modelMapper.html#json","title":"json","text":"<p><code>unknown</code></p>"},{"location":"reference/react/variables/modelMapper.html#returns_2","title":"Returns","text":"<p><code>WaldiezModel</code></p>"},{"location":"reference/react/variables/skillMapper.html","title":"skillMapper","text":"<p>@waldiez/react v0.4.5</p> <p><code>const</code> skillMapper: <code>object</code></p> <p>Defined in: src/waldiez/models/mappers/skill/skillMapper.ts:25</p>"},{"location":"reference/react/variables/skillMapper.html#type-declaration","title":"Type declaration","text":""},{"location":"reference/react/variables/skillMapper.html#asnode","title":"asNode()","text":"<p>asNode: (<code>skill</code>, <code>position?</code>) =&gt; <code>WaldiezNodeSkill</code></p>"},{"location":"reference/react/variables/skillMapper.html#parameters","title":"Parameters","text":""},{"location":"reference/react/variables/skillMapper.html#skill","title":"skill","text":"<p><code>WaldiezSkill</code></p>"},{"location":"reference/react/variables/skillMapper.html#position","title":"position?","text":""},{"location":"reference/react/variables/skillMapper.html#x","title":"x","text":"<p><code>number</code></p>"},{"location":"reference/react/variables/skillMapper.html#y","title":"y","text":"<p><code>number</code></p>"},{"location":"reference/react/variables/skillMapper.html#returns","title":"Returns","text":"<p><code>WaldiezNodeSkill</code></p>"},{"location":"reference/react/variables/skillMapper.html#exportskill","title":"exportSkill()","text":"<p>exportSkill: (<code>skillNode</code>, <code>replaceSecrets</code>) =&gt; <code>object</code></p>"},{"location":"reference/react/variables/skillMapper.html#parameters_1","title":"Parameters","text":""},{"location":"reference/react/variables/skillMapper.html#skillnode","title":"skillNode","text":"<p><code>WaldiezNodeSkill</code></p>"},{"location":"reference/react/variables/skillMapper.html#replacesecrets","title":"replaceSecrets","text":"<p><code>boolean</code></p>"},{"location":"reference/react/variables/skillMapper.html#returns_1","title":"Returns","text":"<p><code>object</code></p>"},{"location":"reference/react/variables/skillMapper.html#importskill","title":"importSkill()","text":"<p>importSkill: (<code>json</code>) =&gt; <code>WaldiezSkill</code></p>"},{"location":"reference/react/variables/skillMapper.html#parameters_2","title":"Parameters","text":""},{"location":"reference/react/variables/skillMapper.html#json","title":"json","text":"<p><code>unknown</code></p>"},{"location":"reference/react/variables/skillMapper.html#returns_2","title":"Returns","text":"<p><code>WaldiezSkill</code></p>"},{"location":"static/On-boarding.html","title":"On-boarding","text":"In\u00a0[\u00a0]: Copied! <pre>!{sys.executable} -m pip install -q ag2==0.3.2 ag2[anthropic]==0.3.2\n</pre> !{sys.executable} -m pip install -q ag2==0.3.2 ag2[anthropic]==0.3.2 In\u00a0[\u00a0]: Copied! <pre># pylint: disable=line-too-long,unknown-option-value,unused-argument,unused-import,invalid-name,import-error,inconsistent-quotes,missing-function-docstring,missing-param-doc,missing-return-doc\nimport csv\nimport os\nimport sqlite3\n</pre> # pylint: disable=line-too-long,unknown-option-value,unused-argument,unused-import,invalid-name,import-error,inconsistent-quotes,missing-function-docstring,missing-param-doc,missing-return-doc import csv import os import sqlite3 In\u00a0[\u00a0]: Copied! <pre>from typing import Any, Callable, Dict, List, Optional, Tuple, Union  # noqa\n</pre> from typing import Any, Callable, Dict, List, Optional, Tuple, Union  # noqa In\u00a0[\u00a0]: Copied! <pre>from autogen import (\n    AssistantAgent,\n    UserProxyAgent,\n    initiate_chats,\n    runtime_logging,\n)\n</pre> from autogen import (     AssistantAgent,     UserProxyAgent,     initiate_chats,     runtime_logging, ) In\u00a0[\u00a0]: Copied! <pre>from waldiez_api_keys import get_model_api_key\n</pre> from waldiez_api_keys import get_model_api_key In\u00a0[\u00a0]: Copied! <pre>gpt_3_5_turbo_llm_config = {\n    \"config_list\": [\n        {\n            \"model\": \"gpt-3.5-turbo\",\n            \"temperature\": 0.5,\n            \"api_type\": \"openai\",\n            \"api_key\": get_model_api_key(\"gpt_3_5_turbo\"),\n        }\n    ]\n}\nclaude_3_5_sonnet_20240620_llm_config = {\n    \"config_list\": [\n        {\n            \"model\": \"claude-3-5-sonnet-20240620\",\n            \"temperature\": 0.5,\n            \"api_type\": \"anthropic\",\n            \"api_key\": get_model_api_key(\"claude_3_5_sonnet_20240620\"),\n        }\n    ]\n}\n</pre> gpt_3_5_turbo_llm_config = {     \"config_list\": [         {             \"model\": \"gpt-3.5-turbo\",             \"temperature\": 0.5,             \"api_type\": \"openai\",             \"api_key\": get_model_api_key(\"gpt_3_5_turbo\"),         }     ] } claude_3_5_sonnet_20240620_llm_config = {     \"config_list\": [         {             \"model\": \"claude-3-5-sonnet-20240620\",             \"temperature\": 0.5,             \"api_type\": \"anthropic\",             \"api_key\": get_model_api_key(\"claude_3_5_sonnet_20240620\"),         }     ] } In\u00a0[\u00a0]: Copied! <pre>customer_proxy = UserProxyAgent(\n    name=\"customer_proxy\",\n    description=\"A user proxy agent\",\n    llm_config=False,\n    human_input_mode=\"ALWAYS\",\n    max_consecutive_auto_reply=None,\n    default_auto_reply=None,\n    code_execution_config=False,\n    is_termination_msg=None,\n)\npersonal_information_agent = AssistantAgent(\n    name=\"personal_information_agent\",\n    description=\"On-boarding Personal information agent\",\n    llm_config=claude_3_5_sonnet_20240620_llm_config,\n    system_message=\"You are a helpful customer on-boarding agent, you are here to help new customers get started with our product. Your job is to gather customer's name and location. Do not ask for other information. Return 'TERMINATE' when you have gathered all the information.\\n\",\n    human_input_mode=\"NEVER\",\n    max_consecutive_auto_reply=None,\n    default_auto_reply=None,\n    code_execution_config=False,\n    is_termination_msg=lambda x: any(\n        x.get(\"content\", \"\") and x.get(\"content\", \"\").endswith(keyword)\n        for keyword in [\"TERMINATE\"]\n    ),\n)\ntopic_preference_agent = AssistantAgent(\n    name=\"topic_preference_agent\",\n    description=\"On-boarding Topic Preference Agent\",\n    llm_config=claude_3_5_sonnet_20240620_llm_config,\n    system_message=\"You are a helpful customer topic preference agent, you are here to help new customers get started with our product. Your job is to gather customer's topic of interest. Do not ask for other information. Return 'TERMINATE' when you have gathered all the information.\\n\",\n    human_input_mode=\"NEVER\",\n    max_consecutive_auto_reply=None,\n    default_auto_reply=None,\n    code_execution_config=False,\n    is_termination_msg=lambda x: any(\n        x.get(\"content\", \"\") and x.get(\"content\", \"\").endswith(keyword)\n        for keyword in [\"TERMINATE\"]\n    ),\n)\ncustomer_engagement_agent = AssistantAgent(\n    name=\"customer_engagement_agent\",\n    description=\"On-boarding Customer Engagement Agent\",\n    llm_config=gpt_3_5_turbo_llm_config,\n    system_message=\"You are a helpful customer service agent here to provide fun for the customer based on the user's personal information and topic preferences. This could include fun facts, jokes, or interesting stories. Make sure to make it engaging and fun! Return 'TERMINATE' when you are done.\",\n    human_input_mode=\"NEVER\",\n    max_consecutive_auto_reply=None,\n    default_auto_reply=None,\n    code_execution_config=False,\n    is_termination_msg=lambda x: any(\n        x.get(\"content\", \"\") and x.get(\"content\", \"\").endswith(keyword)\n        for keyword in [\"TERMINATE\"]\n    ),\n)\n</pre> customer_proxy = UserProxyAgent(     name=\"customer_proxy\",     description=\"A user proxy agent\",     llm_config=False,     human_input_mode=\"ALWAYS\",     max_consecutive_auto_reply=None,     default_auto_reply=None,     code_execution_config=False,     is_termination_msg=None, ) personal_information_agent = AssistantAgent(     name=\"personal_information_agent\",     description=\"On-boarding Personal information agent\",     llm_config=claude_3_5_sonnet_20240620_llm_config,     system_message=\"You are a helpful customer on-boarding agent, you are here to help new customers get started with our product. Your job is to gather customer's name and location. Do not ask for other information. Return 'TERMINATE' when you have gathered all the information.\\n\",     human_input_mode=\"NEVER\",     max_consecutive_auto_reply=None,     default_auto_reply=None,     code_execution_config=False,     is_termination_msg=lambda x: any(         x.get(\"content\", \"\") and x.get(\"content\", \"\").endswith(keyword)         for keyword in [\"TERMINATE\"]     ), ) topic_preference_agent = AssistantAgent(     name=\"topic_preference_agent\",     description=\"On-boarding Topic Preference Agent\",     llm_config=claude_3_5_sonnet_20240620_llm_config,     system_message=\"You are a helpful customer topic preference agent, you are here to help new customers get started with our product. Your job is to gather customer's topic of interest. Do not ask for other information. Return 'TERMINATE' when you have gathered all the information.\\n\",     human_input_mode=\"NEVER\",     max_consecutive_auto_reply=None,     default_auto_reply=None,     code_execution_config=False,     is_termination_msg=lambda x: any(         x.get(\"content\", \"\") and x.get(\"content\", \"\").endswith(keyword)         for keyword in [\"TERMINATE\"]     ), ) customer_engagement_agent = AssistantAgent(     name=\"customer_engagement_agent\",     description=\"On-boarding Customer Engagement Agent\",     llm_config=gpt_3_5_turbo_llm_config,     system_message=\"You are a helpful customer service agent here to provide fun for the customer based on the user's personal information and topic preferences. This could include fun facts, jokes, or interesting stories. Make sure to make it engaging and fun! Return 'TERMINATE' when you are done.\",     human_input_mode=\"NEVER\",     max_consecutive_auto_reply=None,     default_auto_reply=None,     code_execution_config=False,     is_termination_msg=lambda x: any(         x.get(\"content\", \"\") and x.get(\"content\", \"\").endswith(keyword)         for keyword in [\"TERMINATE\"]     ), ) In\u00a0[\u00a0]: Copied! <pre>def sqlite_to_csv(dbname: str, table: str, csv_file: str) -&gt; None:\n    \"\"\"Convert a sqlite table to a csv file.\n\n    Parameters\n    ----------\n    dbname : str\n        The sqlite database name.\n    table : str\n        The table name.\n    csv_file : str\n        The csv file name.\n    \"\"\"\n    conn = sqlite3.connect(dbname)\n    query = f\"SELECT * FROM {table}\"  # nosec\n    try:\n        cursor = conn.execute(query)\n    except sqlite3.OperationalError:\n        conn.close()\n        return\n    rows = cursor.fetchall()\n    column_names = [description[0] for description in cursor.description]\n    data = [dict(zip(column_names, row)) for row in rows]\n    conn.close()\n    with open(csv_file, \"w\", newline=\"\", encoding=\"utf-8\") as file:\n        _csv_writer = csv.DictWriter(file, fieldnames=column_names)\n        _csv_writer.writeheader()\n        _csv_writer.writerows(data)\n</pre> def sqlite_to_csv(dbname: str, table: str, csv_file: str) -&gt; None:     \"\"\"Convert a sqlite table to a csv file.      Parameters     ----------     dbname : str         The sqlite database name.     table : str         The table name.     csv_file : str         The csv file name.     \"\"\"     conn = sqlite3.connect(dbname)     query = f\"SELECT * FROM {table}\"  # nosec     try:         cursor = conn.execute(query)     except sqlite3.OperationalError:         conn.close()         return     rows = cursor.fetchall()     column_names = [description[0] for description in cursor.description]     data = [dict(zip(column_names, row)) for row in rows]     conn.close()     with open(csv_file, \"w\", newline=\"\", encoding=\"utf-8\") as file:         _csv_writer = csv.DictWriter(file, fieldnames=column_names)         _csv_writer.writeheader()         _csv_writer.writerows(data) In\u00a0[\u00a0]: Copied! <pre>runtime_logging.start(\n    logger_type=\"sqlite\",\n    config={\"dbname\": \"flow.db\"},\n)\n</pre> runtime_logging.start(     logger_type=\"sqlite\",     config={\"dbname\": \"flow.db\"}, ) In\u00a0[\u00a0]: Copied! <pre>initiate_chats(\n    [\n        {\n            \"sender\": personal_information_agent,\n            \"recipient\": customer_proxy,\n            \"summary_method\": \"reflection_with_llm\",\n            \"summary_args\": {\n                \"summary_prompt\": \"Return the customer information into as JSON object only: {'name': '', 'location': ''}\",\n                \"summary_role\": \"user\",\n            },\n            \"max_turns\": 1,\n            \"clear_history\": True,\n            \"message\": \"Hello, I'm here to help you get started with our product. Could you tell me your name and location?\",\n        },\n        {\n            \"sender\": topic_preference_agent,\n            \"recipient\": customer_proxy,\n            \"summary_method\": \"reflection_with_llm\",\n            \"summary_args\": {\n                \"summary_prompt\": \"Return the customer information into as JSON object only: {'topic_of_interest': ''}\",\n                \"summary_role\": \"user\",\n            },\n            \"max_turns\": 1,\n            \"clear_history\": True,\n            \"message\": \"Great! Could you tell me what topics you are interested in reading about?\",\n        },\n        {\n            \"sender\": customer_proxy,\n            \"recipient\": customer_engagement_agent,\n            \"summary_method\": \"reflection_with_llm\",\n            \"summary_args\": {\"summary_role\": \"user\"},\n            \"max_turns\": 1,\n            \"clear_history\": True,\n            \"message\": \"Let's find something fun to read.\",\n        },\n    ]\n)\nruntime_logging.stop()\n</pre> initiate_chats(     [         {             \"sender\": personal_information_agent,             \"recipient\": customer_proxy,             \"summary_method\": \"reflection_with_llm\",             \"summary_args\": {                 \"summary_prompt\": \"Return the customer information into as JSON object only: {'name': '', 'location': ''}\",                 \"summary_role\": \"user\",             },             \"max_turns\": 1,             \"clear_history\": True,             \"message\": \"Hello, I'm here to help you get started with our product. Could you tell me your name and location?\",         },         {             \"sender\": topic_preference_agent,             \"recipient\": customer_proxy,             \"summary_method\": \"reflection_with_llm\",             \"summary_args\": {                 \"summary_prompt\": \"Return the customer information into as JSON object only: {'topic_of_interest': ''}\",                 \"summary_role\": \"user\",             },             \"max_turns\": 1,             \"clear_history\": True,             \"message\": \"Great! Could you tell me what topics you are interested in reading about?\",         },         {             \"sender\": customer_proxy,             \"recipient\": customer_engagement_agent,             \"summary_method\": \"reflection_with_llm\",             \"summary_args\": {\"summary_role\": \"user\"},             \"max_turns\": 1,             \"clear_history\": True,             \"message\": \"Let's find something fun to read.\",         },     ] ) runtime_logging.stop() In\u00a0[\u00a0]: Copied! <pre>if not os.path.exists(\"logs\"):\n    os.makedirs(\"logs\")\nfor table in [\n    \"chat_completions\",\n    \"agents\",\n    \"oai_wrappers\",\n    \"oai_clients\",\n    \"version\",\n    \"events\",\n    \"function_calls\",\n]:\n    dest = os.path.join(\"logs\", f\"{table}.csv\")\n    sqlite_to_csv(\"flow.db\", table, dest)\n</pre> if not os.path.exists(\"logs\"):     os.makedirs(\"logs\") for table in [     \"chat_completions\",     \"agents\",     \"oai_wrappers\",     \"oai_clients\",     \"version\",     \"events\",     \"function_calls\", ]:     dest = os.path.join(\"logs\", f\"{table}.csv\")     sqlite_to_csv(\"flow.db\", table, dest)"},{"location":"static/On-boarding.html#on-boarding","title":"On-boarding\u00b6","text":""},{"location":"static/On-boarding.html#dependencies","title":"Dependencies\u00b6","text":""},{"location":"static/On-boarding.html#models","title":"Models\u00b6","text":""},{"location":"static/On-boarding.html#agents","title":"Agents\u00b6","text":""},{"location":"static/On-boarding.html#run-the-flow","title":"Run the flow\u00b6","text":""},{"location":"usage/index.html","title":"Getting Started","text":""},{"location":"usage/index.html#getting-started-with-waldiez","title":"\ud83d\ude80 Getting Started with Waldiez","text":"<p>You can use Waldiez in one of the following ways \u2014 pick the one that works best for you:</p> <ol> <li>\ud83c\udf10 Use the Playground \u2013 no installation required</li> <li>\ud83d\udc0d Install from PyPI \u2013 for full control and customization</li> <li>\ud83d\udc33 Use Docker \u2013 no setup, great for reproducibility</li> <li>\ud83d\udce6 Use the JupyterLab extension \u2013 for interactive notebooks</li> <li>\ud83d\udda5\ufe0f Use the Visual Studio Code extension \u2013 for a familiar IDE experience</li> <li>\ud83c\udfac Use Waldiez Studio \u2013 for a FastAPI-based web UI</li> </ol>"},{"location":"usage/index.html#1-use-the-playground-no-installation-required","title":"\ud83c\udf10 1. Use the Playground (No Installation Required)","text":"<p>You can visit the Playground at: https://waldiez.github.io</p> <p>You can:</p> <ul> <li>\ud83e\udde9 Design and edit Waldiez flows visually</li> <li>\ud83d\udd17 Share flows with others</li> <li>\u2705 Test layout and logic before running locally</li> </ul> <p>Note</p> <p>This is great for quick mockups, or early-stage exploration.</p> <p>Warning</p> <p>The Playground is read-only:</p> <ul> <li>You cannot run or export flows from the Playground.</li> <li>To convert flows to Python code or run them, use the PyPI or Docker options below.</li> </ul>"},{"location":"usage/index.html#2-install-from-pypi-recommended-for-full-functionality","title":"\ud83d\udc0d 2. Install from PyPI (Recommended for Full Functionality)","text":"<p>If you want to create, convert, and run Waldiez flows locally \u2014 with full flexibility \u2014 install Waldiez using pip.</p> <p>This option gives you:</p> <ul> <li>\u2705 Full access to the Python API and CLI  </li> <li>\ud83e\uddea Integration with JupyterLab and Waldiez Studio  </li> <li>\ud83d\udda5\ufe0f Local development with VS Code</li> </ul>"},{"location":"usage/index.html#basic-installation","title":"\ud83d\udce6 Basic Installation","text":""},{"location":"usage/index.html#optional-but-highly-recommended-create-and-activate-a-virtual-environment","title":"(Optional but highly recommended) Create and activate a virtual environment","text":"<pre><code>python3 -m venv .venv\nsource .venv/bin/activate  # or .venv\\Scripts\\Activate.ps1 on Windows\n# Upgrade pip (optional)\npython -m pip install --upgrade pip\n# Install the core Waldiez package\npip install waldiez\n</code></pre>"},{"location":"usage/index.html#optional-extras","title":"\u2795 Optional Extras","text":"<p>Install with extras depending on how you want to work:</p> <pre><code># JupyterLab integration\npip install waldiez[jupyter]  # or pip install waldiez-jupyter\n\n# Waldiez Studio (FastAPI-based web UI)\npip install waldiez[studio]  # or pip install waldiez-studio\n\n# Both\npip install waldiez[studio,jupyter]\n</code></pre> <p>Note</p> <p>These extras enable additional commands like <code>waldiez lab</code> (for JupyterLab) and <code>waldiez studio</code>.</p> <p>\ud83e\uddea Requirements:</p> <ul> <li>Python &gt;= 3.10, &lt; 3.13</li> <li>Optional: Docker/Podman if using containers later</li> </ul>"},{"location":"usage/index.html#3-use-docker-no-setup-required","title":"\ud83d\udc33 3. Use Docker (No Setup Required)","text":"<p>If you don\u2019t want to install Python or manage dependencies, you can use Waldiez directly from prebuilt container images.</p> <p>This option gives you:</p> <ul> <li>\u2705 Full functionality without installing anything</li> <li>\ud83d\udce6 Easy integration in CI, testing, or isolated dev environments</li> <li>\ud83d\udd01 Reproducible setup across teams</li> </ul> <p>Note</p> <p>\ud83d\udce6 Available Images:</p> <ul> <li><code>waldiez/waldiez</code> \u2014 CLI-only: convert and run flows</li> <li><code>waldiez/jupyter</code> \u2014 JupyterLab server with Waldiez extension</li> <li><code>waldiez/studio</code> \u2014 FastAPI web UI for local flow editing and running</li> </ul>"},{"location":"usage/index.html#windows-powershell-with-docker-or-podman-desktop","title":"\ud83e\ude9f Windows (PowerShell with Docker or Podman Desktop)","text":"<pre><code>$flow = \"C:\\Users\\YourName\\Documents\\flow.waldiez\"\n$output = \"C:\\Users\\YourName\\Documents\\waldiez_output\"\n\n# Convert a flow to Python\ndocker run --rm `\n  -v \"$flow:/flow.waldiez\" `\n  -v \"$output:/output\" `\n  waldiez/waldiez convert --file /flow.waldiez --output /output/flow.py\n\n# Convert and run it\ndocker run --rm `\n  -v \"$flow:/flow.waldiez\" `\n  -v \"$output:/output\" `\n  waldiez/waldiez run --file /flow.waldiez --output /output/output.py\n</code></pre> <p>Note</p> <p>If using Hyper-V mode, make sure your files are in a shared folder Docker Desktop has access to. More info: https://docs.docker.com/desktop/settings/windows/#file-sharing</p>"},{"location":"usage/index.html#linuxmacoswsl-docker-or-podman","title":"\ud83d\udc27 Linux/macOS/WSL (Docker or Podman)","text":"<pre><code># Convert a flow to a Python script\ndocker run --rm \\\n  -v $(pwd)/flow.waldiez:/flow.waldiez \\\n  -v $(pwd)/output:/output \\\n  waldiez/waldiez convert --file /flow.waldiez --output /output/flow.py\n\n# Convert to a Jupyter Notebook instead\ndocker run --rm \\\n  -v $(pwd)/flow.waldiez:/flow.waldiez \\\n  -v $(pwd)/output:/output \\\n  waldiez/waldiez convert --file /flow.waldiez --output /output/flow.ipynb\n\n# Convert and immediately run it\ndocker run --rm -it \\\n  -v $(pwd)/flow.waldiez:/flow.waldiez \\\n  -v $(pwd)/output:/output \\\n  waldiez/waldiez run --file /flow.waldiez --output /output/output.py\n</code></pre> <p>Note</p> <p>\ud83d\udcdd Tips:</p> <ul> <li>Try using absolute paths (or ${PWD}) in all <code>-v</code> volume mounts</li> <li>Avoid spaces or special characters in file paths</li> <li>The <code>.waldiez</code> file should be a valid flow you\u2019ve created in the Playground or elsewhere</li> <li> <p>If you\u2019re using Linux with Podman and/or SELinux, you might encounter permission errors, so you can try adding the following flags:</p> <p><code>--userns=keep-id</code> and <code>--security-opt label=disable</code> Example:</p> <pre><code>podman run \\\n    --rm \\\n    -it \\\n    -v $(pwd)/flow.waldiez:/flow.waldiez \\\n    -v $(pwd)/output:/output \\\n    --userns=keep-id \\\n    --security-opt label=disable \\\n    waldiez/waldiez convert --file /flow.waldiez --output /output/flow.py\n</code></pre> </li> </ul> <ul> <li>\ud83d\udcac If you run into any issues, feel free to open an issue on Github. We\u2019re happy to help!</li> </ul>"},{"location":"usage/index.html#4-use-the-jupyterlab-extension-for-interactive-notebooks","title":"\ud83d\udce6 4. Use the JupyterLab Extension (for Interactive Notebooks)","text":"<p>If you're already working in JupyterLab or prefer a notebook-based environment, you can use the official Waldiez extension.</p> <p>This gives you:</p> <ul> <li>\ud83d\udda5\ufe0f A visual flow editor directly inside JupyterLab</li> <li>\ud83d\udce4 Export flows to <code>.py</code> or <code>.ipynb</code></li> <li>\u25b6\ufe0f Run flows from within the notebook environment</li> </ul>"},{"location":"usage/index.html#install-with-jupyter-support","title":"\ud83d\ude80 Install with Jupyter support","text":"<p>If you installed Waldiez from PyPI, add the <code>[jupyter]</code> extra:</p> <pre><code># Option 1: Fresh install\npip install waldiez[jupyter]\n\n# Option 2: Add it to an existing install\npip install waldiez-jupyter\n</code></pre> <p>If you\u2019re using the <code>waldiez/jupyter</code> Docker image, the Waldiez extension is already preinstalled. To launch it, run:</p> <pre><code>docker run -it -p 8888:8888 -v ${PWD}/notebooks:/home/user/notebooks waldiez/jupyter\n</code></pre> <p>This will start a JupyterLab server and mount the <code>notebooks</code> directory from your host machine to the container. You can then open your browser at <code>http://localhost:8888</code> and start using Waldiez.</p> <p> </p>"},{"location":"usage/index.html#launch-the-waldiez-ui-inside-jupyterlab","title":"\u25b6\ufe0f Launch the Waldiez UI inside JupyterLab","text":"<p>Once installed, you can either:</p> <pre><code># Use the CLI to open JupyterLab with the extension:\nwaldiez lab\n\n# Or just launch JupyterLab normally:\njupyter lab\n</code></pre>"},{"location":"usage/index.html#extension-not-loading","title":"\u2753 Extension not loading?","text":"<p>Make sure you're running JupyterLab from the same environment where Waldiez is installed. If needed, you can reinstall or enable the extension manually:</p> <pre><code>jupyter labextension install waldiez\n# can also check the currently installed and enabled extensions with:\njupyter labextension list\n</code></pre> <p>Note</p> <p>You can also run Waldiez flows inside notebooks using the Python API:</p> <pre><code>from waldiez import WaldiezRunner\n\n# Load your flow from a file\nrunner = WaldiezRunner.load(\"flow.waldiez\")\n\n# Run it and write the output to a script\nrunner.run(output_path=\"output.py\")\n</code></pre>"},{"location":"usage/index.html#5-use-the-visual-studio-code-extension-familiar-ide-experience","title":"\ud83d\udda5\ufe0f 5. Use the Visual Studio Code Extension (Familiar IDE Experience)","text":"<p>If you\u2019re a VS Code user, you can work with Waldiez flows right inside your IDE using the official extension.</p> <p>This gives you:</p> <ul> <li>\ud83e\udde9 A drag-and-drop flow editor inside VS Code</li> <li>\ud83d\udcc2 Open <code>.waldiez</code> files directly</li> <li>\ud83d\udcbe Save, edit, and share flows as files</li> <li>Convert and run flows if a valid python interpreter exists.</li> </ul>"},{"location":"usage/index.html#install-the-extension","title":"\ud83d\udce5 Install the Extension","text":"<p>You can install the extension directly from the VS Code Marketplace:</p> <ol> <li>Open the Extensions panel (<code>Ctrl+Shift+X</code> or <code>Cmd+Shift+X</code> on MacOS)</li> <li>Search for: <code>Waldiez</code> and install it</li> </ol> <p>Marketplace link: \ud83d\udd17 https://marketplace.visualstudio.com/items?itemName=Waldiez.waldiez-vscode</p> <p>Source code repo: \ud83d\udd27 https://github.com/waldiez/vscode</p>"},{"location":"usage/index.html#6-use-waldiez-studio-fastapi-based-web-ui","title":"\ud83c\udfac 6. Use Waldiez Studio (FastAPI-based Web UI)","text":"<p>Waldiez Studio is a lightweight local web application that allows you to:</p> <ul> <li>\ud83e\udde9 Create and edit flows using a visual UI</li> <li>\u25b6\ufe0f Run flows and see output directly in the browser</li> <li>\ud83d\udce4 Export flows to Python or Jupyter formats</li> </ul>"},{"location":"usage/index.html#installing-waldiez-studio","title":"\ud83d\ude80 Installing Waldiez Studio","text":"<p>If you're using PyPI, install the <code>[studio]</code> extra:</p> <pre><code>pip install waldiez[studio]\n# or\npip install waldiez-studio\n</code></pre> <p>If you\u2019re using Docker, pull the waldiez/studio image:</p> <pre><code>docker pull waldiez/studio\n</code></pre>"},{"location":"usage/index.html#running-waldiez-studio","title":"\ud83d\ude80 Running Waldiez Studio","text":"<p>You can run Waldiez Studio using the command line:</p> <pre><code>waldiez studio --help\n\n# example output (from typer \u2764\ufe0f):\n\n# Usage: waldiez studio [OPTIONS]\n\n# --host                TEXT        The host to run the server on [default: localhost]\n# --port                INTEGER     The port to run the server on [default: 8000]\n# --reload --no-reload              Reload the server on file changes [default: no-reload]\n# --log-level\n#                      [CRITICAL|ERROR|WARNING|INFO|DEBUG]  The log level [default: INFO]\n# --domain-name         TEXT        [default: localhost]\n# --trusted-hosts       TEXT        [default: []]\n# --trusted-origins     TEXT        [default: []]]\n# --force-ssl --no-force-ssl        Force SSL [default: no-force-ssl]\n# --version                         Show the version\n# --help -h                         Show this message and exit.\n</code></pre> <p>A typical usage would be:</p> <pre><code>waldiez studio --host 0.0.0.0 --port 8000\n</code></pre> <p>You can then open your browser and navigate to: \ud83d\udd17 http://localhost:8000</p> <p>Note</p> <p>We are using FastAPI's TrustedHostMiddleware, so make sure you visit the correct URL if you are using a different host or port. You can also use the <code>--trusted-hosts</code> option to specify a list of trusted hosts. For example, if you are running Waldiez Studio on a remote server, you can use:</p> <pre><code>waldiez studio --trusted-hosts example.com\n</code></pre> <p>This will allow you to access waldiez studio from <code>https://example.com</code> (assuming that a reverse proxy is set up to forward requests to the correct port and manages SSL).</p>"},{"location":"usage/index.html#advanced-usage","title":"\ud83e\uddea Advanced Usage","text":""},{"location":"usage/index.html#using-the-python-api","title":"\ud83d\udc0d Using the Python API","text":"<p>You can load, convert, and run <code>.waldiez</code> flows directly in Python.</p>"},{"location":"usage/index.html#export-a-flow","title":"Export a flow","text":"<pre><code>from waldiez import WaldiezExporter\n\nflow_path = \"/path/to/flow.waldiez\"\noutput_path = \"/path/to/output.py\"  # or .ipynb\n\nexporter = WaldiezExporter.load(flow_path)\nexporter.export(output_path)\n</code></pre>"},{"location":"usage/index.html#run-a-flow","title":"Run a flow","text":"<pre><code>from waldiez import WaldiezRunner\nfrom waldiez import WaldiezRunner\n\nflow_path = \"/path/to/flow.waldiez\"\noutput_path = \"/path/to/output.py\"\n\nrunner = WaldiezRunner.load(flow_path)\nrunner.run(output_path=output_path)\n</code></pre> <p>\ud83e\uddf0 Using the Command Line</p> <p>Waldiez also includes a CLI for converting and running flows:</p> <pre><code># Convert a .waldiez flow to a Python script or Jupyter notebook\nwaldiez convert --file /path/to/flow.waldiez --output /path/to/output.py\n\n# Convert and run (with optional --force if output exists)\nwaldiez run --file /path/to/flow.waldiez --output /path/to/output.py --force\n</code></pre> <p>Note</p> <p>\ud83d\udca1 Use <code>waldiez --help</code>, <code>waldiez convert --help</code> or <code>waldiez run --help</code> to explore more CLI options.</p> <p>\u27a1\ufe0f That's it! Now that you're set up, learn how to use Waldiez \u2192</p> <p> </p>"},{"location":"usage/agents.html","title":"Agents","text":"<p>In the agents view, you can design and organize agent workflows by connecting nodes representing different components in the process.</p> <ul> <li>Adding Agents:<ul> <li>On the left sidebar, you'll find options such as \"User Proxy,\" \"Assistant,\" and \"Group Manager.\" Drag and drop any of these to the canvas to start building your workflow.</li> </ul> </li> </ul> <ul> <li>Connecting Nodes:<ul> <li>Connect nodes by dragging lines from one node to another. This is used to create the information flow between agents.</li> </ul> </li> </ul> <ul> <li>Configuring Agents:<ul> <li>Each agent has settings where you can specify the model, add a system message, and set other properties.</li> <li>Double-clicking an agent allows you to edit its properties, such as setting the agent's name, linking models and skills to it, and defining the agent's behavior.</li> </ul> </li> </ul> <p> </p>"},{"location":"usage/agents.html#user-proxy-agent-assistant-agent","title":"User Proxy Agent, Assistant Agent","text":"<p>The assistant agent is a conversational agent that can interact with users and execute code. You can configure the assistant's behavior, termination settings, code execution settings, and model configuration. The user proxy agent acts as an intermediary between the user and the assistant. The settings for these agents are similar, with some differences in the default configurations.</p> <p> </p>"},{"location":"usage/agents.html#general-settings","title":"General Settings","text":"<p>This section allows you to configure the general behavior of the assistant agent.</p> <ul> <li>Human Input Mode: Select how often the agent should ask for human input after sending a message.<ul> <li>Always: Prompts for human input every time. This is the default setting for a user proxy agent.</li> <li>Terminate: Only prompts if a termination message is received or after reaching a maximum number of consecutive auto-replies.</li> <li>Never: Never prompts for human input unless a termination message is received. This is the default setting for an assistant agent.</li> </ul> </li> </ul> <ul> <li>Max Consecutive Auto Reply: Set the maximum number of consecutive auto-replies before pausing for human input.</li> <li>Agent Default Auto Reply: Enter the default reply message the agent will use when there\u2019s no human input.</li> </ul>"},{"location":"usage/agents.html#termination-settings","title":"Termination Settings","text":"<p>The termination settings specify the conditions under which the assistant should stop replying.</p> <ul> <li>Termination: Choose the type of termination condition (e.g., by keyword or custom method).</li> <li>Termination Criterion: Set the specific criterion (e.g., \"Keyword is found\").</li> <li>Termination Keywords: Enter the keywords that will trigger termination.</li> </ul>"},{"location":"usage/agents.html#code-execution-settings","title":"Code Execution Settings","text":"<p>If your assistant can execute code, configure these options here.</p> <ul> <li>Use Code Execution: Check this box to enable code execution capabilities.</li> <li>Working Directory: Set the directory where code will be executed.</li> <li>Last N Messages: Specify the number of previous messages to consider when executing code.</li> <li>Timeout: Set a timeout limit for code execution.</li> <li>Use Docker: Enable Docker for isolated code execution, if needed.</li> <li>Functions: Select specific functions the assistant can use.</li> </ul>"},{"location":"usage/agents.html#model-configuration","title":"Model Configuration","text":"<p>Link models to your agent in this section.</p> <ul> <li>Models linked to agent: Select the model you wish to link. Multiple models can be linked for various functionalities.</li> </ul>"},{"location":"usage/agents.html#skill-management","title":"Skill Management","text":"<p>Define specific skills for the assistant.</p> <ul> <li>Skill: Select a previously defined skill to link to the agent.</li> <li>Executor: Choose the executor responsible for running the skill.</li> <li>Current Skills: View and manage currently linked skills.</li> </ul>"},{"location":"usage/agents.html#nested-chats-configuration","title":"Nested Chats Configuration","text":"<p>When an agent is connected to another agent, you can configure the nested chat settings to create a multi-step conversation flow. This allows you to set up automated chat sequences that are triggered based on specific messages. This can be used to guide conversations through predefined paths.   </p>"},{"location":"usage/agents.html#overview","title":"Overview","text":"<ul> <li>Triggered by: Select who initiates the nested chat.<ul> <li>For example, <code>User =&gt; Assistant</code> means the user sends a message to the assistant, which then triggers the nested chat.</li> </ul> </li> </ul> <ul> <li>Agent's Reply: Check this box if the message should be sent from the assistant back to the user. If unchecked, the message will be directed to the next agent in the nested sequence.</li> </ul> <ul> <li>Messages:<ul> <li>Use this to specify the nested chat that will be triggered.</li> <li>The final message in the sequence will return to the main chat.</li> <li>If the Agent's Reply box is checked, the trigger message is sent to the assistant; otherwise, it is sent to the user.</li> </ul> </li> </ul>"},{"location":"usage/agents.html#configure-nested-chats","title":"Configure Nested Chats","text":"<ol> <li> <p>Define Trigger:</p> <ul> <li>Select the interaction pattern for triggering nested chats (e.g., <code>User =&gt; Assistant</code>).</li> <li>Click Add to include this trigger.</li> </ul> </li> <li> <p>Set Messages:</p> <ul> <li>In the Messages dropdown, select the message or nested chat sequence you wish to include.</li> <li>Check Agent's Reply if this message should be sent back to the assistant; otherwise, leave it unchecked.</li> </ul> </li> <li> <p>Add or Remove Steps:</p> <ul> <li>Use Add to include additional messages or nested chat sequences.</li> <li>Remove steps as needed to refine the flow.</li> </ul> </li> </ol> <p>Use these settings to create complex conversation flows that can help automate responses and guide users through a series of related interactions.</p> <p>Each of these sections allows you to customize the assistant's behavior and capabilities. Make sure to save changes before exiting the modal.</p>"},{"location":"usage/agents.html#group-manager-agent","title":"Group Manager Agent","text":"<p>A group manager agent is used to manage group chats and multi-agent conversations. It allows you to configure group settings, speaker selection, and transitions between speakers.</p>"},{"location":"usage/agents.html#group-chat-configuration","title":"Group Chat Configuration","text":"<p>The Group Chat configuration allows you to manage group settings, speaker selection, and transitions between speakers in a multi-agent chat environment.</p>"},{"location":"usage/agents.html#configuration","title":"Configuration","text":""},{"location":"usage/agents.html#settings","title":"Settings","text":"<ul> <li>Admin Name: Define the name of the group admin.</li> <li>Max Rounds: Set the maximum number of conversation rounds for the group.</li> <li>Enable Clear History: Check this to allow history to be cleared after each conversation.</li> <li>Send Introductions: Enable this to automatically send introductions at the beginning.</li> <li>Max Retries for Selecting Speaker: Define the maximum retries for selecting a speaker.</li> </ul>"},{"location":"usage/agents.html#speakers","title":"Speakers","text":""},{"location":"usage/agents.html#speaker-selection","title":"Speaker Selection","text":"<ul> <li>Speaker Repetition Mode: Choose how often a speaker can repeat.<ul> <li>Disabled (Use transitions): The next speaker is chosen based on transitions.</li> <li>Enabled: Allows the same speaker to repeat based on set parameters.</li> </ul> </li> </ul> <ul> <li>Speaker Selection Method: Select the method for determining the next speaker:<ul> <li>Auto: Automatically selects the next speaker.</li> <li>Manual: Allows manual selection of the next speaker.</li> <li>Random: Randomly selects the next speaker.</li> <li>Round Robin: Selects speakers in a round-robin fashion.</li> <li>Custom Method: Use a custom function to select the next speaker.</li> </ul> </li> </ul>"},{"location":"usage/agents.html#speaker-transitions","title":"Speaker Transitions","text":"<p>Set specific transitions between speakers.</p> <ol> <li>From / To: Choose which agents the transition applies to. You can select more than one agents for the \"To\" field.</li> <li>Transitions Mode: Select if transitions are Allowed or Blocked.</li> <li>Add Transition: Click Add to save the transition.</li> </ol> <p>These settings allow you to manage complex group conversations and control transitions between speakers that are members of the same group.</p>"},{"location":"usage/agents.html#rag-user-proxy-agent","title":"RAG User Proxy Agent","text":"<p>A RAG User Proxy agent is used to enable retrieval-augmented generation (RAG) for generating responses. You can configure the agent to use RAG, set up document retrieval, customize text splitting, and define advanced settings. This can be useful for creating responses based on dynamic content retrieval and custom function integration.</p> <p> </p>"},{"location":"usage/agents.html#enable-rag-and-basic-settings","title":"Enable RAG and Basic Settings","text":"<p>In the Agent tab, you can enable RAG to allow the agent to use retrieval-augmented generation for generating responses.</p> <ul> <li>Use RAG: Check this box to activate RAG for the agent.</li> <li>Name, Description, System Message: Fill out the name, description, and any system message for the agent.</li> <li>Human Input Mode: Set when the agent should request human input.</li> <li>Max Consecutive Auto Reply: Define the limit for consecutive auto-replies.</li> <li>Agent Default Auto Reply: Specify a default message if there\u2019s no human input.</li> </ul>"},{"location":"usage/agents.html#rag-configuration-retrieve-config","title":"RAG Configuration - Retrieve Config","text":"<p>In the RAG tab, configure the retrieval settings for the agent.</p> <ul> <li>Task: Select the RAG task, such as <code>code</code>, <code>qa</code>, or <code>default</code>. The task affects the system prompt used.</li> <li>Docs Paths: Specify paths to any documents you wish to include.</li> <li>Collection Name: Set the collection name (e.g., <code>autogen-docs</code>).</li> <li>Number of Results: Define the number of documents to retrieve for responses.</li> <li>Distance Threshold: Set a distance threshold for document retrieval relevance.</li> </ul>"},{"location":"usage/agents.html#rag-configuration-text-splitting","title":"RAG Configuration - Text Splitting","text":"<p>Customize text splitting settings to control how the retrieved content is processed.</p> <ul> <li>Chunk Token Size: Set the size of text chunks in tokens.</li> <li>Context Max Tokens: Define the maximum number of tokens for context.</li> <li>Chunk Mode: Choose the chunking mode (<code>Multi Lines</code>, <code>Single Line</code>, etc.).</li> <li>Must Break at Empty Line: Check this if chunks should only break at empty lines when in <code>Multi Lines</code> mode.</li> </ul>"},{"location":"usage/agents.html#rag-configuration-vector-db-config","title":"RAG Configuration - Vector DB Config","text":"<p>Set up the Vector Database for embedding and retrieval.</p> <ul> <li>Embedding Model: Choose the model for embeddings. Available models include <code>all-MiniLM-L6-v2</code>, <code>bge-small-en-v1.5</code>, etc.</li> <li>Use Persistent Storage: Enable this to store embeddings persistently.</li> <li>Connection URL: Enter the connection URL for the vector database.</li> </ul>"},{"location":"usage/agents.html#rag-configuration-custom-functions","title":"RAG Configuration - Custom Functions","text":"<p>Enable and define custom functions for embedding, token count, and text splitting.</p> <ul> <li>Use Custom Embedding Function: Check this box to enable a custom function for embeddings.</li> <li>Embedding Function: Define the Python function for custom embeddings. Refer to the code example provided to see how to structure the function.</li> </ul>"},{"location":"usage/agents.html#rag-configuration-advanced-settings","title":"RAG Configuration - Advanced Settings","text":"<p>The Advanced tab offers additional configuration options. You probably won't need to adjust these settings unless you have specific requirements.</p> <ul> <li>Customized Prompt: Specify a custom prompt for generating responses.</li> <li>Customized Answer Prefix: Add a prefix for responses generated by the agent.</li> <li>Options: Check options like <code>Update Context</code>, <code>Get or Create</code>, <code>New Docs</code>, <code>Overwrite</code>, and <code>Recursive</code> to further control document handling and context updates.</li> </ul>"},{"location":"usage/convert.html","title":"Convert","text":""},{"location":"usage/convert.html#convert-a-waldiez-flow","title":"Convert a Waldiez flow","text":"<p>Instead of directly running, you can export it as a Python script or a Jupyter notebook. You can just right click on the <code>.waldiez</code> file in the jupyter lab file browser and select <code>To python</code> or <code>To notebook</code>.</p> <p> </p> <p>Here is an example Jupyter notebook generated from a Waldiez flow: On-boarding.ipynb</p>"},{"location":"usage/flow.html","title":"Flow","text":""},{"location":"usage/flow.html#connecting-agents","title":"Connecting Agents","text":"<p>Once you have created and configured agents, you can connect them to create a flow of interactions. This flow can be as simple as a single agent responding to user inputs or as complex as multiple agents interacting with each other.</p>"},{"location":"usage/flow.html#chats","title":"Chats","text":""},{"location":"usage/flow.html#message-type-and-content","title":"Message Type and Content","text":"<p>In the Message tab, you can set the type and content of the message that will be sent from the source (e.g., Assistant) to the target (e.g., User).</p> <ul> <li>Message Type: Choose the type of message from the dropdown:<ul> <li>None: No message is sent.</li> <li>Text: Allows for sending a custom text message.</li> <li>Custom Method: Select this if you have a custom message handling method.</li> </ul> </li> </ul> <ul> <li>Message Content: If \"Text\" is selected as the type, enter the specific message you want to send here.</li> </ul>"},{"location":"usage/flow.html#carryover-option","title":"Carryover Option","text":"<p>The Carryover setting determines if the last context from a previous message should be appended to the new message.</p> <ul> <li>Carryover: Check this box to include the last carryover context in the message.<ul> <li>For example, if the carryover context includes instructions or prior context, it will be appended to the message.</li> </ul> </li> </ul> <p>Note</p> <p>Do not check Carryover if this is the first message in the flow.</p>"},{"location":"usage/flow.html#nested-chats","title":"Nested Chats","text":"<p>If the type of chat is a nested chat, you can configure the nested chat settings in the Nested Chat tab. Here, in addition to the message type and content, you can set up replies specific to nested chat interactions.</p>"},{"location":"usage/flow.html#flow-order-and-dependencies","title":"Flow Order and Dependencies","text":"<p>This guide explains how to configure and manage flows, which are sequences of actions or chats that an agent can execute.</p> <p> </p>"},{"location":"usage/flow.html#edit-flow-basic-settings","title":"Edit Flow - Basic Settings","text":"<p>In the Edit Flow tab, set up the basic details and order of chats in the flow.</p> <ul> <li>Name: Enter a name for the flow.</li> <li>Description: Provide a brief description of the flow.</li> <li>Order: Define the sequence in which chats should run when the flow initializes.<ul> <li>Add a Chat: Use the dropdown to select and add a new chat to the flow order.</li> <li>Remove a Chat: Click Remove next to a chat to delete it from the sequence.</li> <li>Reorder Chats: Use the \u2191 and \u2193 buttons to adjust the order of chats.</li> </ul> </li> </ul>"},{"location":"usage/flow.html#edit-flow-other-settings","title":"Edit Flow - Other Settings","text":"<p>In the Other tab, specify any additional requirements or tags for the flow.</p> <ul> <li>Additional Requirements: Add any Python packages that need to be installed before running the flow.<ul> <li>Example: If your flow requires the <code>pandas</code> library, type <code>pandas</code> and click + to add it to the requirements list.</li> <li>Each package listed here will be installed via <code>pip install</code> before the flow starts.</li> </ul> </li> <li>Tags: Add relevant tags to categorize the flow for easier management or searching.</li> </ul>"},{"location":"usage/models.html","title":"Models","text":""},{"location":"usage/models.html#setting-up-a-model","title":"Setting Up a Model","text":"<ul> <li>Create a new model: On the Models view, click \"Add model\" to create a new model. You can click on the gear icon, or double click the model's view to access its settings.</li> </ul> <ul> <li>Basic Tab:<ul> <li>Name: Enter a unique name for the model.</li> <li>Description: Provide a brief description of the model's purpose or functionality.</li> <li>Model Type: Select the model type (e.g., OpenAI) from the dropdown list.</li> <li>API Key: Input your API key to authenticate requests.</li> <li>Base URL: If the base URL is not one that is pre-filled, you can specify the API base URL (for OpenAI models, it\u2019s usually <code>https://api.openai.com/v1</code> but for other OpenAI compatible models, this can differ).</li> </ul> </li> </ul> <ul> <li>Advanced Tab:<ul> <li>Temperature: Adjust the temperature (a value between 0 and 1) to control the creativity of the model's output. Lower values produce more deterministic results, while higher values allow for more diverse responses.</li> <li>Top P: Set the Top P parameter to limit the selection of tokens based on cumulative probability. If you want it unset, leave it as is.</li> <li>Max Tokens: Define the maximum token count for each response (set to \"No limit\" in the example).</li> <li>Default Headers: Add any additional headers needed for API requests (optional).</li> <li>Tags: Use tags to categorize or label the model (optional but recommended).</li> </ul> </li> </ul> <ul> <li>Price Tab:<ul> <li>Prompt price per 1K tokens: Enter the price per 1,000 tokens for the model (optional).</li> <li>Completion price per 1K tokens: Enter the price per 1,000 tokens for completions (optional).</li> </ul> </li> </ul> <ul> <li>Save the Configuration:<ul> <li>After completing the setup in any of the tabs, click Save to confirm and apply the model configuration.</li> </ul> </li> </ul> <p>This setup will enable you to link this model to one or more agents for generating responses based on the model's capabilities.</p>"},{"location":"usage/run.html","title":"Running and Troubleshooting","text":""},{"location":"usage/run.html#running-a-flow","title":"Running a Flow","text":"<p>Once we have setup the models, agents, and connections in the flow, we open the Edit Flow modal to specify which connections should be used to initiate the conversation, specify any additional requirements that might be needed. Let's also give the flow a descriptive name and maybe a short description.</p> <p> </p>"},{"location":"usage/run.html#troubleshooting-errors","title":"Troubleshooting Errors","text":"<p>During the flow execution, you might encounter errors that can interrupt the conversation. Here are some common errors and solutions to help you resolve them.</p> <p>Warning</p> <p>If you are on python 3.13, and trying to use a crewAI Tool, this will probably not work, because python3.13 is not yet supported on crawAI (unless we haven't updated this page \ud83d\ude1b). Here are some links to check the compatibility:</p> <ul> <li>https://github.com/ag2ai/ag2/blob/main/pyproject.toml#L178-L180</li> <li>https://github.com/crewAIInc/crewAI/blob/main/pyproject.toml#L6</li> </ul>"},{"location":"usage/run.html#troubleshooting-common-errors","title":"Troubleshooting Common Errors","text":"<p>Note</p> <p>If an error persists, or new packages were installed, you might need to restart the kernel to apply the changes. If this does not resolve the issue, or you need further assistance, please reach out to us, we are more than happy to help!</p>"},{"location":"usage/run.html#chromadb-installation-fails-on-windows","title":"ChromaDB Installation Fails on Windows","text":"<p>Description: When installing <code>chromadb</code> on Windows, you might encounter build errors due to missing C++ build tools.</p> <ul> <li> <p>Error Message (example):</p> <p><code>text error: Microsoft Visual C++ 14.0 or greater is required. Get it with \"Microsoft C++ Build Tools\"</code></p> </li> </ul> <ul> <li>Cause: Some ChromaDB dependencies require native code compilation. Windows systems need additional tools for this. Here is a related link on chroma's repository with a solution (thanks to the author): https://github.com/chroma-core/chroma/issues/189#issuecomment-1454418844</li> </ul> <ul> <li> <p>Solution:</p> <ul> <li>Install the required C++ build tools from the Microsoft website. You probably need to install a few only components (based on you windows version, see the link above if in doubt).</li> <li> <p>You can manually test the installation of <code>chromadb</code> by running the following command in your terminal:</p> <pre><code>pip install chromadb\n</code></pre> </li> </ul> <ul> <li>If the installation is successful, you can proceed with the flow. If not, check the error messages for more details.</li> </ul> </li> </ul> <p>Note</p> <p>This error could also occur with other extra dependencies that might be needed for running a flow, so keep in mind this error in case you are using other packages that require native code compilation.</p> <p> </p>"},{"location":"usage/run.html#validationerror-agent-not-connected","title":"ValidationError: Agent Not Connected","text":"<p>Description: This error occurs when an agent in the flow is not connected to any other node, causing the flow to be incomplete.</p> <ul> <li>Error Message:</li> </ul> <pre><code>  ValidationError: 1 validation error for [Flow Name]\n  Value error, Agent does not connect to any other node.\n</code></pre> <ul> <li>Solution:<ul> <li>Identify the agent mentioned in the error (e.g., <code>Planner</code>).</li> <li>Connect this agent to another node in the flow to complete the sequence.</li> <li>Re-run the flow after making the connection.</li> </ul> </li> </ul> <p> </p>"},{"location":"usage/run.html#openai-error-missing-api-key","title":"OpenAI Error: Missing API Key","text":"<p>Description: This error appears when the OpenAI API key is not set, preventing the tool from accessing OpenAI's services.</p> <ul> <li> <p>Error Message:</p> <pre><code>OpenAIError: The api_key client option must be set either by passing api_key to the client or by setting the OPENAI_API_KEY environment variable.\n</code></pre> </li> </ul> <ul> <li>Solution:<ul> <li>Make sure you have set the API key in the model configuration.</li> <li>Restart the flow after setting the API key to ensure it is recognized.</li> </ul> </li> </ul>"},{"location":"usage/run.html#skill-or-custom-functions-related-errors","title":"Skill or custom functions related errors","text":"<p>Description: Errors related to skills or custom functions can occur due to incorrect function names, missing environment variables, or syntax errors in the code.</p> <p> </p> <p>Make sure to check the following:</p> <ul> <li>Function Name: In skills, ensure the function name in the code matches the skill name.</li> <li>Syntax Errors: Review the code for any syntax errors or typos that may cause the function to fail.</li> <li>Environment Variables: If environment variables are required, ensure they are correctly set in the skill configuration.</li> <li>Logs: Check the logs for detailed error messages that can help identify the issue.</li> </ul>"},{"location":"usage/run.html#general-debugging-tips","title":"General Debugging Tips","text":"<ul> <li>Check Connections: Ensure all nodes are connected correctly in the flow. Unconnected nodes can interrupt the flow sequence.</li> <li>Verify Configuration: Review the configuration for each agent and node. Ensure all fields are populated with valid data, especially required fields like API keys.</li> <li>Restart and Retry: After making changes to resolve errors, restart the flow to test if the issue is resolved.</li> <li>Review Logs: Check the logs for detailed error messages or warnings that can help identify the root cause of the issue.</li> </ul>"},{"location":"usage/skills.html","title":"Skills","text":""},{"location":"usage/skills.html#setting-up-a-new-skill","title":"Setting Up a new Skill","text":"<ul> <li>Create a new skill:     On the Skills view, click \"Add skill\" to create a new skill. You can click on the gear icon, or double click the skill's view to access its settings.</li> </ul> <ul> <li>Basic Information:<ul> <li>Name: Enter a unique name for the skill (e.g., <code>new_skill</code>).</li> <li>Description: Provide a brief description of the skill's purpose.</li> </ul> <p>Note</p> <p>The skill name should match the function name in the code.</p> </li> </ul> <ul> <li>Content Section:<ul> <li>This is where you define the code for your skill</li> <li>Template Code:<ul> <li>Replace the provided template code with your actual implementation.</li> <li>Ensure that the function name matches the skill's name (e.g., if the skill is named <code>new_skill</code>, the function should also be named <code>new_skill</code>).</li> </ul> </li> <li>Example:<pre><code>  \"\"\"\n  Replace this with your code.\n  Ensure the function name matches the skill name.\n  \"\"\"\n  def new_skill() -&gt; None:\n      \"\"\"Skill entry point.\"\"\"\n      # Add your logic here\n</code></pre> </li> </ul> </li> </ul> <ul> <li>Environment Variables (Optional):<ul> <li>Add any necessary environment variables as key-value pairs to support the skill.</li> <li>Click the + button to add multiple environment variables if required.</li> </ul> </li> </ul> <ul> <li>Save the Configuration:<ul> <li>Once you have entered the skill details and code, click Save to confirm and apply the skill configuration.</li> </ul> </li> </ul> <p>This setup enables you to define and configure a new skill within your project by providing necessary code, naming conventions, and any environment variables.</p>"},{"location":"blog/category/standup-comedians.html","title":"Standup comedians","text":""},{"location":"blog/category/standup-comedians.html#standup-comedians","title":"Standup Comedians","text":""},{"location":"blog/category/sequential-chats.html","title":"Sequential chats","text":""},{"location":"blog/category/sequential-chats.html#sequential-chats","title":"Sequential chats","text":""},{"location":"blog/category/customer-onboarding.html","title":"Customer onboarding","text":""},{"location":"blog/category/customer-onboarding.html#customer-onboarding","title":"Customer onboarding","text":""}]}